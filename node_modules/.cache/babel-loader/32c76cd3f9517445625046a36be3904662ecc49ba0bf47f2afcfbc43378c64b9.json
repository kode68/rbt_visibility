{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridContentHeightSelector, gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n\n  /* TODO: extract dimensions code */\n  const contentHeight = useGridSelector(apiRef, gridContentHeightSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const dimensions = {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    columnsTotalWidth,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  };\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    scrollbarSize: rootProps.scrollbarSize,\n    dimensions,\n    initialState: {\n      scroll: rootProps.initialState?.scroll,\n      dimensions: apiRef.current.state.dimensions,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    isRtl,\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowIdToIndexMap: currentPage.rowIdToIndexMap,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    hasColSpan,\n    contentHeight,\n    minimalContentHeight,\n    autoHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? (rowEntry, visibility) => getRowSpacing(_extends({}, rowEntry, visibility, {\n      indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n    })) : undefined, [apiRef, getRowSpacing]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    getColspan: (rowId, column) => {\n      if (typeof column.colSpan === 'function') {\n        const row = apiRef.current.getRow(rowId);\n        const value = apiRef.current.getRowValue(row, column);\n        return column.colSpan(value, row, column, apiRef) ?? 0;\n      }\n      return column.colSpan ?? 0;\n    },\n    renderRow: params => /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n      row: params.model,\n      rowId: params.id,\n      index: params.rowIndex,\n      selected: isRowSelected(params.id),\n      offsetLeft: params.offsetLeft,\n      columnsTotalWidth: columnsTotalWidth,\n      rowHeight: params.baseRowHeight,\n      pinnedColumns: pinnedColumns,\n      visibleColumns: params.columns,\n      firstColumnIndex: params.firstColumnIndex,\n      lastColumnIndex: params.lastColumnIndex,\n      focusedColumnIndex: params.focusedColumnIndex,\n      isFirstVisible: params.isFirstVisible,\n      isLastVisible: params.isLastVisible,\n      isNotVisible: params.isVirtualFocusRow,\n      showBottomBorder: params.showBottomBorder,\n      scrollbarWidth: verticalScrollbarWidth,\n      gridHasFiller: hasFiller\n    }, rootProps.slotProps?.row), params.id),\n    renderInfiniteLoadingTrigger: id => apiRef.current.getInfiniteLoadingTriggerElement?.({\n      lastRowId: id\n    })\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = virtualizer.store.state.dimensions;\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.dimensions !== apiRef.current.state.dimensions) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        dimensions: state.dimensions\n      }));\n    }\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}","map":{"version":3,"names":["_extends","React","useEventCallback","useRtl","roundToDecimalPlaces","useStoreEffect","useVirtualizer","useFirstRender","createSelector","useGridSelector","gridContentHeightSelector","gridHasFillerSelector","gridVerticalScrollbarWidthSelector","gridDensityFactorSelector","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnPositionsSelector","gridHasColSpanSelector","gridPinnedRowsSelector","gridRowCountSelector","useGridVisibleRows","gridPaginationSelector","gridFocusedVirtualCellSelector","gridRowSelectionManagerSelector","DATA_GRID_PROPS_DEFAULT_VALUES","getValidRowHeight","minimalContentHeight","rowHeightWarning","getTotalHeaderHeight","jsx","_jsx","identity","x","columnsTotalWidthSelector","visibleColumns","positions","colCount","length","computedWidth","useGridVirtualizer","apiRef","rootProps","isRtl","listView","pinnedRows","pinnedColumns","rowSelectionManager","isRowSelected","id","has","current","isRowSelectable","currentPage","hasColSpan","contentHeight","verticalScrollbarWidth","hasFiller","autoHeight","scrollReset","density","baseRowHeight","rowHeight","Math","floor","headerHeight","columnHeaderHeight","groupHeaderHeight","columnGroupHeaderHeight","headerFilterHeight","columnsTotalWidth","headersTotalHeight","leftPinnedWidth","left","reduce","w","col","rightPinnedWidth","right","dimensions","dataRowCount","pagination","rowCount","min","enabled","paginationModel","pageSize","getRowHeight","getEstimatedRowHeight","getRowSpacing","focusedVirtualCell","virtualizer","scrollbarSize","initialState","scroll","state","rowSpanning","virtualization","rows","range","rowIdToIndexMap","columns","refs","container","mainElementRef","scroller","virtualScrollerRef","scrollbarVertical","virtualScrollbarVerticalRef","scrollbarHorizontal","virtualScrollbarHorizontalRef","useMemo","undefined","rowEntry","densityFactor","visibility","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","applyRowHeight","entry","row","unstable_applyPipeProcessors","virtualizeColumnsWithAutoRowHeight","rowBufferPx","columnBufferPx","resizeThrottleMs","onResize","size","publishEvent","onWheel","event","onTouchMove","onRenderContextChange","nextRenderContext","onScrollChange","scrollPosition","top","renderContext","getColspan","rowId","column","colSpan","getRow","value","getRowValue","renderRow","params","slots","model","index","rowIndex","selected","offsetLeft","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","isVirtualFocusRow","showBottomBorder","scrollbarWidth","gridHasFiller","slotProps","renderInfiniteLoadingTrigger","getInfiniteLoadingTriggerElement","lastRowId","store","rowsMeta","_","setState","gridState","register"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/core/useGridVirtualizer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridContentHeightSelector, gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n\n  /* TODO: extract dimensions code */\n  const contentHeight = useGridSelector(apiRef, gridContentHeightSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const dimensions = {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    columnsTotalWidth,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  };\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    scrollbarSize: rootProps.scrollbarSize,\n    dimensions,\n    initialState: {\n      scroll: rootProps.initialState?.scroll,\n      dimensions: apiRef.current.state.dimensions,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    isRtl,\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowIdToIndexMap: currentPage.rowIdToIndexMap,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    hasColSpan,\n    contentHeight,\n    minimalContentHeight,\n    autoHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? (rowEntry, visibility) => getRowSpacing(_extends({}, rowEntry, visibility, {\n      indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n    })) : undefined, [apiRef, getRowSpacing]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    getColspan: (rowId, column) => {\n      if (typeof column.colSpan === 'function') {\n        const row = apiRef.current.getRow(rowId);\n        const value = apiRef.current.getRowValue(row, column);\n        return column.colSpan(value, row, column, apiRef) ?? 0;\n      }\n      return column.colSpan ?? 0;\n    },\n    renderRow: params => /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n      row: params.model,\n      rowId: params.id,\n      index: params.rowIndex,\n      selected: isRowSelected(params.id),\n      offsetLeft: params.offsetLeft,\n      columnsTotalWidth: columnsTotalWidth,\n      rowHeight: params.baseRowHeight,\n      pinnedColumns: pinnedColumns,\n      visibleColumns: params.columns,\n      firstColumnIndex: params.firstColumnIndex,\n      lastColumnIndex: params.lastColumnIndex,\n      focusedColumnIndex: params.focusedColumnIndex,\n      isFirstVisible: params.isFirstVisible,\n      isLastVisible: params.isLastVisible,\n      isNotVisible: params.isVirtualFocusRow,\n      showBottomBorder: params.showBottomBorder,\n      scrollbarWidth: verticalScrollbarWidth,\n      gridHasFiller: hasFiller\n    }, rootProps.slotProps?.row), params.id),\n    renderInfiniteLoadingTrigger: id => apiRef.current.getInfiniteLoadingTriggerElement?.({\n      lastRowId: id\n    })\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = virtualizer.store.state.dimensions;\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.dimensions !== apiRef.current.state.dimensions) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        dimensions: state.dimensions\n      }));\n    }\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,yBAAyB,EAAEC,qBAAqB,EAAEC,kCAAkC,QAAQ,mDAAmD;AACxJ,SAASC,yBAAyB,QAAQ,8BAA8B;AACxE,SAASC,oCAAoC,EAAEC,0CAA0C,EAAEC,2BAA2B,EAAEC,sBAAsB,QAAQ,4CAA4C;AAClM,SAASC,sBAAsB,EAAEC,oBAAoB,QAAQ,sCAAsC;AACnG,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,8BAA8B,QAAQ,8DAA8D;AAC7G,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,8BAA8B,QAAQ,+CAA+C;AAC9F,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ,mCAAmC;AAC7G,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,QAAQA,CAACC,CAAC,EAAE;EACnB,OAAOA,CAAC;AACV;AACA,MAAMC,yBAAyB,GAAGzB,cAAc,CAACM,oCAAoC,EAAEE,2BAA2B,EAAE,CAACkB,cAAc,EAAEC,SAAS,KAAK;EACjJ,MAAMC,QAAQ,GAAGF,cAAc,CAACG,MAAM;EACtC,IAAID,QAAQ,KAAK,CAAC,EAAE;IAClB,OAAO,CAAC;EACV;EACA,OAAOhC,oBAAoB,CAAC+B,SAAS,CAACC,QAAQ,GAAG,CAAC,CAAC,GAAGF,cAAc,CAACE,QAAQ,GAAG,CAAC,CAAC,CAACE,aAAa,EAAE,CAAC,CAAC;AACtG,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EACpD,MAAMC,KAAK,GAAGvC,MAAM,CAAC,CAAC;EACtB,MAAM;IACJwC;EACF,CAAC,GAAGF,SAAS;EACb,MAAMP,cAAc,GAAGzB,eAAe,CAAC+B,MAAM,EAAE1B,oCAAoC,CAAC;EACpF,MAAM8B,UAAU,GAAGnC,eAAe,CAAC+B,MAAM,EAAEtB,sBAAsB,CAAC;EAClE,MAAM2B,aAAa,GAAG9B,0CAA0C,CAACyB,MAAM,CAAC;EACxE,MAAMM,mBAAmB,GAAGrC,eAAe,CAAC+B,MAAM,EAAEjB,+BAA+B,CAAC;EACpF,MAAMwB,aAAa,GAAGC,EAAE,IAAIF,mBAAmB,CAACG,GAAG,CAACD,EAAE,CAAC,IAAIR,MAAM,CAACU,OAAO,CAACC,eAAe,CAACH,EAAE,CAAC;EAC7F,MAAMI,WAAW,GAAGhC,kBAAkB,CAACoB,MAAM,CAAC;EAC9C,MAAMa,UAAU,GAAG5C,eAAe,CAAC+B,MAAM,EAAEvB,sBAAsB,CAAC;;EAElE;EACA,MAAMqC,aAAa,GAAG7C,eAAe,CAAC+B,MAAM,EAAE9B,yBAAyB,CAAC;EACxE,MAAM6C,sBAAsB,GAAG9C,eAAe,CAAC+B,MAAM,EAAE5B,kCAAkC,CAAC;EAC1F,MAAM4C,SAAS,GAAG/C,eAAe,CAAC+B,MAAM,EAAE7B,qBAAqB,CAAC;EAChE,MAAM;IACJ8C;EACF,CAAC,GAAGhB,SAAS;EACb,MAAMiB,WAAW,GAAGf,QAAQ;;EAE5B;EACA,MAAMgB,OAAO,GAAGlD,eAAe,CAAC+B,MAAM,EAAE3B,yBAAyB,CAAC;EAClE,MAAM+C,aAAa,GAAGnC,iBAAiB,CAACgB,SAAS,CAACoB,SAAS,EAAErC,8BAA8B,CAACqC,SAAS,EAAElC,gBAAgB,CAAC;EACxH,MAAMkC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,GAAGD,OAAO,CAAC;EACrD,MAAMK,YAAY,GAAGF,IAAI,CAACC,KAAK,CAACtB,SAAS,CAACwB,kBAAkB,GAAGN,OAAO,CAAC;EACvE,MAAMO,iBAAiB,GAAGJ,IAAI,CAACC,KAAK,CAAC,CAACtB,SAAS,CAAC0B,uBAAuB,IAAI1B,SAAS,CAACwB,kBAAkB,IAAIN,OAAO,CAAC;EACnH,MAAMS,kBAAkB,GAAGN,IAAI,CAACC,KAAK,CAAC,CAACtB,SAAS,CAAC2B,kBAAkB,IAAI3B,SAAS,CAACwB,kBAAkB,IAAIN,OAAO,CAAC;EAC/G,MAAMU,iBAAiB,GAAG5D,eAAe,CAAC+B,MAAM,EAAEP,yBAAyB,CAAC;EAC5E,MAAMqC,kBAAkB,GAAG1C,oBAAoB,CAACY,MAAM,EAAEC,SAAS,CAAC;EAClE,MAAM8B,eAAe,GAAG1B,aAAa,CAAC2B,IAAI,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKD,CAAC,GAAGC,GAAG,CAACrC,aAAa,EAAE,CAAC,CAAC;EACvF,MAAMsC,gBAAgB,GAAG/B,aAAa,CAACgC,KAAK,CAACJ,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKD,CAAC,GAAGC,GAAG,CAACrC,aAAa,EAAE,CAAC,CAAC;EACzF,MAAMwC,UAAU,GAAG;IACjBjB,SAAS;IACTG,YAAY;IACZE,iBAAiB;IACjBE,kBAAkB;IAClBC,iBAAiB;IACjBC,kBAAkB;IAClBC,eAAe;IACfK;EACF,CAAC;;EAED;;EAEA;EACA,MAAMG,YAAY,GAAGtE,eAAe,CAAC+B,MAAM,EAAErB,oBAAoB,CAAC;EAClE,MAAM6D,UAAU,GAAGvE,eAAe,CAAC+B,MAAM,EAAEnB,sBAAsB,CAAC;EAClE,MAAM4D,QAAQ,GAAGnB,IAAI,CAACoB,GAAG,CAACF,UAAU,CAACG,OAAO,GAAGH,UAAU,CAACI,eAAe,CAACC,QAAQ,GAAGN,YAAY,EAAEA,YAAY,CAAC;EAChH,MAAM;IACJO,YAAY;IACZC,qBAAqB;IACrBC;EACF,CAAC,GAAG/C,SAAS;EACb;;EAEA,MAAMgD,kBAAkB,GAAGhF,eAAe,CAAC+B,MAAM,EAAElB,8BAA8B,CAAC;EAClF,MAAMoE,WAAW,GAAGpF,cAAc,CAAC;IACjCqF,aAAa,EAAElD,SAAS,CAACkD,aAAa;IACtCb,UAAU;IACVc,YAAY,EAAE;MACZC,MAAM,EAAEpD,SAAS,CAACmD,YAAY,EAAEC,MAAM;MACtCf,UAAU,EAAEtC,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAAChB,UAAU;MAC3CiB,WAAW,EAAEvD,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAACC,WAAW;MAC7CC,cAAc,EAAExD,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAACE;IACvC,CAAC;IACDtD,KAAK;IACLuD,IAAI,EAAE7C,WAAW,CAAC6C,IAAI;IACtBC,KAAK,EAAE9C,WAAW,CAAC8C,KAAK;IACxBC,eAAe,EAAE/C,WAAW,CAAC+C,eAAe;IAC5ClB,QAAQ;IACRmB,OAAO,EAAElE,cAAc;IACvBU,UAAU;IACVC,aAAa;IACbwD,IAAI,EAAE;MACJC,SAAS,EAAE9D,MAAM,CAACU,OAAO,CAACqD,cAAc;MACxCC,QAAQ,EAAEhE,MAAM,CAACU,OAAO,CAACuD,kBAAkB;MAC3CC,iBAAiB,EAAElE,MAAM,CAACU,OAAO,CAACyD,2BAA2B;MAC7DC,mBAAmB,EAAEpE,MAAM,CAACU,OAAO,CAAC2D;IACtC,CAAC;IACDxD,UAAU;IACVC,aAAa;IACb5B,oBAAoB;IACpB+B,UAAU;IACV6B,YAAY,EAAErF,KAAK,CAAC6G,OAAO,CAAC,MAAM;MAChC,IAAI,CAACxB,YAAY,EAAE;QACjB,OAAOyB,SAAS;MAClB;MACA,OAAOC,QAAQ,IAAI1B,YAAY,CAACtF,QAAQ,CAAC,CAAC,CAAC,EAAEgH,QAAQ,EAAE;QACrDC,aAAa,EAAEtD;MACjB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC2B,YAAY,EAAE3B,OAAO,CAAC,CAAC;IAC3B4B,qBAAqB,EAAEtF,KAAK,CAAC6G,OAAO,CAAC,MAAMvB,qBAAqB,GAAGyB,QAAQ,IAAIzB,qBAAqB,CAACvF,QAAQ,CAAC,CAAC,CAAC,EAAEgH,QAAQ,EAAE;MAC1HC,aAAa,EAAEtD;IACjB,CAAC,CAAC,CAAC,GAAGoD,SAAS,EAAE,CAACxB,qBAAqB,EAAE5B,OAAO,CAAC,CAAC;IAClD6B,aAAa,EAAEvF,KAAK,CAAC6G,OAAO,CAAC,MAAMtB,aAAa,GAAG,CAACwB,QAAQ,EAAEE,UAAU,KAAK1B,aAAa,CAACxF,QAAQ,CAAC,CAAC,CAAC,EAAEgH,QAAQ,EAAEE,UAAU,EAAE;MAC5HC,0BAA0B,EAAE3E,MAAM,CAACU,OAAO,CAACkE,gCAAgC,CAACJ,QAAQ,CAAChE,EAAE;IACzF,CAAC,CAAC,CAAC,GAAG+D,SAAS,EAAE,CAACvE,MAAM,EAAEgD,aAAa,CAAC,CAAC;IACzC6B,cAAc,EAAEnH,gBAAgB,CAAC,CAACoH,KAAK,EAAEC,GAAG,KAAK/E,MAAM,CAACU,OAAO,CAACsE,4BAA4B,CAAC,WAAW,EAAEF,KAAK,EAAEC,GAAG,CAAC,CAAC;IACtHE,kCAAkC,EAAEhF,SAAS,CAACgF,kCAAkC;IAChFhC,kBAAkB,EAAEvF,gBAAgB,CAAC,MAAMuF,kBAAkB,CAAC;IAC9DiC,WAAW,EAAEjF,SAAS,CAACiF,WAAW;IAClCC,cAAc,EAAElF,SAAS,CAACkF,cAAc;IACxCC,gBAAgB,EAAEnF,SAAS,CAACmF,gBAAgB;IAC5CC,QAAQ,EAAE3H,gBAAgB,CAAC4H,IAAI,IAAItF,MAAM,CAACU,OAAO,CAAC6E,YAAY,CAAC,QAAQ,EAAED,IAAI,CAAC,CAAC;IAC/EE,OAAO,EAAE9H,gBAAgB,CAAC+H,KAAK,IAAI;MACjCzF,MAAM,CAACU,OAAO,CAAC6E,YAAY,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAEE,KAAK,CAAC;IAChE,CAAC,CAAC;IACFC,WAAW,EAAEhI,gBAAgB,CAAC+H,KAAK,IAAI;MACrCzF,MAAM,CAACU,OAAO,CAAC6E,YAAY,CAAC,0BAA0B,EAAE,CAAC,CAAC,EAAEE,KAAK,CAAC;IACpE,CAAC,CAAC;IACFE,qBAAqB,EAAEjI,gBAAgB,CAACkI,iBAAiB,IAAI;MAC3D5F,MAAM,CAACU,OAAO,CAAC6E,YAAY,CAAC,4BAA4B,EAAEK,iBAAiB,CAAC;IAC9E,CAAC,CAAC;IACFC,cAAc,EAAEA,CAACC,cAAc,EAAEF,iBAAiB,KAAK;MACrD5F,MAAM,CAACU,OAAO,CAAC6E,YAAY,CAAC,sBAAsB,EAAE;QAClDQ,GAAG,EAAED,cAAc,CAACC,GAAG;QACvB/D,IAAI,EAAE8D,cAAc,CAAC9D,IAAI;QACzBgE,aAAa,EAAEJ;MACjB,CAAC,CAAC;IACJ,CAAC;IACD1E,WAAW;IACX+E,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,IAAI,OAAOA,MAAM,CAACC,OAAO,KAAK,UAAU,EAAE;QACxC,MAAMrB,GAAG,GAAG/E,MAAM,CAACU,OAAO,CAAC2F,MAAM,CAACH,KAAK,CAAC;QACxC,MAAMI,KAAK,GAAGtG,MAAM,CAACU,OAAO,CAAC6F,WAAW,CAACxB,GAAG,EAAEoB,MAAM,CAAC;QACrD,OAAOA,MAAM,CAACC,OAAO,CAACE,KAAK,EAAEvB,GAAG,EAAEoB,MAAM,EAAEnG,MAAM,CAAC,IAAI,CAAC;MACxD;MACA,OAAOmG,MAAM,CAACC,OAAO,IAAI,CAAC;IAC5B,CAAC;IACDI,SAAS,EAAEC,MAAM,IAAI,aAAanH,IAAI,CAACW,SAAS,CAACyG,KAAK,CAAC3B,GAAG,EAAEvH,QAAQ,CAAC;MACnEuH,GAAG,EAAE0B,MAAM,CAACE,KAAK;MACjBT,KAAK,EAAEO,MAAM,CAACjG,EAAE;MAChBoG,KAAK,EAAEH,MAAM,CAACI,QAAQ;MACtBC,QAAQ,EAAEvG,aAAa,CAACkG,MAAM,CAACjG,EAAE,CAAC;MAClCuG,UAAU,EAAEN,MAAM,CAACM,UAAU;MAC7BlF,iBAAiB,EAAEA,iBAAiB;MACpCR,SAAS,EAAEoF,MAAM,CAACrF,aAAa;MAC/Bf,aAAa,EAAEA,aAAa;MAC5BX,cAAc,EAAE+G,MAAM,CAAC7C,OAAO;MAC9BoD,gBAAgB,EAAEP,MAAM,CAACO,gBAAgB;MACzCC,eAAe,EAAER,MAAM,CAACQ,eAAe;MACvCC,kBAAkB,EAAET,MAAM,CAACS,kBAAkB;MAC7CC,cAAc,EAAEV,MAAM,CAACU,cAAc;MACrCC,aAAa,EAAEX,MAAM,CAACW,aAAa;MACnCC,YAAY,EAAEZ,MAAM,CAACa,iBAAiB;MACtCC,gBAAgB,EAAEd,MAAM,CAACc,gBAAgB;MACzCC,cAAc,EAAEzG,sBAAsB;MACtC0G,aAAa,EAAEzG;IACjB,CAAC,EAAEf,SAAS,CAACyH,SAAS,EAAE3C,GAAG,CAAC,EAAE0B,MAAM,CAACjG,EAAE,CAAC;IACxCmH,4BAA4B,EAAEnH,EAAE,IAAIR,MAAM,CAACU,OAAO,CAACkH,gCAAgC,GAAG;MACpFC,SAAS,EAAErH;IACb,CAAC;EACH,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACAzC,cAAc,CAAC,MAAM;IACnBiC,MAAM,CAACU,OAAO,CAACoH,KAAK,CAACxE,KAAK,CAAChB,UAAU,GAAGY,WAAW,CAAC4E,KAAK,CAACxE,KAAK,CAAChB,UAAU;IAC1EtC,MAAM,CAACU,OAAO,CAACoH,KAAK,CAACxE,KAAK,CAACyE,QAAQ,GAAG7E,WAAW,CAAC4E,KAAK,CAACxE,KAAK,CAACyE,QAAQ;IACtE/H,MAAM,CAACU,OAAO,CAACoH,KAAK,CAACxE,KAAK,CAACE,cAAc,GAAGN,WAAW,CAAC4E,KAAK,CAACxE,KAAK,CAACE,cAAc;EACpF,CAAC,CAAC;EACF3F,cAAc,CAACqF,WAAW,CAAC4E,KAAK,EAAEvI,QAAQ,EAAE,CAACyI,CAAC,EAAE1E,KAAK,KAAK;IACxD,IAAIA,KAAK,CAAChB,UAAU,KAAKtC,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAAChB,UAAU,EAAE;MACxDtC,MAAM,CAACU,OAAO,CAACuH,QAAQ,CAACC,SAAS,IAAI1K,QAAQ,CAAC,CAAC,CAAC,EAAE0K,SAAS,EAAE;QAC3D5F,UAAU,EAAEgB,KAAK,CAAChB;MACpB,CAAC,CAAC,CAAC;IACL;IACA,IAAIgB,KAAK,CAACyE,QAAQ,KAAK/H,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAACyE,QAAQ,EAAE;MACpD/H,MAAM,CAACU,OAAO,CAACuH,QAAQ,CAACC,SAAS,IAAI1K,QAAQ,CAAC,CAAC,CAAC,EAAE0K,SAAS,EAAE;QAC3DH,QAAQ,EAAEzE,KAAK,CAACyE;MAClB,CAAC,CAAC,CAAC;IACL;IACA,IAAIzE,KAAK,CAACE,cAAc,KAAKxD,MAAM,CAACU,OAAO,CAAC4C,KAAK,CAACE,cAAc,EAAE;MAChExD,MAAM,CAACU,OAAO,CAACuH,QAAQ,CAACC,SAAS,IAAI1K,QAAQ,CAAC,CAAC,CAAC,EAAE0K,SAAS,EAAE;QAC3D1E,cAAc,EAAEF,KAAK,CAACE;MACxB,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC;EACFxD,MAAM,CAACU,OAAO,CAACyH,QAAQ,CAAC,SAAS,EAAE;IACjCjF;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}