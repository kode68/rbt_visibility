{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { isObjectEmpty } from '@mui/x-internals/isObjectEmpty';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowMaximumTreeDepthSelector, gridRowGroupsToFetchSelector, gridRowNodeSelector, gridDataRowsSelector } from \"./gridRowsSelector.js\";\nimport { gridRowIdSelector } from \"../../core/gridPropsSelectors.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutogeneratedRowNode, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel, computeRowsUpdates } from \"./gridRowsUtils.js\";\nimport { useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.dataSource;\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = gridRowNodeSelector(apiRef, id);\n    if (node && isAutogeneratedRowNode(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowId = React.useCallback(row => gridRowIdSelector(apiRef, row), [apiRef]);\n  const throttledRowsChange = React.useCallback(_ref => {\n    let {\n      cache,\n      throttle\n    } = _ref;\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef),\n          previousGroupsToFetch: gridRowGroupsToFetchSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotRows(rows, false);\n      return;\n    }\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotRows(updates);\n      return;\n    }\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateNestedRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => {\n    const {\n      rowIdToIndexMap\n    } = getVisibleRows(apiRef);\n    return rowIdToIndexMap.get(id);\n  }, [apiRef]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = gridRowNodeSelector(apiRef, id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => gridRowNodeSelector(apiRef, id) ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(_ref2 => {\n    let {\n      skipAutoGeneratedRows = true,\n      groupId,\n      applySorting,\n      applyFiltering,\n      directChildrenOnly = false\n    } = _ref2;\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && (directChildrenOnly ? tree[sortedRowIds[index]].depth === groupNode.depth + 1 : tree[sortedRowIds[index]].depth > groupNode.depth); index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows, directChildrenOnly);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = isObjectEmpty(filteredRowsLookup) ? children : children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = gridRowNodeSelector(apiRef, rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(apiRef)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading: props.loading,\n        totalRowCount: Math.max(props.rowCount || 0, rootGroupChildren.length),\n        dataRowIdToModelLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId, props.loading, props.rowCount]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateNestedRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const previousDataSource = useLazyRef(() => props.dataSource);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (props.dataSource && props.dataSource !== previousDataSource.current) {\n      previousDataSource.current = props.dataSource;\n      return;\n    }\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows, previousDataSource, props.dataSource]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy(GridStrategyGroup.RowTree) !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridEvent(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(apiRef),\n        treeDepths: gridRowTreeDepthsSelector(apiRef),\n        dataRowIds: gridDataRowIdsSelector(apiRef),\n        dataRowIdToModelLookup: gridRowsLookupSelector(apiRef)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  useGridApiMethod(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const currentRows = props.dataSource ? gridDataRowsSelector(apiRef) : props.rows;\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === currentRows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${currentRows?.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: currentRows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, props.dataSource, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useLazyRef","isObjectEmpty","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowGroupingNameSelector","gridRowTreeDepthsSelector","gridDataRowIdsSelector","gridRowMaximumTreeDepthSelector","gridRowGroupsToFetchSelector","gridRowNodeSelector","gridDataRowsSelector","gridRowIdSelector","useTimeout","GridSignature","useGridEvent","getVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","isAutogeneratedRowNode","GRID_ROOT_GROUP_ID","GRID_ID_AUTOGENERATED","updateCacheWithNewRows","getTopLevelRowCount","getRowIdFromRowModel","computeRowsUpdates","useGridRegisterPipeApplier","GridStrategyGroup","gridPivotActiveSelector","rowsStateInitializer","state","props","apiRef","isDataSourceAvailable","dataSource","current","caches","rows","getRowId","loading","rowCount","rowCountProp","loadingProp","previousTree","previousTreeDepths","useGridRows","process","env","NODE_ENV","Object","freeze","error","logger","lastUpdateMs","useRef","Date","now","lastRowCount","timeout","getRow","useCallback","id","model","node","row","throttledRowsChange","_ref","cache","throttle","run","setState","previousGroupsToFetch","publishEvent","clear","throttleRemainingTimeMs","throttleRowsMs","start","setRows","debug","length","updateNonPivotRows","prevCache","rowsBeforePartialUpdates","updateRows","updates","signature","DataGrid","Error","join","nonPinnedRowsUpdates","previousCache","updateNestedRows","groupKeys","setLoading","loadingPropBeforePartialUpdates","getRowModels","dataRows","idRowsLookup","Map","map","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","rowIdToIndexMap","get","setRowChildrenExpansion","isExpanded","currentNode","type","newNode","childrenExpanded","tree","getRowNode","getRowGroupChildren","_ref2","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","directChildrenOnly","children","groupNode","sortedRowIds","startIndex","findIndex","index","depth","push","filteredRowsLookup","filter","childId","setRowIndex","rowId","targetIndex","parent","group","allRows","oldIndex","updatedRows","splice","replaceRows","firstRowToRender","newRows","treeDepth","dataRowIdToModelLookup","rootGroup","rootGroupChildren","seenIds","Set","i","rowModel","removedRowId","has","rowTreeNodeConfig","groupingKey","add","dataRowIds","totalRowCount","Math","max","rowApi","unstable_replaceRows","rowProApi","rowProPrivateApi","groupRows","info","previousDataSource","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","getActiveStrategy","RowTree","applyHydrateRowsProcessor","response","unstable_applyPipeProcessors","treeDepths","totalTopLevelRowCount","isFirstRender","useEffect","isRowCountPropUpdated","currentRows","areNewRowsAlreadyInState","isNewLoadingAlreadyInState","isNewRowCountAlreadyInState","rowCountPropBeforePartialUpdates"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/rows/useGridRows.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { isObjectEmpty } from '@mui/x-internals/isObjectEmpty';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridDataRowIdsSelector, gridRowMaximumTreeDepthSelector, gridRowGroupsToFetchSelector, gridRowNodeSelector, gridDataRowsSelector } from \"./gridRowsSelector.js\";\nimport { gridRowIdSelector } from \"../../core/gridPropsSelectors.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { gridSortedRowIdsSelector } from \"../sorting/gridSortingSelector.js\";\nimport { gridFilteredRowsLookupSelector } from \"../filter/gridFilterSelector.js\";\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, isAutogeneratedRowNode, GRID_ROOT_GROUP_ID, GRID_ID_AUTOGENERATED, updateCacheWithNewRows, getTopLevelRowCount, getRowIdFromRowModel, computeRowsUpdates } from \"./gridRowsUtils.js\";\nimport { useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  const isDataSourceAvailable = !!props.dataSource;\n  apiRef.current.caches.rows = createRowsInternalCache({\n    rows: isDataSourceAvailable ? [] : props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading,\n    rowCount: props.rowCount\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      rowCountProp: props.rowCount,\n      loadingProp: isDataSourceAvailable ? true : props.loading,\n      previousTree: null,\n      previousTreeDepths: null\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    try {\n      // Freeze the `rows` prop so developers have a fast failure if they try to use Array.prototype.push().\n      Object.freeze(props.rows);\n    } catch (error) {\n      // Sometimes, it's impossible to freeze, so we give up on it.\n    }\n  }\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const lastUpdateMs = React.useRef(Date.now());\n  const lastRowCount = React.useRef(props.rowCount);\n  const timeout = useTimeout();\n  const getRow = React.useCallback(id => {\n    const model = gridRowsLookupSelector(apiRef)[id];\n    if (model) {\n      return model;\n    }\n    const node = gridRowNodeSelector(apiRef, id);\n    if (node && isAutogeneratedRowNode(node)) {\n      return {\n        [GRID_ID_AUTOGENERATED]: id\n      };\n    }\n    return null;\n  }, [apiRef]);\n  const getRowId = React.useCallback(row => gridRowIdSelector(apiRef, row), [apiRef]);\n  const throttledRowsChange = React.useCallback(({\n    cache,\n    throttle\n  }) => {\n    const run = () => {\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading,\n          previousTree: gridRowTreeSelector(apiRef),\n          previousTreeDepths: gridRowTreeDepthsSelector(apiRef),\n          previousGroupsToFetch: gridRowGroupsToFetchSelector(apiRef)\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n    };\n    timeout.clear();\n    apiRef.current.caches.rows = cache;\n    if (!throttle) {\n      run();\n      return;\n    }\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n    if (throttleRemainingTimeMs > 0) {\n      timeout.start(throttleRemainingTimeMs, run);\n      return;\n    }\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout]);\n\n  /**\n   * API METHODS\n   */\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotRows(rows, false);\n      return;\n    }\n    const cache = createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading,\n      rowCount: props.rowCount\n    });\n    const prevCache = apiRef.current.caches.rows;\n    cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      throw new Error(['MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotRows(updates);\n      return;\n    }\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows\n    });\n    throttledRowsChange({\n      cache,\n      throttle: true\n    });\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const updateNestedRows = React.useCallback((updates, groupKeys) => {\n    const nonPinnedRowsUpdates = computeRowsUpdates(apiRef, updates, props.getRowId);\n    const cache = updateCacheWithNewRows({\n      updates: nonPinnedRowsUpdates,\n      getRowId: props.getRowId,\n      previousCache: apiRef.current.caches.rows,\n      groupKeys: groupKeys ?? []\n    });\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [props.getRowId, throttledRowsChange, apiRef]);\n  const setLoading = React.useCallback(loading => {\n    logger.debug(`Setting loading to ${loading}`);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading\n      })\n    }));\n    apiRef.current.caches.rows.loadingPropBeforePartialUpdates = loading;\n  }, [apiRef, logger]);\n  const getRowModels = React.useCallback(() => {\n    const dataRows = gridDataRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(dataRows.map(id => [id, idRowsLookup[id] ?? {}]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => {\n    const {\n      rowIdToIndexMap\n    } = getVisibleRows(apiRef);\n    return rowIdToIndexMap.get(id);\n  }, [apiRef]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = gridRowNodeSelector(apiRef, id);\n    if (!currentNode) {\n      throw new Error(`MUI X: No row with id #${id} found.`);\n    }\n    if (currentNode.type !== 'group') {\n      throw new Error('MUI X: Only group nodes can be expanded or collapsed.');\n    }\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => gridRowNodeSelector(apiRef, id) ?? null, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering,\n    directChildrenOnly = false\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n    if (applySorting) {\n      const groupNode = tree[groupId];\n      if (!groupNode) {\n        return [];\n      }\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n      for (let index = startIndex; index < sortedRowIds.length && (directChildrenOnly ? tree[sortedRowIds[index]].depth === groupNode.depth + 1 : tree[sortedRowIds[index]].depth > groupNode.depth); index += 1) {\n        const id = sortedRowIds[index];\n        if (!skipAutoGeneratedRows || !isAutogeneratedRowNode(tree[id])) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows, directChildrenOnly);\n    }\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = isObjectEmpty(filteredRowsLookup) ? children : children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const node = gridRowNodeSelector(apiRef, rowId);\n    if (!node) {\n      throw new Error(`MUI X: No row with id #${rowId} found.`);\n    }\n    if (node.parent !== GRID_ROOT_GROUP_ID) {\n      throw new Error(`MUI X: The row reordering do not support reordering of grouped rows yet.`);\n    }\n    if (node.type !== 'leaf') {\n      throw new Error(`MUI X: The row reordering do not support reordering of footer or grouping rows.`);\n    }\n    apiRef.current.setState(state => {\n      const group = gridRowTreeSelector(apiRef)[GRID_ROOT_GROUP_ID];\n      const allRows = group.children;\n      const oldIndex = allRows.findIndex(row => row === rowId);\n      if (oldIndex === -1 || oldIndex === targetIndex) {\n        return state;\n      }\n      logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n      const updatedRows = [...allRows];\n      updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [GRID_ROOT_GROUP_ID]: _extends({}, group, {\n              children: updatedRows\n            })\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, logger]);\n  const replaceRows = React.useCallback((firstRowToRender, newRows) => {\n    if (props.signature === GridSignature.DataGrid && newRows.length > 1) {\n      throw new Error(['MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature.'].join('\\n'));\n    }\n    if (newRows.length === 0) {\n      return;\n    }\n    const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);\n    if (treeDepth > 1) {\n      throw new Error('`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping');\n    }\n    const tree = _extends({}, gridRowTreeSelector(apiRef));\n    const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));\n    const rootGroup = tree[GRID_ROOT_GROUP_ID];\n    const rootGroupChildren = [...rootGroup.children];\n    const seenIds = new Set();\n    for (let i = 0; i < newRows.length; i += 1) {\n      const rowModel = newRows[i];\n      const rowId = getRowIdFromRowModel(rowModel, props.getRowId, 'A row was provided without id when calling replaceRows().');\n      const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);\n      if (!seenIds.has(removedRowId)) {\n        delete dataRowIdToModelLookup[removedRowId];\n        delete tree[removedRowId];\n      }\n      const rowTreeNodeConfig = {\n        id: rowId,\n        depth: 0,\n        parent: GRID_ROOT_GROUP_ID,\n        type: 'leaf',\n        groupingKey: null\n      };\n      dataRowIdToModelLookup[rowId] = rowModel;\n      tree[rowId] = rowTreeNodeConfig;\n      seenIds.add(rowId);\n    }\n    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {\n      children: rootGroupChildren\n    });\n\n    // Removes potential remaining skeleton rows from the dataRowIds.\n    const dataRowIds = rootGroupChildren.filter(childId => tree[childId]?.type === 'leaf');\n    apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        loading: props.loading,\n        totalRowCount: Math.max(props.rowCount || 0, rootGroupChildren.length),\n        dataRowIdToModelLookup,\n        dataRowIds,\n        tree\n      })\n    }));\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.signature, props.getRowId, props.loading, props.rowCount]);\n  const rowApi = {\n    getRow,\n    setLoading,\n    getRowId,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    updateRows,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    unstable_replaceRows: replaceRows\n  };\n  const rowProApi = {\n    setRowIndex,\n    setRowChildrenExpansion,\n    getRowGroupChildren\n  };\n  const rowProPrivateApi = {\n    updateNestedRows\n  };\n\n  /**\n   * EVENTS\n   */\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n    if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = _extends({}, apiRef.current.caches.rows, {\n        updates: {\n          type: 'full',\n          rows: gridDataRowIdsSelector(apiRef)\n        }\n      });\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      });\n    }\n    throttledRowsChange({\n      cache,\n      throttle: false\n    });\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);\n  const previousDataSource = useLazyRef(() => props.dataSource);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (props.dataSource && props.dataSource !== previousDataSource.current) {\n      previousDataSource.current = props.dataSource;\n      return;\n    }\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows, previousDataSource, props.dataSource]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.getActiveStrategy(GridStrategyGroup.RowTree) !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridEvent(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n\n  /**\n   * APPLIERS\n   */\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const response = apiRef.current.unstable_applyPipeProcessors('hydrateRows', {\n        tree: gridRowTreeSelector(apiRef),\n        treeDepths: gridRowTreeDepthsSelector(apiRef),\n        dataRowIds: gridDataRowIdsSelector(apiRef),\n        dataRowIdToModelLookup: gridRowsLookupSelector(apiRef)\n      });\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, response, {\n          totalTopLevelRowCount: getTopLevelRowCount({\n            tree: response.tree,\n            rowCountProp: props.rowCount\n          })\n        })\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n  }, [apiRef, props.rowCount]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'public');\n  useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n  useGridApiMethod(apiRef, rowProPrivateApi, 'private');\n\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    let isRowCountPropUpdated = false;\n    if (props.rowCount !== lastRowCount.current) {\n      isRowCountPropUpdated = true;\n      lastRowCount.current = props.rowCount;\n    }\n    const currentRows = props.dataSource ? gridDataRowsSelector(apiRef) : props.rows;\n    const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === currentRows;\n    const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;\n    const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;\n\n    // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n    if (areNewRowsAlreadyInState) {\n      // If the loading prop has changed, we need to update its value in the state because it won't be done by `throttledRowsChange`\n      if (!isNewLoadingAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            loading: props.loading\n          })\n        }));\n        apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;\n      }\n      if (!isNewRowCountAlreadyInState) {\n        apiRef.current.setState(state => _extends({}, state, {\n          rows: _extends({}, state.rows, {\n            totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),\n            totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)\n          })\n        }));\n        apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;\n      }\n      if (!isRowCountPropUpdated) {\n        return;\n      }\n    }\n    logger.debug(`Updating all rows, new length ${currentRows?.length}`);\n    throttledRowsChange({\n      cache: createRowsInternalCache({\n        rows: currentRows,\n        getRowId: props.getRowId,\n        loading: props.loading,\n        rowCount: props.rowCount\n      }),\n      throttle: false\n    });\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, props.dataSource, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}