{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { lruMemoize } from '@mui/x-internals/lruMemoize';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useLazyRef } from \"../../utils/useLazyRef.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnLookupSelector } from \"../columns/gridColumnsSelector.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/gridPreferencePanelsValue.js\";\nimport { defaultGridFilterLookup, getDefaultGridFilterModel } from \"./gridFilterState.js\";\nimport { gridFilterModelSelector } from \"./gridFilterSelector.js\";\nimport { useFirstRender } from \"../../utils/useFirstRender.js\";\nimport { gridRowsLookupSelector } from \"../rows/index.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from \"../../core/strategyProcessing/index.js\";\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic, shouldQuickFilterExcludeHiddenColumns } from \"./gridFilterUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  var _ref, _props$filterModel, _props$initialState;\n  const filterModel = (_ref = (_props$filterModel = props.filterModel) !== null && _props$filterModel !== void 0 ? _props$filterModel : (_props$initialState = props.initialState) === null || _props$initialState === void 0 || (_props$initialState = _props$initialState.filter) === null || _props$initialState === void 0 ? void 0 : _props$initialState.filterModel) !== null && _ref !== void 0 ? _ref : getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: _extends({\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef)\n    }, defaultGridFilterLookup),\n    visibleRowsLookup: {}\n  });\n};\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\nfunction createMemoizedValues() {\n  return lruMemoize(Object.values);\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  var _props$initialState3, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterState = apiRef.current.getFilterState(filterModel);\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filterState)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        var _column$filterOperato;\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = (_column$filterOperato = column.filterOperators) === null || _column$filterOperato === void 0 ? void 0 : _column$filterOperato.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof (filterOperator === null || filterOperator === void 0 ? void 0 : filterOperator.requiresFilterValue) === 'undefined' ? true : filterOperator === null || filterOperator === void 0 ? void 0 : filterOperator.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = sanitizeFilterModel(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel !== null && filterModel !== void 0 ? filterModel : getDefaultGridFilterModel()\n    });\n    return _extends({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: updateFilteredRows,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    // Remove the additional `fromInput` property from the filter model\n    filterModelToExport.items.forEach(item => {\n      delete item.fromInput;\n    });\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    ((_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 || (_props$initialState2 = _props$initialState2.filter) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.filterModel) != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) === null || _props$initialState3 === void 0 || (_props$initialState3 = _props$initialState3.filter) === null || _props$initialState3 === void 0 ? void 0 : _props$initialState3.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n    const filterModel = (_context$stateToResto = context.stateToRestore.filter) === null || _context$stateToResto === void 0 ? void 0 : _context$stateToResto.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      var _props$slotProps;\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) === null || _props$slotProps === void 0 ? void 0 : _props$slotProps.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) === null || _props$slotProps2 === void 0 ? void 0 : _props$slotProps2.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = useLazyRef(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    var _params$filterModel$q;\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters || !params.filterModel.items.length && !((_params$filterModel$q = params.filterModel.quickFilterValues) !== null && _params$filterModel$q !== void 0 && _params$filterModel$q.length)) {\n      return defaultGridFilterLookup;\n    }\n    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      if (!isRowPassing) {\n        filteredRowsLookup[id] = isRowPassing;\n      }\n    }\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n    return {\n      filteredRowsLookup,\n      filteredChildrenCountLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n  }, [apiRef]);\n  useGridEvent(apiRef, 'rowsSet', updateFilteredRows);\n  useGridEvent(apiRef, 'columnsChange', handleColumnsChange);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridEvent(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  useGridEvent(apiRef, 'columnVisibilityModelChange', () => {\n    var _filterModel$quickFil;\n    const filterModel = gridFilterModelSelector(apiRef);\n    if ((_filterModel$quickFil = filterModel.quickFilterValues) !== null && _filterModel$quickFil !== void 0 && _filterModel$quickFil.length && shouldQuickFilterExcludeHiddenColumns(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      updateFilteredRows();\n    }\n  });\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    updateFilteredRows();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};","map":{"version":3,"names":["_extends","React","lruMemoize","useEnhancedEffect","isDeepEqual","useLazyRef","useGridEvent","useGridApiMethod","useGridLogger","gridColumnLookupSelector","GridPreferencePanelsValue","defaultGridFilterLookup","getDefaultGridFilterModel","gridFilterModelSelector","useFirstRender","gridRowsLookupSelector","useGridRegisterPipeProcessor","GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","buildAggregatedFilterApplier","sanitizeFilterModel","mergeStateWithFilterModel","cleanFilterItem","passFilterLogic","shouldQuickFilterExcludeHiddenColumns","jsx","_jsx","filterStateInitializer","state","props","apiRef","_ref","_props$filterModel","_props$initialState","filterModel","initialState","filter","disableMultipleColumnsFiltering","visibleRowsLookup","getVisibleRowsLookup","params","filteredRowsLookup","getVisibleRowsLookupState","current","applyStrategyProcessor","tree","rows","createMemoizedValues","Object","values","useGridFilter","_props$initialState3","_props$slotProps2","logger","registerControlState","stateId","propModel","propOnChange","onFilterModelChange","stateSelector","changeEvent","updateFilteredRows","useCallback","setState","filterState","getFilterState","newState","visibleRowsLookupState","publishEvent","addColumnMenuItem","columnMenuItems","colDef","filterable","disableColumnFilter","upsertFilterItem","item","items","itemIndex","findIndex","filterItem","id","push","setFilterModel","upsertFilterItems","existingItems","forEach","deleteFilterItem","itemToDelete","length","showFilterPanel","targetColumnField","panelId","labelId","debug","filterItemsWithValue","_column$filterOperato","value","undefined","Array","isArray","column","getColumn","field","filterOperator","filterOperators","find","operator","requiresFilterValue","newFilterItems","filterItemOnTarget","targetColumn","showPreferences","filters","hideFilterPanel","hidePreferences","setFilterLogicOperator","logicOperator","setQuickFilterValues","quickFilterValues","model","reason","currentModel","updateControlState","unstable_applyFilters","inputFilterModel","isRowMatchingFilters","filterMode","disableEval","filterResult","filterApi","ignoreDiacritics","stateExportPreProcessing","prevState","context","_props$initialState2","filterModelToExport","fromInput","shouldExportFilterModel","exportOnlyDirtyModels","stateRestorePreProcessing","_context$stateToResto","stateToRestore","callbacks","preferencePanelPreProcessing","initialValue","_props$slotProps","FilterPanel","slots","filterPanel","slotProps","getRowId","getRowsRef","flatFilteringMethod","_params$filterModel$q","dataRowIdToModelLookup","filterCache","result","passingFilterItems","passingQuickFilterValues","i","row","isRowPassing","footerId","footer","filteredChildrenCountLookup","filteredDescendantCountLookup","handleColumnsChange","columnsLookup","handleStrategyProcessorChange","methodName","updateVisibleRowsLookupState","_filterModel$quickFil"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/filter/useGridFilter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { lruMemoize } from '@mui/x-internals/lruMemoize';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useLazyRef } from \"../../utils/useLazyRef.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnLookupSelector } from \"../columns/gridColumnsSelector.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/gridPreferencePanelsValue.js\";\nimport { defaultGridFilterLookup, getDefaultGridFilterModel } from \"./gridFilterState.js\";\nimport { gridFilterModelSelector } from \"./gridFilterSelector.js\";\nimport { useFirstRender } from \"../../utils/useFirstRender.js\";\nimport { gridRowsLookupSelector } from \"../rows/index.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from \"../../core/strategyProcessing/index.js\";\nimport { buildAggregatedFilterApplier, sanitizeFilterModel, mergeStateWithFilterModel, cleanFilterItem, passFilterLogic, shouldQuickFilterExcludeHiddenColumns } from \"./gridFilterUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const filterStateInitializer = (state, props, apiRef) => {\n  const filterModel = props.filterModel ?? props.initialState?.filter?.filterModel ?? getDefaultGridFilterModel();\n  return _extends({}, state, {\n    filter: _extends({\n      filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef)\n    }, defaultGridFilterLookup),\n    visibleRowsLookup: {}\n  });\n};\nconst getVisibleRowsLookup = params => {\n  // For flat tree, the `visibleRowsLookup` and the `filteredRowsLookup` are equals since no row is collapsed.\n  return params.filteredRowsLookup;\n};\nfunction getVisibleRowsLookupState(apiRef, state) {\n  return apiRef.current.applyStrategyProcessor('visibleRowsLookupCreation', {\n    tree: state.rows.tree,\n    filteredRowsLookup: state.filter.filteredRowsLookup\n  });\n}\nfunction createMemoizedValues() {\n  return lruMemoize(Object.values);\n}\n\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport const useGridFilter = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridFilter');\n  apiRef.current.registerControlState({\n    stateId: 'filter',\n    propModel: props.filterModel,\n    propOnChange: props.onFilterModelChange,\n    stateSelector: gridFilterModelSelector,\n    changeEvent: 'filterModelChange'\n  });\n  const updateFilteredRows = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterState = apiRef.current.getFilterState(filterModel);\n      const newState = _extends({}, state, {\n        filter: _extends({}, state.filter, filterState)\n      });\n      const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);\n      return _extends({}, newState, {\n        visibleRowsLookup: visibleRowsLookupState\n      });\n    });\n    apiRef.current.publishEvent('filteredRowsSet');\n  }, [apiRef]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuFilterItem'];\n  }, [props.disableColumnFilter]);\n\n  /**\n   * API METHODS\n   */\n  const upsertFilterItem = React.useCallback(item => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = [...filterModel.items];\n    const itemIndex = items.findIndex(filterItem => filterItem.id === item.id);\n    if (itemIndex === -1) {\n      items.push(item);\n    } else {\n      items[itemIndex] = item;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'upsertFilterItem');\n  }, [apiRef]);\n  const upsertFilterItems = React.useCallback(items => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const existingItems = [...filterModel.items];\n    items.forEach(item => {\n      const itemIndex = existingItems.findIndex(filterItem => filterItem.id === item.id);\n      if (itemIndex === -1) {\n        existingItems.push(item);\n      } else {\n        existingItems[itemIndex] = item;\n      }\n    });\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items: existingItems\n    }), 'upsertFilterItems');\n  }, [apiRef]);\n  const deleteFilterItem = React.useCallback(itemToDelete => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const items = filterModel.items.filter(item => item.id !== itemToDelete.id);\n    if (items.length === filterModel.items.length) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      items\n    }), 'deleteFilterItem');\n  }, [apiRef]);\n  const showFilterPanel = React.useCallback((targetColumnField, panelId, labelId) => {\n    logger.debug('Displaying filter panel');\n    if (targetColumnField) {\n      const filterModel = gridFilterModelSelector(apiRef);\n      const filterItemsWithValue = filterModel.items.filter(item => {\n        if (item.value !== undefined) {\n          // Some filters like `isAnyOf` support array as `item.value`.\n          // If array is empty, we want to remove it from the filter model.\n          if (Array.isArray(item.value) && item.value.length === 0) {\n            return false;\n          }\n          return true;\n        }\n        const column = apiRef.current.getColumn(item.field);\n        const filterOperator = column.filterOperators?.find(operator => operator.value === item.operator);\n        const requiresFilterValue = typeof filterOperator?.requiresFilterValue === 'undefined' ? true : filterOperator?.requiresFilterValue;\n\n        // Operators like `isEmpty` don't have and don't require `item.value`.\n        // So we don't want to remove them from the filter model if `item.value === undefined`.\n        // See https://github.com/mui/mui-x/issues/5402\n        if (requiresFilterValue) {\n          return false;\n        }\n        return true;\n      });\n      let newFilterItems;\n      const filterItemOnTarget = filterItemsWithValue.find(item => item.field === targetColumnField);\n      const targetColumn = apiRef.current.getColumn(targetColumnField);\n      if (filterItemOnTarget) {\n        newFilterItems = filterItemsWithValue;\n      } else if (props.disableMultipleColumnsFiltering) {\n        newFilterItems = [cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      } else {\n        newFilterItems = [...filterItemsWithValue, cleanFilterItem({\n          field: targetColumnField,\n          operator: targetColumn.filterOperators[0].value\n        }, apiRef)];\n      }\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n    apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const hideFilterPanel = React.useCallback(() => {\n    logger.debug('Hiding filter panel');\n    apiRef.current.hidePreferences();\n  }, [apiRef, logger]);\n  const setFilterLogicOperator = React.useCallback(logicOperator => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.logicOperator === logicOperator) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      logicOperator\n    }), 'changeLogicOperator');\n  }, [apiRef]);\n  const setQuickFilterValues = React.useCallback(values => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (isDeepEqual(filterModel.quickFilterValues, values)) {\n      return;\n    }\n    apiRef.current.setFilterModel(_extends({}, filterModel, {\n      quickFilterValues: [...values]\n    }));\n  }, [apiRef]);\n  const setFilterModel = React.useCallback((model, reason) => {\n    const currentModel = gridFilterModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug('Setting filter model');\n      apiRef.current.updateControlState('filter', mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsFiltering]);\n  const getFilterState = React.useCallback(inputFilterModel => {\n    const filterModel = sanitizeFilterModel(inputFilterModel, props.disableMultipleColumnsFiltering, apiRef);\n    const isRowMatchingFilters = props.filterMode === 'client' ? buildAggregatedFilterApplier(filterModel, apiRef, props.disableEval) : null;\n    const filterResult = apiRef.current.applyStrategyProcessor('filtering', {\n      isRowMatchingFilters,\n      filterModel: filterModel ?? getDefaultGridFilterModel()\n    });\n    return _extends({}, filterResult, {\n      filterModel\n    });\n  }, [props.disableMultipleColumnsFiltering, props.filterMode, props.disableEval, apiRef]);\n  const filterApi = {\n    setFilterLogicOperator,\n    unstable_applyFilters: updateFilteredRows,\n    deleteFilterItem,\n    upsertFilterItem,\n    upsertFilterItems,\n    setFilterModel,\n    showFilterPanel,\n    hideFilterPanel,\n    setQuickFilterValues,\n    ignoreDiacritics: props.ignoreDiacritics,\n    getFilterState\n  };\n  useGridApiMethod(apiRef, filterApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const filterModelToExport = gridFilterModelSelector(apiRef);\n\n    // Remove the additional `fromInput` property from the filter model\n    filterModelToExport.items.forEach(item => {\n      delete item.fromInput;\n    });\n    const shouldExportFilterModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.filterModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.filter?.filterModel != null ||\n    // Export if the model is not equal to the default value\n    !isDeepEqual(filterModelToExport, getDefaultGridFilterModel());\n    if (!shouldExportFilterModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      filter: {\n        filterModel: filterModelToExport\n      }\n    });\n  }, [apiRef, props.filterModel, props.initialState?.filter?.filterModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const filterModel = context.stateToRestore.filter?.filterModel;\n    if (filterModel == null) {\n      return params;\n    }\n    apiRef.current.updateControlState('filter', mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), 'restoreState');\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]\n    });\n  }, [apiRef, props.disableMultipleColumnsFiltering]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.filters) {\n      const FilterPanel = props.slots.filterPanel;\n      return /*#__PURE__*/_jsx(FilterPanel, _extends({}, props.slotProps?.filterPanel));\n    }\n    return initialValue;\n  }, [props.slots.filterPanel, props.slotProps?.filterPanel]);\n  const {\n    getRowId\n  } = props;\n  const getRowsRef = useLazyRef(createMemoizedValues);\n  const flatFilteringMethod = React.useCallback(params => {\n    if (props.filterMode !== 'client' || !params.isRowMatchingFilters || !params.filterModel.items.length && !params.filterModel.quickFilterValues?.length) {\n      return defaultGridFilterLookup;\n    }\n    const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);\n    const filteredRowsLookup = {};\n    const {\n      isRowMatchingFilters\n    } = params;\n    const filterCache = {};\n    const result = {\n      passingFilterItems: null,\n      passingQuickFilterValues: null\n    };\n    const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);\n    for (let i = 0; i < rows.length; i += 1) {\n      const row = rows[i];\n      const id = getRowId ? getRowId(row) : row.id;\n      isRowMatchingFilters(row, undefined, result);\n      const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);\n      if (!isRowPassing) {\n        filteredRowsLookup[id] = isRowPassing;\n      }\n    }\n    const footerId = 'auto-generated-group-footer-root';\n    const footer = dataRowIdToModelLookup[footerId];\n    if (footer) {\n      filteredRowsLookup[footerId] = true;\n    }\n    return {\n      filteredRowsLookup,\n      filteredChildrenCountLookup: {},\n      filteredDescendantCountLookup: {}\n    };\n  }, [apiRef, props.filterMode, getRowId, getRowsRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'filtering', flatFilteringMethod);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'visibleRowsLookupCreation', getVisibleRowsLookup);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnsChange = React.useCallback(() => {\n    logger.debug('onColUpdated - GridColumns changed, applying filters');\n    const filterModel = gridFilterModelSelector(apiRef);\n    const columnsLookup = gridColumnLookupSelector(apiRef);\n    const newFilterItems = filterModel.items.filter(item => item.field && columnsLookup[item.field]);\n    if (newFilterItems.length < filterModel.items.length) {\n      apiRef.current.setFilterModel(_extends({}, filterModel, {\n        items: newFilterItems\n      }));\n    }\n  }, [apiRef, logger]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'filtering') {\n      apiRef.current.unstable_applyFilters();\n    }\n  }, [apiRef]);\n  const updateVisibleRowsLookupState = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)\n      });\n    });\n  }, [apiRef]);\n  useGridEvent(apiRef, 'rowsSet', updateFilteredRows);\n  useGridEvent(apiRef, 'columnsChange', handleColumnsChange);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridEvent(apiRef, 'rowExpansionChange', updateVisibleRowsLookupState);\n  useGridEvent(apiRef, 'columnVisibilityModelChange', () => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    if (filterModel.quickFilterValues?.length && shouldQuickFilterExcludeHiddenColumns(filterModel)) {\n      // re-apply filters because the quick filter results may have changed\n      updateFilteredRows();\n    }\n  });\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    updateFilteredRows();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.filterModel !== undefined) {\n      apiRef.current.setFilterModel(props.filterModel);\n    }\n  }, [apiRef, logger, props.filterModel]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}