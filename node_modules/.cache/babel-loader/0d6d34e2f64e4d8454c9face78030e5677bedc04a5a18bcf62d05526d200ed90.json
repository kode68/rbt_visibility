{"ast":null,"code":"'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useGridEvent, useGridEventPriority } from \"../../utils/useGridEvent.js\";\nimport { GridEditModes, GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from \"../../../models/params/gridEditCellParams.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => function () {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...arguments);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI X: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(\"MUI X: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async function () {\n    if (callback) {\n      var _editRowsState$id$fie;\n      const {\n        id,\n        field\n      } = arguments.length <= 0 ? undefined : arguments[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = (_editRowsState$id$fie = editRowsState[id][field]) === null || _editRowsState$id$fie === void 0 ? void 0 : _editRowsState$id$fie.error;\n      if (!hasFieldErrors) {\n        callback(...arguments);\n      }\n    }\n  };\n  useGridEvent(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridEvent(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridEvent(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridEvent(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridEvent(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridEventPriority(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridEventPriority(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = getDefaultCellValue(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n        const editingState = gridEditRowsStateSelector(apiRef);\n        updateOrDeleteFieldState(id, field, _extends({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    var _props$dataSource;\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if ((_props$dataSource = props.dataSource) !== null && _props$dataSource !== void 0 && _props$dataSource.updateRow) {\n      if (isDeepEqual(row, rowUpdate)) {\n        finishCellEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishCellEditMode();\n      } catch (_unused) {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef);\n    return !((_editingState$id = editingState[id]) !== null && _editingState$id !== void 0 && (_editingState$id = _editingState$id[field]) !== null && _editingState$id !== void 0 && _editingState$id.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(_ref => {\n      let [id, fields] = _ref;\n      Object.entries(fields).forEach(_ref2 => {\n        var _copyOfPrevCellModes$;\n        let [field, params] = _ref2;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) === null || _copyOfPrevCellModes$ === void 0 || (_copyOfPrevCellModes$ = _copyOfPrevCellModes$[field]) === null || _copyOfPrevCellModes$ === void 0 ? void 0 : _copyOfPrevCellModes$.mode) || GridCellModes.View;\n        const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","warnOnce","useEventCallback","useEnhancedEffect","isDeepEqual","useGridEvent","useGridEventPriority","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","isPasteShortcut","gridRowsLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","getDefaultCellValue","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","editMode","Cell","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","pasteKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","runIfNoFieldErrors","_editRowsState$id$fie","length","undefined","editRowsState","state","editRows","hasFieldErrors","error","onCellEditStart","onCellEditStop","editingState","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","api","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","updateOrDeleteFieldState","setState","newEditingState","other","updateStateToStartCellEditMode","initialValue","value","getCellValue","newValue","getColumn","column","shouldProcessEditCellProps","preProcessEditCellProps","isProcessingProps","setCellFocus","Promise","resolve","row","getRow","hasChanged","updateStateToStopCellEditMode","_props$dataSource","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","dataSource","updateRow","handleError","updateRowParams","rowId","updatedRow","previousRow","editRow","_unused","errorThrown","process","env","NODE_ENV","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","_editingState$id","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","valueSetter","editingApi","editingPrivateApi","useEffect","rowsLookup","copyOfPrevCellModes","entries","forEach","_ref","fields","_ref2","_copyOfPrevCellModes$","prevMode","originalId","getRowId"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { useGridEvent, useGridEventPriority } from \"../../utils/useGridEvent.js\";\nimport { GridEditModes, GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridRowsLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from \"../../../models/params/gridEditCellParams.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  useGridEvent(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridEvent(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridEvent(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridEvent(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridEvent(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridEventPriority(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridEventPriority(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = getDefaultCellValue(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n        const editingState = gridEditRowsStateSelector(apiRef);\n        updateOrDeleteFieldState(id, field, _extends({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    const row = apiRef.current.getRow(id);\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (props.dataSource?.updateRow) {\n      if (isDeepEqual(row, rowUpdate)) {\n        finishCellEditMode();\n        return;\n      }\n      const handleError = () => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n      };\n      const updateRowParams = {\n        rowId: id,\n        updatedRow: rowUpdate,\n        previousRow: row\n      };\n      try {\n        await apiRef.current.dataSource.editRow(updateRowParams);\n        finishCellEditMode();\n      } catch {\n        handleError();\n      }\n    } else if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/persistence/.'], 'error');\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || GridCellModes.View;\n        const originalId = rowsLookup[id] ? apiRef.current.getRowId(rowsLookup[id]) : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}