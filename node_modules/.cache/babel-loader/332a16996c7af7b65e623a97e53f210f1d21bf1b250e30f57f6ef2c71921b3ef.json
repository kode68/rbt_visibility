{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridContentHeightSelector, gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  var _rootProps$columnGrou, _rootProps$headerFilt, _rootProps$initialSta;\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n\n  /* TODO: extract dimensions code */\n  const contentHeight = useGridSelector(apiRef, gridContentHeightSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor(((_rootProps$columnGrou = rootProps.columnGroupHeaderHeight) !== null && _rootProps$columnGrou !== void 0 ? _rootProps$columnGrou : rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor(((_rootProps$headerFilt = rootProps.headerFilterHeight) !== null && _rootProps$headerFilt !== void 0 ? _rootProps$headerFilt : rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const dimensions = {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    columnsTotalWidth,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  };\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    scrollbarSize: rootProps.scrollbarSize,\n    dimensions,\n    initialState: {\n      scroll: (_rootProps$initialSta = rootProps.initialState) === null || _rootProps$initialSta === void 0 ? void 0 : _rootProps$initialSta.scroll,\n      dimensions: apiRef.current.state.dimensions,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    isRtl,\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowIdToIndexMap: currentPage.rowIdToIndexMap,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    hasColSpan,\n    contentHeight,\n    minimalContentHeight,\n    autoHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? (rowEntry, visibility) => getRowSpacing(_extends({}, rowEntry, visibility, {\n      indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n    })) : undefined, [apiRef, getRowSpacing]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    getColspan: (rowId, column) => {\n      var _column$colSpan2;\n      if (typeof column.colSpan === 'function') {\n        var _column$colSpan;\n        const row = apiRef.current.getRow(rowId);\n        const value = apiRef.current.getRowValue(row, column);\n        return (_column$colSpan = column.colSpan(value, row, column, apiRef)) !== null && _column$colSpan !== void 0 ? _column$colSpan : 0;\n      }\n      return (_column$colSpan2 = column.colSpan) !== null && _column$colSpan2 !== void 0 ? _column$colSpan2 : 0;\n    },\n    renderRow: params => {\n      var _rootProps$slotProps;\n      return /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: params.model,\n        rowId: params.id,\n        index: params.rowIndex,\n        selected: isRowSelected(params.id),\n        offsetLeft: params.offsetLeft,\n        columnsTotalWidth: columnsTotalWidth,\n        rowHeight: params.baseRowHeight,\n        pinnedColumns: pinnedColumns,\n        visibleColumns: params.columns,\n        firstColumnIndex: params.firstColumnIndex,\n        lastColumnIndex: params.lastColumnIndex,\n        focusedColumnIndex: params.focusedColumnIndex,\n        isFirstVisible: params.isFirstVisible,\n        isLastVisible: params.isLastVisible,\n        isNotVisible: params.isVirtualFocusRow,\n        showBottomBorder: params.showBottomBorder,\n        scrollbarWidth: verticalScrollbarWidth,\n        gridHasFiller: hasFiller\n      }, (_rootProps$slotProps = rootProps.slotProps) === null || _rootProps$slotProps === void 0 ? void 0 : _rootProps$slotProps.row), params.id);\n    },\n    renderInfiniteLoadingTrigger: id => {\n      var _apiRef$current$getIn, _apiRef$current;\n      return (_apiRef$current$getIn = (_apiRef$current = apiRef.current).getInfiniteLoadingTriggerElement) === null || _apiRef$current$getIn === void 0 ? void 0 : _apiRef$current$getIn.call(_apiRef$current, {\n        lastRowId: id\n      });\n    }\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = virtualizer.store.state.dimensions;\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.dimensions !== apiRef.current.state.dimensions) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        dimensions: state.dimensions\n      }));\n    }\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}","map":{"version":3,"names":["_extends","React","useEventCallback","useRtl","roundToDecimalPlaces","useStoreEffect","useVirtualizer","useFirstRender","createSelector","useGridSelector","gridContentHeightSelector","gridHasFillerSelector","gridVerticalScrollbarWidthSelector","gridDensityFactorSelector","gridVisibleColumnDefinitionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnPositionsSelector","gridHasColSpanSelector","gridPinnedRowsSelector","gridRowCountSelector","useGridVisibleRows","gridPaginationSelector","gridFocusedVirtualCellSelector","gridRowSelectionManagerSelector","DATA_GRID_PROPS_DEFAULT_VALUES","getValidRowHeight","minimalContentHeight","rowHeightWarning","getTotalHeaderHeight","jsx","_jsx","identity","x","columnsTotalWidthSelector","visibleColumns","positions","colCount","length","computedWidth","useGridVirtualizer","apiRef","rootProps","_rootProps$columnGrou","_rootProps$headerFilt","_rootProps$initialSta","isRtl","listView","pinnedRows","pinnedColumns","rowSelectionManager","isRowSelected","id","has","current","isRowSelectable","currentPage","hasColSpan","contentHeight","verticalScrollbarWidth","hasFiller","autoHeight","scrollReset","density","baseRowHeight","rowHeight","Math","floor","headerHeight","columnHeaderHeight","groupHeaderHeight","columnGroupHeaderHeight","headerFilterHeight","columnsTotalWidth","headersTotalHeight","leftPinnedWidth","left","reduce","w","col","rightPinnedWidth","right","dimensions","dataRowCount","pagination","rowCount","min","enabled","paginationModel","pageSize","getRowHeight","getEstimatedRowHeight","getRowSpacing","focusedVirtualCell","virtualizer","scrollbarSize","initialState","scroll","state","rowSpanning","virtualization","rows","range","rowIdToIndexMap","columns","refs","container","mainElementRef","scroller","virtualScrollerRef","scrollbarVertical","virtualScrollbarVerticalRef","scrollbarHorizontal","virtualScrollbarHorizontalRef","useMemo","undefined","rowEntry","densityFactor","visibility","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","applyRowHeight","entry","row","unstable_applyPipeProcessors","virtualizeColumnsWithAutoRowHeight","rowBufferPx","columnBufferPx","resizeThrottleMs","onResize","size","publishEvent","onWheel","event","onTouchMove","onRenderContextChange","nextRenderContext","onScrollChange","scrollPosition","top","renderContext","getColspan","rowId","column","_column$colSpan2","colSpan","_column$colSpan","getRow","value","getRowValue","renderRow","params","_rootProps$slotProps","slots","model","index","rowIndex","selected","offsetLeft","firstColumnIndex","lastColumnIndex","focusedColumnIndex","isFirstVisible","isLastVisible","isNotVisible","isVirtualFocusRow","showBottomBorder","scrollbarWidth","gridHasFiller","slotProps","renderInfiniteLoadingTrigger","_apiRef$current$getIn","_apiRef$current","getInfiniteLoadingTriggerElement","call","lastRowId","store","rowsMeta","_","setState","gridState","register"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/core/useGridVirtualizer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { roundToDecimalPlaces } from '@mui/x-internals/math';\nimport { useStoreEffect } from '@mui/x-internals/store';\nimport { useVirtualizer } from '@mui/x-virtualizer';\nimport { useFirstRender } from \"../utils/useFirstRender.js\";\nimport { createSelector } from \"../../utils/createSelector.js\";\nimport { useGridSelector } from \"../utils/useGridSelector.js\";\nimport { gridContentHeightSelector, gridHasFillerSelector, gridVerticalScrollbarWidthSelector } from \"../features/dimensions/gridDimensionsSelectors.js\";\nimport { gridDensityFactorSelector } from \"../features/density/index.js\";\nimport { gridVisibleColumnDefinitionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnPositionsSelector, gridHasColSpanSelector } from \"../features/columns/gridColumnsSelector.js\";\nimport { gridPinnedRowsSelector, gridRowCountSelector } from \"../features/rows/gridRowsSelector.js\";\nimport { useGridVisibleRows } from \"../utils/useGridVisibleRows.js\";\nimport { gridPaginationSelector } from \"../features/pagination/index.js\";\nimport { gridFocusedVirtualCellSelector } from \"../features/virtualization/gridFocusedVirtualCellSelector.js\";\nimport { gridRowSelectionManagerSelector } from \"../features/rowSelection/index.js\";\nimport { DATA_GRID_PROPS_DEFAULT_VALUES } from \"../../constants/dataGridPropsDefaultValues.js\";\nimport { getValidRowHeight, minimalContentHeight, rowHeightWarning } from \"../features/rows/gridRowsUtils.js\";\nimport { getTotalHeaderHeight } from \"../features/columns/gridColumnsUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction identity(x) {\n  return x;\n}\nconst columnsTotalWidthSelector = createSelector(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {\n  const colCount = visibleColumns.length;\n  if (colCount === 0) {\n    return 0;\n  }\n  return roundToDecimalPlaces(positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth, 1);\n});\n\n/**\n * Virtualizer setup\n */\nexport function useGridVirtualizer(apiRef, rootProps) {\n  const isRtl = useRtl();\n  const {\n    listView\n  } = rootProps;\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);\n  const pinnedColumns = gridVisiblePinnedColumnDefinitionsSelector(apiRef);\n  const rowSelectionManager = useGridSelector(apiRef, gridRowSelectionManagerSelector);\n  const isRowSelected = id => rowSelectionManager.has(id) && apiRef.current.isRowSelectable(id);\n  const currentPage = useGridVisibleRows(apiRef);\n  const hasColSpan = useGridSelector(apiRef, gridHasColSpanSelector);\n\n  /* TODO: extract dimensions code */\n  const contentHeight = useGridSelector(apiRef, gridContentHeightSelector);\n  const verticalScrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const hasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const {\n    autoHeight\n  } = rootProps;\n  const scrollReset = listView;\n\n  // <DIMENSIONS>\n  const density = useGridSelector(apiRef, gridDensityFactorSelector);\n  const baseRowHeight = getValidRowHeight(rootProps.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);\n  const rowHeight = Math.floor(baseRowHeight * density);\n  const headerHeight = Math.floor(rootProps.columnHeaderHeight * density);\n  const groupHeaderHeight = Math.floor((rootProps.columnGroupHeaderHeight ?? rootProps.columnHeaderHeight) * density);\n  const headerFilterHeight = Math.floor((rootProps.headerFilterHeight ?? rootProps.columnHeaderHeight) * density);\n  const columnsTotalWidth = useGridSelector(apiRef, columnsTotalWidthSelector);\n  const headersTotalHeight = getTotalHeaderHeight(apiRef, rootProps);\n  const leftPinnedWidth = pinnedColumns.left.reduce((w, col) => w + col.computedWidth, 0);\n  const rightPinnedWidth = pinnedColumns.right.reduce((w, col) => w + col.computedWidth, 0);\n  const dimensions = {\n    rowHeight,\n    headerHeight,\n    groupHeaderHeight,\n    headerFilterHeight,\n    columnsTotalWidth,\n    headersTotalHeight,\n    leftPinnedWidth,\n    rightPinnedWidth\n  };\n\n  // </DIMENSIONS>\n\n  // <ROWS_META>\n  const dataRowCount = useGridSelector(apiRef, gridRowCountSelector);\n  const pagination = useGridSelector(apiRef, gridPaginationSelector);\n  const rowCount = Math.min(pagination.enabled ? pagination.paginationModel.pageSize : dataRowCount, dataRowCount);\n  const {\n    getRowHeight,\n    getEstimatedRowHeight,\n    getRowSpacing\n  } = rootProps;\n  // </ROWS_META>\n\n  const focusedVirtualCell = useGridSelector(apiRef, gridFocusedVirtualCellSelector);\n  const virtualizer = useVirtualizer({\n    scrollbarSize: rootProps.scrollbarSize,\n    dimensions,\n    initialState: {\n      scroll: rootProps.initialState?.scroll,\n      dimensions: apiRef.current.state.dimensions,\n      rowSpanning: apiRef.current.state.rowSpanning,\n      virtualization: apiRef.current.state.virtualization\n    },\n    isRtl,\n    rows: currentPage.rows,\n    range: currentPage.range,\n    rowIdToIndexMap: currentPage.rowIdToIndexMap,\n    rowCount,\n    columns: visibleColumns,\n    pinnedRows,\n    pinnedColumns,\n    refs: {\n      container: apiRef.current.mainElementRef,\n      scroller: apiRef.current.virtualScrollerRef,\n      scrollbarVertical: apiRef.current.virtualScrollbarVerticalRef,\n      scrollbarHorizontal: apiRef.current.virtualScrollbarHorizontalRef\n    },\n    hasColSpan,\n    contentHeight,\n    minimalContentHeight,\n    autoHeight,\n    getRowHeight: React.useMemo(() => {\n      if (!getRowHeight) {\n        return undefined;\n      }\n      return rowEntry => getRowHeight(_extends({}, rowEntry, {\n        densityFactor: density\n      }));\n    }, [getRowHeight, density]),\n    getEstimatedRowHeight: React.useMemo(() => getEstimatedRowHeight ? rowEntry => getEstimatedRowHeight(_extends({}, rowEntry, {\n      densityFactor: density\n    })) : undefined, [getEstimatedRowHeight, density]),\n    getRowSpacing: React.useMemo(() => getRowSpacing ? (rowEntry, visibility) => getRowSpacing(_extends({}, rowEntry, visibility, {\n      indexRelativeToCurrentPage: apiRef.current.getRowIndexRelativeToVisibleRows(rowEntry.id)\n    })) : undefined, [apiRef, getRowSpacing]),\n    applyRowHeight: useEventCallback((entry, row) => apiRef.current.unstable_applyPipeProcessors('rowHeight', entry, row)),\n    virtualizeColumnsWithAutoRowHeight: rootProps.virtualizeColumnsWithAutoRowHeight,\n    focusedVirtualCell: useEventCallback(() => focusedVirtualCell),\n    rowBufferPx: rootProps.rowBufferPx,\n    columnBufferPx: rootProps.columnBufferPx,\n    resizeThrottleMs: rootProps.resizeThrottleMs,\n    onResize: useEventCallback(size => apiRef.current.publishEvent('resize', size)),\n    onWheel: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n    }),\n    onTouchMove: useEventCallback(event => {\n      apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n    }),\n    onRenderContextChange: useEventCallback(nextRenderContext => {\n      apiRef.current.publishEvent('renderedRowsIntervalChange', nextRenderContext);\n    }),\n    onScrollChange: (scrollPosition, nextRenderContext) => {\n      apiRef.current.publishEvent('scrollPositionChange', {\n        top: scrollPosition.top,\n        left: scrollPosition.left,\n        renderContext: nextRenderContext\n      });\n    },\n    scrollReset,\n    getColspan: (rowId, column) => {\n      if (typeof column.colSpan === 'function') {\n        const row = apiRef.current.getRow(rowId);\n        const value = apiRef.current.getRowValue(row, column);\n        return column.colSpan(value, row, column, apiRef) ?? 0;\n      }\n      return column.colSpan ?? 0;\n    },\n    renderRow: params => /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n      row: params.model,\n      rowId: params.id,\n      index: params.rowIndex,\n      selected: isRowSelected(params.id),\n      offsetLeft: params.offsetLeft,\n      columnsTotalWidth: columnsTotalWidth,\n      rowHeight: params.baseRowHeight,\n      pinnedColumns: pinnedColumns,\n      visibleColumns: params.columns,\n      firstColumnIndex: params.firstColumnIndex,\n      lastColumnIndex: params.lastColumnIndex,\n      focusedColumnIndex: params.focusedColumnIndex,\n      isFirstVisible: params.isFirstVisible,\n      isLastVisible: params.isLastVisible,\n      isNotVisible: params.isVirtualFocusRow,\n      showBottomBorder: params.showBottomBorder,\n      scrollbarWidth: verticalScrollbarWidth,\n      gridHasFiller: hasFiller\n    }, rootProps.slotProps?.row), params.id),\n    renderInfiniteLoadingTrigger: id => apiRef.current.getInfiniteLoadingTriggerElement?.({\n      lastRowId: id\n    })\n  });\n\n  // HACK: Keep the grid's store in sync with the virtualizer store. We set up the\n  // subscription in the render phase rather than in an effect because other grid\n  // initialization code runs between those two moments.\n  //\n  // TODO(v9): Remove this\n  useFirstRender(() => {\n    apiRef.current.store.state.dimensions = virtualizer.store.state.dimensions;\n    apiRef.current.store.state.rowsMeta = virtualizer.store.state.rowsMeta;\n    apiRef.current.store.state.virtualization = virtualizer.store.state.virtualization;\n  });\n  useStoreEffect(virtualizer.store, identity, (_, state) => {\n    if (state.dimensions !== apiRef.current.state.dimensions) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        dimensions: state.dimensions\n      }));\n    }\n    if (state.rowsMeta !== apiRef.current.state.rowsMeta) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        rowsMeta: state.rowsMeta\n      }));\n    }\n    if (state.virtualization !== apiRef.current.state.virtualization) {\n      apiRef.current.setState(gridState => _extends({}, gridState, {\n        virtualization: state.virtualization\n      }));\n    }\n  });\n  apiRef.current.register('private', {\n    virtualizer\n  });\n}"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,gBAAgB,MAAM,6BAA6B;AAC1D,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,oBAAoB,QAAQ,uBAAuB;AAC5D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,yBAAyB,EAAEC,qBAAqB,EAAEC,kCAAkC,QAAQ,mDAAmD;AACxJ,SAASC,yBAAyB,QAAQ,8BAA8B;AACxE,SAASC,oCAAoC,EAAEC,0CAA0C,EAAEC,2BAA2B,EAAEC,sBAAsB,QAAQ,4CAA4C;AAClM,SAASC,sBAAsB,EAAEC,oBAAoB,QAAQ,sCAAsC;AACnG,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,sBAAsB,QAAQ,iCAAiC;AACxE,SAASC,8BAA8B,QAAQ,8DAA8D;AAC7G,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,SAASC,8BAA8B,QAAQ,+CAA+C;AAC9F,SAASC,iBAAiB,EAAEC,oBAAoB,EAAEC,gBAAgB,QAAQ,mCAAmC;AAC7G,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,QAAQA,CAACC,CAAC,EAAE;EACnB,OAAOA,CAAC;AACV;AACA,MAAMC,yBAAyB,GAAGzB,cAAc,CAACM,oCAAoC,EAAEE,2BAA2B,EAAE,CAACkB,cAAc,EAAEC,SAAS,KAAK;EACjJ,MAAMC,QAAQ,GAAGF,cAAc,CAACG,MAAM;EACtC,IAAID,QAAQ,KAAK,CAAC,EAAE;IAClB,OAAO,CAAC;EACV;EACA,OAAOhC,oBAAoB,CAAC+B,SAAS,CAACC,QAAQ,GAAG,CAAC,CAAC,GAAGF,cAAc,CAACE,QAAQ,GAAG,CAAC,CAAC,CAACE,aAAa,EAAE,CAAC,CAAC;AACtG,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACpD,MAAMC,KAAK,GAAG1C,MAAM,CAAC,CAAC;EACtB,MAAM;IACJ2C;EACF,CAAC,GAAGL,SAAS;EACb,MAAMP,cAAc,GAAGzB,eAAe,CAAC+B,MAAM,EAAE1B,oCAAoC,CAAC;EACpF,MAAMiC,UAAU,GAAGtC,eAAe,CAAC+B,MAAM,EAAEtB,sBAAsB,CAAC;EAClE,MAAM8B,aAAa,GAAGjC,0CAA0C,CAACyB,MAAM,CAAC;EACxE,MAAMS,mBAAmB,GAAGxC,eAAe,CAAC+B,MAAM,EAAEjB,+BAA+B,CAAC;EACpF,MAAM2B,aAAa,GAAGC,EAAE,IAAIF,mBAAmB,CAACG,GAAG,CAACD,EAAE,CAAC,IAAIX,MAAM,CAACa,OAAO,CAACC,eAAe,CAACH,EAAE,CAAC;EAC7F,MAAMI,WAAW,GAAGnC,kBAAkB,CAACoB,MAAM,CAAC;EAC9C,MAAMgB,UAAU,GAAG/C,eAAe,CAAC+B,MAAM,EAAEvB,sBAAsB,CAAC;;EAElE;EACA,MAAMwC,aAAa,GAAGhD,eAAe,CAAC+B,MAAM,EAAE9B,yBAAyB,CAAC;EACxE,MAAMgD,sBAAsB,GAAGjD,eAAe,CAAC+B,MAAM,EAAE5B,kCAAkC,CAAC;EAC1F,MAAM+C,SAAS,GAAGlD,eAAe,CAAC+B,MAAM,EAAE7B,qBAAqB,CAAC;EAChE,MAAM;IACJiD;EACF,CAAC,GAAGnB,SAAS;EACb,MAAMoB,WAAW,GAAGf,QAAQ;;EAE5B;EACA,MAAMgB,OAAO,GAAGrD,eAAe,CAAC+B,MAAM,EAAE3B,yBAAyB,CAAC;EAClE,MAAMkD,aAAa,GAAGtC,iBAAiB,CAACgB,SAAS,CAACuB,SAAS,EAAExC,8BAA8B,CAACwC,SAAS,EAAErC,gBAAgB,CAAC;EACxH,MAAMqC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,GAAGD,OAAO,CAAC;EACrD,MAAMK,YAAY,GAAGF,IAAI,CAACC,KAAK,CAACzB,SAAS,CAAC2B,kBAAkB,GAAGN,OAAO,CAAC;EACvE,MAAMO,iBAAiB,GAAGJ,IAAI,CAACC,KAAK,CAAC,EAAAxB,qBAAA,GAACD,SAAS,CAAC6B,uBAAuB,cAAA5B,qBAAA,cAAAA,qBAAA,GAAID,SAAS,CAAC2B,kBAAkB,IAAIN,OAAO,CAAC;EACnH,MAAMS,kBAAkB,GAAGN,IAAI,CAACC,KAAK,CAAC,EAAAvB,qBAAA,GAACF,SAAS,CAAC8B,kBAAkB,cAAA5B,qBAAA,cAAAA,qBAAA,GAAIF,SAAS,CAAC2B,kBAAkB,IAAIN,OAAO,CAAC;EAC/G,MAAMU,iBAAiB,GAAG/D,eAAe,CAAC+B,MAAM,EAAEP,yBAAyB,CAAC;EAC5E,MAAMwC,kBAAkB,GAAG7C,oBAAoB,CAACY,MAAM,EAAEC,SAAS,CAAC;EAClE,MAAMiC,eAAe,GAAG1B,aAAa,CAAC2B,IAAI,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKD,CAAC,GAAGC,GAAG,CAACxC,aAAa,EAAE,CAAC,CAAC;EACvF,MAAMyC,gBAAgB,GAAG/B,aAAa,CAACgC,KAAK,CAACJ,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAKD,CAAC,GAAGC,GAAG,CAACxC,aAAa,EAAE,CAAC,CAAC;EACzF,MAAM2C,UAAU,GAAG;IACjBjB,SAAS;IACTG,YAAY;IACZE,iBAAiB;IACjBE,kBAAkB;IAClBC,iBAAiB;IACjBC,kBAAkB;IAClBC,eAAe;IACfK;EACF,CAAC;;EAED;;EAEA;EACA,MAAMG,YAAY,GAAGzE,eAAe,CAAC+B,MAAM,EAAErB,oBAAoB,CAAC;EAClE,MAAMgE,UAAU,GAAG1E,eAAe,CAAC+B,MAAM,EAAEnB,sBAAsB,CAAC;EAClE,MAAM+D,QAAQ,GAAGnB,IAAI,CAACoB,GAAG,CAACF,UAAU,CAACG,OAAO,GAAGH,UAAU,CAACI,eAAe,CAACC,QAAQ,GAAGN,YAAY,EAAEA,YAAY,CAAC;EAChH,MAAM;IACJO,YAAY;IACZC,qBAAqB;IACrBC;EACF,CAAC,GAAGlD,SAAS;EACb;;EAEA,MAAMmD,kBAAkB,GAAGnF,eAAe,CAAC+B,MAAM,EAAElB,8BAA8B,CAAC;EAClF,MAAMuE,WAAW,GAAGvF,cAAc,CAAC;IACjCwF,aAAa,EAAErD,SAAS,CAACqD,aAAa;IACtCb,UAAU;IACVc,YAAY,EAAE;MACZC,MAAM,GAAApD,qBAAA,GAAEH,SAAS,CAACsD,YAAY,cAAAnD,qBAAA,uBAAtBA,qBAAA,CAAwBoD,MAAM;MACtCf,UAAU,EAAEzC,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAAChB,UAAU;MAC3CiB,WAAW,EAAE1D,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAACC,WAAW;MAC7CC,cAAc,EAAE3D,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAACE;IACvC,CAAC;IACDtD,KAAK;IACLuD,IAAI,EAAE7C,WAAW,CAAC6C,IAAI;IACtBC,KAAK,EAAE9C,WAAW,CAAC8C,KAAK;IACxBC,eAAe,EAAE/C,WAAW,CAAC+C,eAAe;IAC5ClB,QAAQ;IACRmB,OAAO,EAAErE,cAAc;IACvBa,UAAU;IACVC,aAAa;IACbwD,IAAI,EAAE;MACJC,SAAS,EAAEjE,MAAM,CAACa,OAAO,CAACqD,cAAc;MACxCC,QAAQ,EAAEnE,MAAM,CAACa,OAAO,CAACuD,kBAAkB;MAC3CC,iBAAiB,EAAErE,MAAM,CAACa,OAAO,CAACyD,2BAA2B;MAC7DC,mBAAmB,EAAEvE,MAAM,CAACa,OAAO,CAAC2D;IACtC,CAAC;IACDxD,UAAU;IACVC,aAAa;IACb/B,oBAAoB;IACpBkC,UAAU;IACV6B,YAAY,EAAExF,KAAK,CAACgH,OAAO,CAAC,MAAM;MAChC,IAAI,CAACxB,YAAY,EAAE;QACjB,OAAOyB,SAAS;MAClB;MACA,OAAOC,QAAQ,IAAI1B,YAAY,CAACzF,QAAQ,CAAC,CAAC,CAAC,EAAEmH,QAAQ,EAAE;QACrDC,aAAa,EAAEtD;MACjB,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC2B,YAAY,EAAE3B,OAAO,CAAC,CAAC;IAC3B4B,qBAAqB,EAAEzF,KAAK,CAACgH,OAAO,CAAC,MAAMvB,qBAAqB,GAAGyB,QAAQ,IAAIzB,qBAAqB,CAAC1F,QAAQ,CAAC,CAAC,CAAC,EAAEmH,QAAQ,EAAE;MAC1HC,aAAa,EAAEtD;IACjB,CAAC,CAAC,CAAC,GAAGoD,SAAS,EAAE,CAACxB,qBAAqB,EAAE5B,OAAO,CAAC,CAAC;IAClD6B,aAAa,EAAE1F,KAAK,CAACgH,OAAO,CAAC,MAAMtB,aAAa,GAAG,CAACwB,QAAQ,EAAEE,UAAU,KAAK1B,aAAa,CAAC3F,QAAQ,CAAC,CAAC,CAAC,EAAEmH,QAAQ,EAAEE,UAAU,EAAE;MAC5HC,0BAA0B,EAAE9E,MAAM,CAACa,OAAO,CAACkE,gCAAgC,CAACJ,QAAQ,CAAChE,EAAE;IACzF,CAAC,CAAC,CAAC,GAAG+D,SAAS,EAAE,CAAC1E,MAAM,EAAEmD,aAAa,CAAC,CAAC;IACzC6B,cAAc,EAAEtH,gBAAgB,CAAC,CAACuH,KAAK,EAAEC,GAAG,KAAKlF,MAAM,CAACa,OAAO,CAACsE,4BAA4B,CAAC,WAAW,EAAEF,KAAK,EAAEC,GAAG,CAAC,CAAC;IACtHE,kCAAkC,EAAEnF,SAAS,CAACmF,kCAAkC;IAChFhC,kBAAkB,EAAE1F,gBAAgB,CAAC,MAAM0F,kBAAkB,CAAC;IAC9DiC,WAAW,EAAEpF,SAAS,CAACoF,WAAW;IAClCC,cAAc,EAAErF,SAAS,CAACqF,cAAc;IACxCC,gBAAgB,EAAEtF,SAAS,CAACsF,gBAAgB;IAC5CC,QAAQ,EAAE9H,gBAAgB,CAAC+H,IAAI,IAAIzF,MAAM,CAACa,OAAO,CAAC6E,YAAY,CAAC,QAAQ,EAAED,IAAI,CAAC,CAAC;IAC/EE,OAAO,EAAEjI,gBAAgB,CAACkI,KAAK,IAAI;MACjC5F,MAAM,CAACa,OAAO,CAAC6E,YAAY,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAEE,KAAK,CAAC;IAChE,CAAC,CAAC;IACFC,WAAW,EAAEnI,gBAAgB,CAACkI,KAAK,IAAI;MACrC5F,MAAM,CAACa,OAAO,CAAC6E,YAAY,CAAC,0BAA0B,EAAE,CAAC,CAAC,EAAEE,KAAK,CAAC;IACpE,CAAC,CAAC;IACFE,qBAAqB,EAAEpI,gBAAgB,CAACqI,iBAAiB,IAAI;MAC3D/F,MAAM,CAACa,OAAO,CAAC6E,YAAY,CAAC,4BAA4B,EAAEK,iBAAiB,CAAC;IAC9E,CAAC,CAAC;IACFC,cAAc,EAAEA,CAACC,cAAc,EAAEF,iBAAiB,KAAK;MACrD/F,MAAM,CAACa,OAAO,CAAC6E,YAAY,CAAC,sBAAsB,EAAE;QAClDQ,GAAG,EAAED,cAAc,CAACC,GAAG;QACvB/D,IAAI,EAAE8D,cAAc,CAAC9D,IAAI;QACzBgE,aAAa,EAAEJ;MACjB,CAAC,CAAC;IACJ,CAAC;IACD1E,WAAW;IACX+E,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAAC,gBAAA;MAC7B,IAAI,OAAOD,MAAM,CAACE,OAAO,KAAK,UAAU,EAAE;QAAA,IAAAC,eAAA;QACxC,MAAMvB,GAAG,GAAGlF,MAAM,CAACa,OAAO,CAAC6F,MAAM,CAACL,KAAK,CAAC;QACxC,MAAMM,KAAK,GAAG3G,MAAM,CAACa,OAAO,CAAC+F,WAAW,CAAC1B,GAAG,EAAEoB,MAAM,CAAC;QACrD,QAAAG,eAAA,GAAOH,MAAM,CAACE,OAAO,CAACG,KAAK,EAAEzB,GAAG,EAAEoB,MAAM,EAAEtG,MAAM,CAAC,cAAAyG,eAAA,cAAAA,eAAA,GAAI,CAAC;MACxD;MACA,QAAAF,gBAAA,GAAOD,MAAM,CAACE,OAAO,cAAAD,gBAAA,cAAAA,gBAAA,GAAI,CAAC;IAC5B,CAAC;IACDM,SAAS,EAAEC,MAAM;MAAA,IAAAC,oBAAA;MAAA,OAAI,aAAazH,IAAI,CAACW,SAAS,CAAC+G,KAAK,CAAC9B,GAAG,EAAE1H,QAAQ,CAAC;QACnE0H,GAAG,EAAE4B,MAAM,CAACG,KAAK;QACjBZ,KAAK,EAAES,MAAM,CAACnG,EAAE;QAChBuG,KAAK,EAAEJ,MAAM,CAACK,QAAQ;QACtBC,QAAQ,EAAE1G,aAAa,CAACoG,MAAM,CAACnG,EAAE,CAAC;QAClC0G,UAAU,EAAEP,MAAM,CAACO,UAAU;QAC7BrF,iBAAiB,EAAEA,iBAAiB;QACpCR,SAAS,EAAEsF,MAAM,CAACvF,aAAa;QAC/Bf,aAAa,EAAEA,aAAa;QAC5Bd,cAAc,EAAEoH,MAAM,CAAC/C,OAAO;QAC9BuD,gBAAgB,EAAER,MAAM,CAACQ,gBAAgB;QACzCC,eAAe,EAAET,MAAM,CAACS,eAAe;QACvCC,kBAAkB,EAAEV,MAAM,CAACU,kBAAkB;QAC7CC,cAAc,EAAEX,MAAM,CAACW,cAAc;QACrCC,aAAa,EAAEZ,MAAM,CAACY,aAAa;QACnCC,YAAY,EAAEb,MAAM,CAACc,iBAAiB;QACtCC,gBAAgB,EAAEf,MAAM,CAACe,gBAAgB;QACzCC,cAAc,EAAE5G,sBAAsB;QACtC6G,aAAa,EAAE5G;MACjB,CAAC,GAAA4F,oBAAA,GAAE9G,SAAS,CAAC+H,SAAS,cAAAjB,oBAAA,uBAAnBA,oBAAA,CAAqB7B,GAAG,CAAC,EAAE4B,MAAM,CAACnG,EAAE,CAAC;IAAA;IACxCsH,4BAA4B,EAAEtH,EAAE;MAAA,IAAAuH,qBAAA,EAAAC,eAAA;MAAA,QAAAD,qBAAA,GAAI,CAAAC,eAAA,GAAAnI,MAAM,CAACa,OAAO,EAACuH,gCAAgC,cAAAF,qBAAA,uBAA/CA,qBAAA,CAAAG,IAAA,CAAAF,eAAA,EAAkD;QACpFG,SAAS,EAAE3H;MACb,CAAC,CAAC;IAAA;EACJ,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA5C,cAAc,CAAC,MAAM;IACnBiC,MAAM,CAACa,OAAO,CAAC0H,KAAK,CAAC9E,KAAK,CAAChB,UAAU,GAAGY,WAAW,CAACkF,KAAK,CAAC9E,KAAK,CAAChB,UAAU;IAC1EzC,MAAM,CAACa,OAAO,CAAC0H,KAAK,CAAC9E,KAAK,CAAC+E,QAAQ,GAAGnF,WAAW,CAACkF,KAAK,CAAC9E,KAAK,CAAC+E,QAAQ;IACtExI,MAAM,CAACa,OAAO,CAAC0H,KAAK,CAAC9E,KAAK,CAACE,cAAc,GAAGN,WAAW,CAACkF,KAAK,CAAC9E,KAAK,CAACE,cAAc;EACpF,CAAC,CAAC;EACF9F,cAAc,CAACwF,WAAW,CAACkF,KAAK,EAAEhJ,QAAQ,EAAE,CAACkJ,CAAC,EAAEhF,KAAK,KAAK;IACxD,IAAIA,KAAK,CAAChB,UAAU,KAAKzC,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAAChB,UAAU,EAAE;MACxDzC,MAAM,CAACa,OAAO,CAAC6H,QAAQ,CAACC,SAAS,IAAInL,QAAQ,CAAC,CAAC,CAAC,EAAEmL,SAAS,EAAE;QAC3DlG,UAAU,EAAEgB,KAAK,CAAChB;MACpB,CAAC,CAAC,CAAC;IACL;IACA,IAAIgB,KAAK,CAAC+E,QAAQ,KAAKxI,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAAC+E,QAAQ,EAAE;MACpDxI,MAAM,CAACa,OAAO,CAAC6H,QAAQ,CAACC,SAAS,IAAInL,QAAQ,CAAC,CAAC,CAAC,EAAEmL,SAAS,EAAE;QAC3DH,QAAQ,EAAE/E,KAAK,CAAC+E;MAClB,CAAC,CAAC,CAAC;IACL;IACA,IAAI/E,KAAK,CAACE,cAAc,KAAK3D,MAAM,CAACa,OAAO,CAAC4C,KAAK,CAACE,cAAc,EAAE;MAChE3D,MAAM,CAACa,OAAO,CAAC6H,QAAQ,CAACC,SAAS,IAAInL,QAAQ,CAAC,CAAC,CAAC,EAAEmL,SAAS,EAAE;QAC3DhF,cAAc,EAAEF,KAAK,CAACE;MACxB,CAAC,CAAC,CAAC;IACL;EACF,CAAC,CAAC;EACF3D,MAAM,CAACa,OAAO,CAAC+H,QAAQ,CAAC,SAAS,EAAE;IACjCvF;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}