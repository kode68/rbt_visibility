{"ast":null,"code":"/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n\nconst EMPTY_RANGE = {\n  firstRowIndex: 0,\n  lastRowIndex: 0\n};\nconst EMPTY_CACHES = {\n  spannedCells: {},\n  hiddenCells: {},\n  hiddenCellOriginMap: {}\n};\nconst selectors = {\n  state: state => state.rowSpanning,\n  hiddenCells: state => state.rowSpanning.caches.hiddenCells,\n  spannedCells: state => state.rowSpanning.caches.spannedCells,\n  hiddenCellsOriginMap: state => state.rowSpanning.caches.hiddenCellOriginMap\n};\nexport const Rowspan = {\n  initialize: initializeState,\n  use: useRowspan,\n  selectors\n};\nfunction initializeState(params) {\n  var _params$initialState$, _params$initialState;\n  return {\n    rowSpanning: (_params$initialState$ = (_params$initialState = params.initialState) === null || _params$initialState === void 0 ? void 0 : _params$initialState.rowSpanning) !== null && _params$initialState$ !== void 0 ? _params$initialState$ : {\n      caches: EMPTY_CACHES,\n      processedRange: EMPTY_RANGE\n    }\n  };\n}\nfunction useRowspan(store, _params, _api) {\n  const getHiddenCellsOrigin = () => selectors.hiddenCellsOriginMap(store.state);\n  return {\n    getHiddenCellsOrigin\n  };\n}","map":{"version":3,"names":["EMPTY_RANGE","firstRowIndex","lastRowIndex","EMPTY_CACHES","spannedCells","hiddenCells","hiddenCellOriginMap","selectors","state","rowSpanning","caches","hiddenCellsOriginMap","Rowspan","initialize","initializeState","use","useRowspan","params","_params$initialState$","_params$initialState","initialState","processedRange","store","_params","_api","getHiddenCellsOrigin"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-virtualizer/esm/features/rowspan.js"],"sourcesContent":["/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n\nconst EMPTY_RANGE = {\n  firstRowIndex: 0,\n  lastRowIndex: 0\n};\nconst EMPTY_CACHES = {\n  spannedCells: {},\n  hiddenCells: {},\n  hiddenCellOriginMap: {}\n};\nconst selectors = {\n  state: state => state.rowSpanning,\n  hiddenCells: state => state.rowSpanning.caches.hiddenCells,\n  spannedCells: state => state.rowSpanning.caches.spannedCells,\n  hiddenCellsOriginMap: state => state.rowSpanning.caches.hiddenCellOriginMap\n};\nexport const Rowspan = {\n  initialize: initializeState,\n  use: useRowspan,\n  selectors\n};\nfunction initializeState(params) {\n  return {\n    rowSpanning: params.initialState?.rowSpanning ?? {\n      caches: EMPTY_CACHES,\n      processedRange: EMPTY_RANGE\n    }\n  };\n}\nfunction useRowspan(store, _params, _api) {\n  const getHiddenCellsOrigin = () => selectors.hiddenCellsOriginMap(store.state);\n  return {\n    getHiddenCellsOrigin\n  };\n}"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG;EAClBC,aAAa,EAAE,CAAC;EAChBC,YAAY,EAAE;AAChB,CAAC;AACD,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,CAAC,CAAC;EAChBC,WAAW,EAAE,CAAC,CAAC;EACfC,mBAAmB,EAAE,CAAC;AACxB,CAAC;AACD,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAEA,KAAK,IAAIA,KAAK,CAACC,WAAW;EACjCJ,WAAW,EAAEG,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACC,MAAM,CAACL,WAAW;EAC1DD,YAAY,EAAEI,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACC,MAAM,CAACN,YAAY;EAC5DO,oBAAoB,EAAEH,KAAK,IAAIA,KAAK,CAACC,WAAW,CAACC,MAAM,CAACJ;AAC1D,CAAC;AACD,OAAO,MAAMM,OAAO,GAAG;EACrBC,UAAU,EAAEC,eAAe;EAC3BC,GAAG,EAAEC,UAAU;EACfT;AACF,CAAC;AACD,SAASO,eAAeA,CAACG,MAAM,EAAE;EAAA,IAAAC,qBAAA,EAAAC,oBAAA;EAC/B,OAAO;IACLV,WAAW,GAAAS,qBAAA,IAAAC,oBAAA,GAAEF,MAAM,CAACG,YAAY,cAAAD,oBAAA,uBAAnBA,oBAAA,CAAqBV,WAAW,cAAAS,qBAAA,cAAAA,qBAAA,GAAI;MAC/CR,MAAM,EAAEP,YAAY;MACpBkB,cAAc,EAAErB;IAClB;EACF,CAAC;AACH;AACA,SAASgB,UAAUA,CAACM,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAE;EACxC,MAAMC,oBAAoB,GAAGA,CAAA,KAAMlB,SAAS,CAACI,oBAAoB,CAACW,KAAK,CAACd,KAAK,CAAC;EAC9E,OAAO;IACLiB;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}