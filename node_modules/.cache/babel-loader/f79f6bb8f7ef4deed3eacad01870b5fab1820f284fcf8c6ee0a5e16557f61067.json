{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridEditBooleanCell(props) {\n  const {\n      id: idProp,\n      value,\n      field,\n      className,\n      hasFocus,\n      onValueChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n    setValueState(newValue);\n    await apiRef.current.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [apiRef, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, rootProps.slotProps?.baseCheckbox))\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));\nif (process.env.NODE_ENV !== \"production\") renderEditBooleanCell.displayName = \"renderEditBooleanCell\";","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","clsx","composeClasses","useId","useEnhancedEffect","getDataGridUtilityClass","useGridRootProps","useGridApiContext","jsx","_jsx","useUtilityClasses","ownerState","classes","slots","root","GridEditBooleanCell","props","id","idProp","value","field","className","hasFocus","onValueChange","other","apiRef","inputRef","useRef","valueState","setValueState","useState","rootProps","handleChange","useCallback","event","newValue","target","checked","current","setEditCellValue","useEffect","focus","htmlFor","children","baseCheckbox","Boolean","onChange","size","slotProps","process","env","NODE_ENV","propTypes","api","object","isRequired","cellMode","oneOf","changeReason","colDef","string","formattedValue","any","bool","oneOfType","number","isEditable","isProcessingProps","isValidating","func","row","rowNode","tabIndex","renderEditBooleanCell","params","displayName"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/components/cell/GridEditBooleanCell.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"hasFocus\", \"isValidating\", \"isProcessingProps\", \"error\", \"onValueChange\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useId from '@mui/utils/useId';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { getDataGridUtilityClass } from \"../../constants/gridClasses.js\";\nimport { useGridRootProps } from \"../../hooks/utils/useGridRootProps.js\";\nimport { useGridApiContext } from \"../../hooks/utils/useGridApiContext.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\nfunction GridEditBooleanCell(props) {\n  const {\n      id: idProp,\n      value,\n      field,\n      className,\n      hasFocus,\n      onValueChange\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const apiRef = useGridApiContext();\n  const inputRef = React.useRef(null);\n  const id = useId();\n  const [valueState, setValueState] = React.useState(value);\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(async event => {\n    const newValue = event.target.checked;\n    if (onValueChange) {\n      await onValueChange(event, newValue);\n    }\n    setValueState(newValue);\n    await apiRef.current.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [apiRef, field, idProp, onValueChange]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return /*#__PURE__*/_jsx(\"label\", _extends({\n    htmlFor: id,\n    className: clsx(classes.root, className)\n  }, other, {\n    children: /*#__PURE__*/_jsx(rootProps.slots.baseCheckbox, _extends({\n      id: id,\n      inputRef: inputRef,\n      checked: Boolean(valueState),\n      onChange: handleChange,\n      size: \"small\"\n    }, rootProps.slotProps?.baseCheckbox))\n  }));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridEditBooleanCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * GridApi that let you manipulate the grid.\n   */\n  api: PropTypes.object.isRequired,\n  /**\n   * The mode of the cell.\n   */\n  cellMode: PropTypes.oneOf(['edit', 'view']).isRequired,\n  changeReason: PropTypes.oneOf(['debouncedSetEditCellValue', 'setEditCellValue']),\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n  /**\n   * The column field of the cell that triggered the event.\n   */\n  field: PropTypes.string.isRequired,\n  /**\n   * The cell value formatted with the column valueFormatter.\n   */\n  formattedValue: PropTypes.any,\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  /**\n   * If true, the cell is editable.\n   */\n  isEditable: PropTypes.bool,\n  isProcessingProps: PropTypes.bool,\n  isValidating: PropTypes.bool,\n  /**\n   * Callback called when the value is changed by the user.\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n   */\n  onValueChange: PropTypes.func,\n  /**\n   * The row model of the row that the current cell belongs to.\n   */\n  row: PropTypes.any.isRequired,\n  /**\n   * The node of the row that the current cell belongs to.\n   */\n  rowNode: PropTypes.object.isRequired,\n  /**\n   * the tabIndex value.\n   */\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired,\n  /**\n   * The cell value.\n   * If the column has `valueGetter`, use `params.row` to directly access the fields.\n   */\n  value: PropTypes.any\n} : void 0;\nexport { GridEditBooleanCell };\nexport const renderEditBooleanCell = params => /*#__PURE__*/_jsx(GridEditBooleanCell, _extends({}, params));\nif (process.env.NODE_ENV !== \"production\") renderEditBooleanCell.displayName = \"renderEditBooleanCell\";"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,mBAAmB,EAAE,OAAO,EAAE,eAAe,CAAC;AAC7N,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,SAASC,uBAAuB,QAAQ,gCAAgC;AACxE,SAASC,gBAAgB,QAAQ,uCAAuC;AACxE,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;EACtC,MAAM;IACJC;EACF,CAAC,GAAGD,UAAU;EACd,MAAME,KAAK,GAAG;IACZC,IAAI,EAAE,CAAC,iBAAiB;EAC1B,CAAC;EACD,OAAOZ,cAAc,CAACW,KAAK,EAAER,uBAAuB,EAAEO,OAAO,CAAC;AAChE,CAAC;AACD,SAASG,mBAAmBA,CAACC,KAAK,EAAE;EAClC,MAAM;MACFC,EAAE,EAAEC,MAAM;MACVC,KAAK;MACLC,KAAK;MACLC,SAAS;MACTC,QAAQ;MACRC;IACF,CAAC,GAAGP,KAAK;IACTQ,KAAK,GAAG3B,6BAA6B,CAACmB,KAAK,EAAElB,SAAS,CAAC;EACzD,MAAM2B,MAAM,GAAGlB,iBAAiB,CAAC,CAAC;EAClC,MAAMmB,QAAQ,GAAG3B,KAAK,CAAC4B,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMV,EAAE,GAAGd,KAAK,CAAC,CAAC;EAClB,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG9B,KAAK,CAAC+B,QAAQ,CAACX,KAAK,CAAC;EACzD,MAAMY,SAAS,GAAGzB,gBAAgB,CAAC,CAAC;EACpC,MAAMK,UAAU,GAAG;IACjBC,OAAO,EAAEmB,SAAS,CAACnB;EACrB,CAAC;EACD,MAAMA,OAAO,GAAGF,iBAAiB,CAACC,UAAU,CAAC;EAC7C,MAAMqB,YAAY,GAAGjC,KAAK,CAACkC,WAAW,CAAC,MAAMC,KAAK,IAAI;IACpD,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACC,OAAO;IACrC,IAAId,aAAa,EAAE;MACjB,MAAMA,aAAa,CAACW,KAAK,EAAEC,QAAQ,CAAC;IACtC;IACAN,aAAa,CAACM,QAAQ,CAAC;IACvB,MAAMV,MAAM,CAACa,OAAO,CAACC,gBAAgB,CAAC;MACpCtB,EAAE,EAAEC,MAAM;MACVE,KAAK;MACLD,KAAK,EAAEgB;IACT,CAAC,EAAED,KAAK,CAAC;EACX,CAAC,EAAE,CAACT,MAAM,EAAEL,KAAK,EAAEF,MAAM,EAAEK,aAAa,CAAC,CAAC;EAC1CxB,KAAK,CAACyC,SAAS,CAAC,MAAM;IACpBX,aAAa,CAACV,KAAK,CAAC;EACtB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACXf,iBAAiB,CAAC,MAAM;IACtB,IAAIkB,QAAQ,EAAE;MACZI,QAAQ,CAACY,OAAO,CAACG,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACnB,QAAQ,CAAC,CAAC;EACd,OAAO,aAAab,IAAI,CAAC,OAAO,EAAEb,QAAQ,CAAC;IACzC8C,OAAO,EAAEzB,EAAE;IACXI,SAAS,EAAEpB,IAAI,CAACW,OAAO,CAACE,IAAI,EAAEO,SAAS;EACzC,CAAC,EAAEG,KAAK,EAAE;IACRmB,QAAQ,EAAE,aAAalC,IAAI,CAACsB,SAAS,CAAClB,KAAK,CAAC+B,YAAY,EAAEhD,QAAQ,CAAC;MACjEqB,EAAE,EAAEA,EAAE;MACNS,QAAQ,EAAEA,QAAQ;MAClBW,OAAO,EAAEQ,OAAO,CAACjB,UAAU,CAAC;MAC5BkB,QAAQ,EAAEd,YAAY;MACtBe,IAAI,EAAE;IACR,CAAC,EAAEhB,SAAS,CAACiB,SAAS,EAAEJ,YAAY,CAAC;EACvC,CAAC,CAAC,CAAC;AACL;AACAK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGpC,mBAAmB,CAACqC,SAAS,GAAG;EACtE;EACA;EACA;EACA;EACA;AACF;AACA;EACEC,GAAG,EAAErD,SAAS,CAACsD,MAAM,CAACC,UAAU;EAChC;AACF;AACA;EACEC,QAAQ,EAAExD,SAAS,CAACyD,KAAK,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAACF,UAAU;EACtDG,YAAY,EAAE1D,SAAS,CAACyD,KAAK,CAAC,CAAC,2BAA2B,EAAE,kBAAkB,CAAC,CAAC;EAChF;AACF;AACA;EACEE,MAAM,EAAE3D,SAAS,CAACsD,MAAM,CAACC,UAAU;EACnC;AACF;AACA;EACEnC,KAAK,EAAEpB,SAAS,CAAC4D,MAAM,CAACL,UAAU;EAClC;AACF;AACA;EACEM,cAAc,EAAE7D,SAAS,CAAC8D,GAAG;EAC7B;AACF;AACA;EACExC,QAAQ,EAAEtB,SAAS,CAAC+D,IAAI,CAACR,UAAU;EACnC;AACF;AACA;EACEtC,EAAE,EAAEjB,SAAS,CAACgE,SAAS,CAAC,CAAChE,SAAS,CAACiE,MAAM,EAAEjE,SAAS,CAAC4D,MAAM,CAAC,CAAC,CAACL,UAAU;EACxE;AACF;AACA;EACEW,UAAU,EAAElE,SAAS,CAAC+D,IAAI;EAC1BI,iBAAiB,EAAEnE,SAAS,CAAC+D,IAAI;EACjCK,YAAY,EAAEpE,SAAS,CAAC+D,IAAI;EAC5B;AACF;AACA;AACA;AACA;AACA;EACExC,aAAa,EAAEvB,SAAS,CAACqE,IAAI;EAC7B;AACF;AACA;EACEC,GAAG,EAAEtE,SAAS,CAAC8D,GAAG,CAACP,UAAU;EAC7B;AACF;AACA;EACEgB,OAAO,EAAEvE,SAAS,CAACsD,MAAM,CAACC,UAAU;EACpC;AACF;AACA;EACEiB,QAAQ,EAAExE,SAAS,CAACyD,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACF,UAAU;EAC7C;AACF;AACA;AACA;EACEpC,KAAK,EAAEnB,SAAS,CAAC8D;AACnB,CAAC,GAAG,KAAK,CAAC;AACV,SAAS/C,mBAAmB;AAC5B,OAAO,MAAM0D,qBAAqB,GAAGC,MAAM,IAAI,aAAajE,IAAI,CAACM,mBAAmB,EAAEnB,QAAQ,CAAC,CAAC,CAAC,EAAE8E,MAAM,CAAC,CAAC;AAC3G,IAAIzB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAEsB,qBAAqB,CAACE,WAAW,GAAG,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}