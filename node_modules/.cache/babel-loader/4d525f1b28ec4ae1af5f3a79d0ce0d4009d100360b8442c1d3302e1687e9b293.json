{"ast":null,"code":"import { createRootSelector, createSelector, createSelectorMemoized } from \"../../../utils/createSelector.js\";\nexport const gridRowsStateSelector = createRootSelector(state => state.rows);\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowSelector = createSelector(gridRowsLookupSelector, (rows, id) => rows[id]);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowNodeSelector = createSelector(gridRowTreeSelector, (rowTree, rowId) => rowTree[rowId]);\nexport const gridRowGroupsToFetchSelector = createSelector(gridRowsStateSelector, rows => rows.groupsToFetch);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  var _entries$filter$map$s;\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return ((_entries$filter$map$s = entries.filter(_ref => {\n    let [, nodeCount] = _ref;\n    return nodeCount > 0;\n  }).map(_ref2 => {\n    let [depth] = _ref2;\n    return Number(depth);\n  }).sort((a, b) => b - a)[0]) !== null && _entries$filter$map$s !== void 0 ? _entries$filter$map$s : 0) + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\nexport const gridDataRowsSelector = createSelectorMemoized(gridDataRowIdsSelector, gridRowsLookupSelector, (dataRowIds, rowsLookup) => dataRowIds.reduce((acc, id) => {\n  if (!rowsLookup[id]) {\n    return acc;\n  }\n  acc.push(rowsLookup[id]);\n  return acc;\n}, []));\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows === null || rows === void 0 ? void 0 : rows.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  var _rawPinnedRows$bottom, _rawPinnedRows$bottom2, _rawPinnedRows$top$ma, _rawPinnedRows$top;\n  const rawPinnedRows = additionalRowGroups === null || additionalRowGroups === void 0 ? void 0 : additionalRowGroups.pinnedRows;\n  return {\n    bottom: (_rawPinnedRows$bottom = rawPinnedRows === null || rawPinnedRows === void 0 || (_rawPinnedRows$bottom2 = rawPinnedRows.bottom) === null || _rawPinnedRows$bottom2 === void 0 ? void 0 : _rawPinnedRows$bottom2.map(rowEntry => {\n      var _rowEntry$model;\n      return {\n        id: rowEntry.id,\n        model: (_rowEntry$model = rowEntry.model) !== null && _rowEntry$model !== void 0 ? _rowEntry$model : {}\n      };\n    })) !== null && _rawPinnedRows$bottom !== void 0 ? _rawPinnedRows$bottom : [],\n    top: (_rawPinnedRows$top$ma = rawPinnedRows === null || rawPinnedRows === void 0 || (_rawPinnedRows$top = rawPinnedRows.top) === null || _rawPinnedRows$top === void 0 ? void 0 : _rawPinnedRows$top.map(rowEntry => {\n      var _rowEntry$model2;\n      return {\n        id: rowEntry.id,\n        model: (_rowEntry$model2 = rowEntry.model) !== null && _rowEntry$model2 !== void 0 ? _rowEntry$model2 : {}\n      };\n    })) !== null && _rawPinnedRows$top$ma !== void 0 ? _rawPinnedRows$top$ma : []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  var _pinnedRows$top, _pinnedRows$bottom;\n  return ((pinnedRows === null || pinnedRows === void 0 || (_pinnedRows$top = pinnedRows.top) === null || _pinnedRows$top === void 0 ? void 0 : _pinnedRows$top.length) || 0) + ((pinnedRows === null || pinnedRows === void 0 || (_pinnedRows$bottom = pinnedRows.bottom) === null || _pinnedRows$bottom === void 0 ? void 0 : _pinnedRows$bottom.length) || 0);\n});","map":{"version":3,"names":["createRootSelector","createSelector","createSelectorMemoized","gridRowsStateSelector","state","rows","gridRowCountSelector","totalRowCount","gridRowsLoadingSelector","loading","gridTopLevelRowCountSelector","totalTopLevelRowCount","gridRowsLookupSelector","dataRowIdToModelLookup","gridRowSelector","id","gridRowTreeSelector","tree","gridRowNodeSelector","rowTree","rowId","gridRowGroupsToFetchSelector","groupsToFetch","gridRowGroupingNameSelector","groupingName","gridRowTreeDepthsSelector","treeDepths","gridRowMaximumTreeDepthSelector","_entries$filter$map$s","entries","Object","length","filter","_ref","nodeCount","map","_ref2","depth","Number","sort","a","b","gridDataRowIdsSelector","dataRowIds","gridDataRowsSelector","rowsLookup","reduce","acc","push","gridAdditionalRowGroupsSelector","additionalRowGroups","gridPinnedRowsSelector","_rawPinnedRows$bottom","_rawPinnedRows$bottom2","_rawPinnedRows$top$ma","_rawPinnedRows$top","rawPinnedRows","pinnedRows","bottom","rowEntry","_rowEntry$model","model","top","_rowEntry$model2","gridPinnedRowsCountSelector","_pinnedRows$top","_pinnedRows$bottom"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/rows/gridRowsSelector.js"],"sourcesContent":["import { createRootSelector, createSelector, createSelectorMemoized } from \"../../../utils/createSelector.js\";\nexport const gridRowsStateSelector = createRootSelector(state => state.rows);\nexport const gridRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalRowCount);\nexport const gridRowsLoadingSelector = createSelector(gridRowsStateSelector, rows => rows.loading);\nexport const gridTopLevelRowCountSelector = createSelector(gridRowsStateSelector, rows => rows.totalTopLevelRowCount);\n\n// TODO rows v6: Rename\nexport const gridRowsLookupSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIdToModelLookup);\nexport const gridRowSelector = createSelector(gridRowsLookupSelector, (rows, id) => rows[id]);\nexport const gridRowTreeSelector = createSelector(gridRowsStateSelector, rows => rows.tree);\nexport const gridRowNodeSelector = createSelector(gridRowTreeSelector, (rowTree, rowId) => rowTree[rowId]);\nexport const gridRowGroupsToFetchSelector = createSelector(gridRowsStateSelector, rows => rows.groupsToFetch);\nexport const gridRowGroupingNameSelector = createSelector(gridRowsStateSelector, rows => rows.groupingName);\nexport const gridRowTreeDepthsSelector = createSelector(gridRowsStateSelector, rows => rows.treeDepths);\nexport const gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, rows => {\n  const entries = Object.entries(rows.treeDepths);\n  if (entries.length === 0) {\n    return 1;\n  }\n  return (entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] ?? 0) + 1;\n});\nexport const gridDataRowIdsSelector = createSelector(gridRowsStateSelector, rows => rows.dataRowIds);\nexport const gridDataRowsSelector = createSelectorMemoized(gridDataRowIdsSelector, gridRowsLookupSelector, (dataRowIds, rowsLookup) => dataRowIds.reduce((acc, id) => {\n  if (!rowsLookup[id]) {\n    return acc;\n  }\n  acc.push(rowsLookup[id]);\n  return acc;\n}, []));\n\n/**\n * @ignore - do not document.\n */\nexport const gridAdditionalRowGroupsSelector = createSelector(gridRowsStateSelector, rows => rows?.additionalRowGroups);\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, additionalRowGroups => {\n  const rawPinnedRows = additionalRowGroups?.pinnedRows;\n  return {\n    bottom: rawPinnedRows?.bottom?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? [],\n    top: rawPinnedRows?.top?.map(rowEntry => ({\n      id: rowEntry.id,\n      model: rowEntry.model ?? {}\n    })) ?? []\n  };\n});\n\n/**\n * @ignore - do not document.\n */\nexport const gridPinnedRowsCountSelector = createSelector(gridPinnedRowsSelector, pinnedRows => {\n  return (pinnedRows?.top?.length || 0) + (pinnedRows?.bottom?.length || 0);\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}