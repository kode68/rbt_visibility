{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"skipCache\"];\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport debounce from '@mui/utils/debounce';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { runIf } from \"../../../utils/utils.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridPaginationModelSelector } from \"../pagination/gridPaginationSelector.js\";\nimport { gridGetRowsParamsSelector } from \"./gridDataSourceSelector.js\";\nimport { CacheChunkManager, DataSourceRowsUpdateStrategy } from \"./utils.js\";\nimport { GridDataSourceCacheDefault } from \"./cache.js\";\nimport { GridGetRowsError, GridUpdateRowError } from \"./gridDataSourceError.js\";\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp !== null && cacheProp !== void 0 ? cacheProp : new GridDataSourceCacheDefault(options);\n}\nexport const useGridDataSourceBase = function (apiRef, props) {\n  var _props$dataSource2, _props$dataSource3;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(GridStrategyGroup.DataSource, DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = useLazyRef(() => {\n    if (!props.pagination) {\n      return new CacheChunkManager(paginationModel.pageSize);\n    }\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    var _props$dataSource, _options$clearDataSou;\n    const getRows = (_props$dataSource = props.dataSource) === null || _props$dataSource === void 0 ? void 0 : _props$dataSource.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      var _options$fetchRowChil;\n      (_options$fetchRowChil = options.fetchRowChildren) === null || _options$fetchRowChil === void 0 || _options$fetchRowChil.call(options, [parentId]);\n      return;\n    }\n    (_options$clearDataSou = options.clearDataSourceState) === null || _options$clearDataSou === void 0 || _options$clearDataSou.call(options);\n    const _ref = params || {},\n      {\n        skipCache\n      } = _ref,\n      getRowsParams = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), getRowsParams);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (!skipCache && responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new GridGetRowsError({\n            message: originalError === null || originalError === void 0 ? void 0 : originalError.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, (_props$dataSource2 = props.dataSource) === null || _props$dataSource2 === void 0 ? void 0 : _props$dataSource2.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(GridStrategyGroup.DataSource) === DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = (_props$dataSource3 = props.dataSource) === null || _props$dataSource3 === void 0 ? void 0 : _props$dataSource3.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !isDeepEqual(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new GridUpdateRowError({\n          message: errorThrown === null || errorThrown === void 0 ? void 0 : errorThrown.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        warnOnce(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => debounce(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n    return () => {\n      // ignore the current request on unmount\n      lastRequestId.current += 1;\n    };\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useLazyRef","debounce","warnOnce","isDeepEqual","GRID_ROOT_GROUP_ID","runIf","GridStrategyGroup","useGridSelector","gridPaginationModelSelector","gridGetRowsParamsSelector","CacheChunkManager","DataSourceRowsUpdateStrategy","GridDataSourceCacheDefault","GridGetRowsError","GridUpdateRowError","noopCache","clear","get","undefined","set","getCache","cacheProp","options","arguments","length","useGridDataSourceBase","apiRef","props","_props$dataSource2","_props$dataSource3","setStrategyAvailability","useCallback","current","DataSource","Default","dataSource","defaultRowsUpdateStrategyActive","setDefaultRowsUpdateStrategyActive","useState","paginationModel","lastRequestId","useRef","onDataSourceErrorProp","onDataSourceError","cacheChunkManager","pagination","pageSize","sortedPageSizeOptions","pageSizeOptions","map","option","value","sort","a","b","cacheChunkSize","Math","min","cache","setCache","dataSourceCache","cacheOptions","fetchRows","parentId","params","_props$dataSource","_options$clearDataSou","getRows","signature","_options$fetchRowChil","fetchRowChildren","call","clearDataSourceState","_ref","skipCache","getRowsParams","fetchParams","unstable_applyPipeProcessors","cacheKeys","getCacheKeys","responses","cacheKey","every","response","applyStrategyProcessor","mergeResponses","getRowsCount","setLoading","requestId","getRowsResponse","cacheResponses","splitResponse","forEach","key","originalError","error","message","cause","process","env","NODE_ENV","handleStrategyActivityChange","getActiveStrategy","handleDataUpdate","setRows","rowCount","setRowCount","rows","dataSourceUpdateRow","updateRow","handleEditRowOption","handleEditRow","editRow","finalRowUpdate","updateNestedRows","previousRow","errorThrown","dataSourceApi","debouncedFetchRows","useMemo","isFirstRender","useEffect","newCache","prevCache","api","public","strategyProcessor","strategyName","group","processor","events","strategyAvailabilityChange","sortModelChange","filterModelChange","paginationModelChange"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/dataSource/useGridDataSourceBase.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"skipCache\"];\nimport * as React from 'react';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport debounce from '@mui/utils/debounce';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { GRID_ROOT_GROUP_ID } from \"../rows/gridRowsUtils.js\";\nimport { runIf } from \"../../../utils/utils.js\";\nimport { GridStrategyGroup } from \"../../core/strategyProcessing/index.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridPaginationModelSelector } from \"../pagination/gridPaginationSelector.js\";\nimport { gridGetRowsParamsSelector } from \"./gridDataSourceSelector.js\";\nimport { CacheChunkManager, DataSourceRowsUpdateStrategy } from \"./utils.js\";\nimport { GridDataSourceCacheDefault } from \"./cache.js\";\nimport { GridGetRowsError, GridUpdateRowError } from \"./gridDataSourceError.js\";\nconst noopCache = {\n  clear: () => {},\n  get: () => undefined,\n  set: () => {}\n};\nfunction getCache(cacheProp, options = {}) {\n  if (cacheProp === null) {\n    return noopCache;\n  }\n  return cacheProp ?? new GridDataSourceCacheDefault(options);\n}\nexport const useGridDataSourceBase = (apiRef, props, options = {}) => {\n  const setStrategyAvailability = React.useCallback(() => {\n    apiRef.current.setStrategyAvailability(GridStrategyGroup.DataSource, DataSourceRowsUpdateStrategy.Default, props.dataSource ? () => true : () => false);\n  }, [apiRef, props.dataSource]);\n  const [defaultRowsUpdateStrategyActive, setDefaultRowsUpdateStrategyActive] = React.useState(false);\n  const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);\n  const lastRequestId = React.useRef(0);\n  const onDataSourceErrorProp = props.onDataSourceError;\n  const cacheChunkManager = useLazyRef(() => {\n    if (!props.pagination) {\n      return new CacheChunkManager(paginationModel.pageSize);\n    }\n    const sortedPageSizeOptions = props.pageSizeOptions.map(option => typeof option === 'number' ? option : option.value).sort((a, b) => a - b);\n    const cacheChunkSize = Math.min(paginationModel.pageSize, sortedPageSizeOptions[0]);\n    return new CacheChunkManager(cacheChunkSize);\n  }).current;\n  const [cache, setCache] = React.useState(() => getCache(props.dataSourceCache, options.cacheOptions));\n  const fetchRows = React.useCallback(async (parentId, params) => {\n    const getRows = props.dataSource?.getRows;\n    if (!getRows) {\n      return;\n    }\n    if (parentId && parentId !== GRID_ROOT_GROUP_ID && props.signature !== 'DataGrid') {\n      options.fetchRowChildren?.([parentId]);\n      return;\n    }\n    options.clearDataSourceState?.();\n    const _ref = params || {},\n      {\n        skipCache\n      } = _ref,\n      getRowsParams = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const fetchParams = _extends({}, gridGetRowsParamsSelector(apiRef), apiRef.current.unstable_applyPipeProcessors('getRowsParams', {}), getRowsParams);\n    const cacheKeys = cacheChunkManager.getCacheKeys(fetchParams);\n    const responses = cacheKeys.map(cacheKey => cache.get(cacheKey));\n    if (!skipCache && responses.every(response => response !== undefined)) {\n      apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n        response: CacheChunkManager.mergeResponses(responses),\n        fetchParams\n      });\n      return;\n    }\n\n    // Manage loading state only for the default strategy\n    if (defaultRowsUpdateStrategyActive || apiRef.current.getRowsCount() === 0) {\n      apiRef.current.setLoading(true);\n    }\n    const requestId = lastRequestId.current + 1;\n    lastRequestId.current = requestId;\n    try {\n      const getRowsResponse = await getRows(fetchParams);\n      const cacheResponses = cacheChunkManager.splitResponse(fetchParams, getRowsResponse);\n      cacheResponses.forEach((response, key) => cache.set(key, response));\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          response: getRowsResponse,\n          fetchParams\n        });\n      }\n    } catch (originalError) {\n      if (lastRequestId.current === requestId) {\n        apiRef.current.applyStrategyProcessor('dataSourceRowsUpdate', {\n          error: originalError,\n          fetchParams\n        });\n        if (typeof onDataSourceErrorProp === 'function') {\n          onDataSourceErrorProp(new GridGetRowsError({\n            message: originalError?.message,\n            params: fetchParams,\n            cause: originalError\n          }));\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `dataSource.getRows()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n        }\n      }\n    } finally {\n      if (defaultRowsUpdateStrategyActive && lastRequestId.current === requestId) {\n        apiRef.current.setLoading(false);\n      }\n    }\n  }, [cacheChunkManager, cache, apiRef, defaultRowsUpdateStrategyActive, props.dataSource?.getRows, onDataSourceErrorProp, options, props.signature]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    setDefaultRowsUpdateStrategyActive(apiRef.current.getActiveStrategy(GridStrategyGroup.DataSource) === DataSourceRowsUpdateStrategy.Default);\n  }, [apiRef]);\n  const handleDataUpdate = React.useCallback(params => {\n    if ('error' in params) {\n      apiRef.current.setRows([]);\n      return;\n    }\n    const {\n      response\n    } = params;\n    if (response.rowCount !== undefined) {\n      apiRef.current.setRowCount(response.rowCount);\n    }\n    apiRef.current.setRows(response.rows);\n    apiRef.current.unstable_applyPipeProcessors('processDataSourceRows', {\n      params: params.fetchParams,\n      response\n    }, true);\n  }, [apiRef]);\n  const dataSourceUpdateRow = props.dataSource?.updateRow;\n  const handleEditRowOption = options.handleEditRow;\n  const editRow = React.useCallback(async params => {\n    if (!dataSourceUpdateRow) {\n      return undefined;\n    }\n    try {\n      const finalRowUpdate = await dataSourceUpdateRow(params);\n      if (typeof handleEditRowOption === 'function') {\n        handleEditRowOption(params, finalRowUpdate);\n        return finalRowUpdate;\n      }\n      apiRef.current.updateNestedRows([finalRowUpdate], []);\n      if (finalRowUpdate && !isDeepEqual(finalRowUpdate, params.previousRow)) {\n        // Reset the outdated cache, only if the row is _actually_ updated\n        apiRef.current.dataSource.cache.clear();\n      }\n      return finalRowUpdate;\n    } catch (errorThrown) {\n      if (typeof onDataSourceErrorProp === 'function') {\n        onDataSourceErrorProp(new GridUpdateRowError({\n          message: errorThrown?.message,\n          params,\n          cause: errorThrown\n        }));\n      } else if (process.env.NODE_ENV !== 'production') {\n        warnOnce(['MUI X: A call to `dataSource.updateRow()` threw an error which was not handled because `onDataSourceError()` is missing.', 'To handle the error pass a callback to the `onDataSourceError` prop, for example `<DataGrid onDataSourceError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/server-side-data/#error-handling.'], 'error');\n      }\n      throw errorThrown; // Let the caller handle the error further\n    }\n  }, [apiRef, dataSourceUpdateRow, onDataSourceErrorProp, handleEditRowOption]);\n  const dataSourceApi = {\n    dataSource: {\n      fetchRows,\n      cache,\n      editRow\n    }\n  };\n  const debouncedFetchRows = React.useMemo(() => debounce(fetchRows, 0), [fetchRows]);\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (props.dataSourceCache === undefined) {\n      return;\n    }\n    const newCache = getCache(props.dataSourceCache, options.cacheOptions);\n    setCache(prevCache => prevCache !== newCache ? newCache : prevCache);\n  }, [props.dataSourceCache, options.cacheOptions]);\n  React.useEffect(() => {\n    if (props.dataSource) {\n      apiRef.current.dataSource.cache.clear();\n      apiRef.current.dataSource.fetchRows();\n    }\n    return () => {\n      // ignore the current request on unmount\n      lastRequestId.current += 1;\n    };\n  }, [apiRef, props.dataSource]);\n  return {\n    api: {\n      public: dataSourceApi\n    },\n    debouncedFetchRows,\n    strategyProcessor: {\n      strategyName: DataSourceRowsUpdateStrategy.Default,\n      group: 'dataSourceRowsUpdate',\n      processor: handleDataUpdate\n    },\n    setStrategyAvailability,\n    cacheChunkManager,\n    cache,\n    events: {\n      strategyAvailabilityChange: handleStrategyActivityChange,\n      sortModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      filterModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows()),\n      paginationModelChange: runIf(defaultRowsUpdateStrategyActive, () => debouncedFetchRows())\n    }\n  };\n};"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAOC,6BAA6B,MAAM,yDAAyD;AACnG,MAAMC,SAAS,GAAG,CAAC,WAAW,CAAC;AAC/B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,2BAA2B,QAAQ,yCAAyC;AACrF,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,SAASC,iBAAiB,EAAEC,4BAA4B,QAAQ,YAAY;AAC5E,SAASC,0BAA0B,QAAQ,YAAY;AACvD,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,0BAA0B;AAC/E,MAAMC,SAAS,GAAG;EAChBC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,GAAG,EAAEA,CAAA,KAAMC,SAAS;EACpBC,GAAG,EAAEA,CAAA,KAAM,CAAC;AACd,CAAC;AACD,SAASC,QAAQA,CAACC,SAAS,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAL,SAAA,GAAAK,SAAA,MAAG,CAAC,CAAC;EACvC,IAAIF,SAAS,KAAK,IAAI,EAAE;IACtB,OAAON,SAAS;EAClB;EACA,OAAOM,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,IAAIT,0BAA0B,CAACU,OAAO,CAAC;AAC7D;AACA,OAAO,MAAMG,qBAAqB,GAAG,SAAAA,CAACC,MAAM,EAAEC,KAAK,EAAmB;EAAA,IAAAC,kBAAA,EAAAC,kBAAA;EAAA,IAAjBP,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAL,SAAA,GAAAK,SAAA,MAAG,CAAC,CAAC;EAC/D,MAAMO,uBAAuB,GAAG/B,KAAK,CAACgC,WAAW,CAAC,MAAM;IACtDL,MAAM,CAACM,OAAO,CAACF,uBAAuB,CAACxB,iBAAiB,CAAC2B,UAAU,EAAEtB,4BAA4B,CAACuB,OAAO,EAAEP,KAAK,CAACQ,UAAU,GAAG,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC;EACzJ,CAAC,EAAE,CAACT,MAAM,EAAEC,KAAK,CAACQ,UAAU,CAAC,CAAC;EAC9B,MAAM,CAACC,+BAA+B,EAAEC,kCAAkC,CAAC,GAAGtC,KAAK,CAACuC,QAAQ,CAAC,KAAK,CAAC;EACnG,MAAMC,eAAe,GAAGhC,eAAe,CAACmB,MAAM,EAAElB,2BAA2B,CAAC;EAC5E,MAAMgC,aAAa,GAAGzC,KAAK,CAAC0C,MAAM,CAAC,CAAC,CAAC;EACrC,MAAMC,qBAAqB,GAAGf,KAAK,CAACgB,iBAAiB;EACrD,MAAMC,iBAAiB,GAAG5C,UAAU,CAAC,MAAM;IACzC,IAAI,CAAC2B,KAAK,CAACkB,UAAU,EAAE;MACrB,OAAO,IAAInC,iBAAiB,CAAC6B,eAAe,CAACO,QAAQ,CAAC;IACxD;IACA,MAAMC,qBAAqB,GAAGpB,KAAK,CAACqB,eAAe,CAACC,GAAG,CAACC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACC,KAAK,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,CAAC;IAC3I,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAClB,eAAe,CAACO,QAAQ,EAAEC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACnF,OAAO,IAAIrC,iBAAiB,CAAC6C,cAAc,CAAC;EAC9C,CAAC,CAAC,CAACvB,OAAO;EACV,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG5D,KAAK,CAACuC,QAAQ,CAAC,MAAMlB,QAAQ,CAACO,KAAK,CAACiC,eAAe,EAAEtC,OAAO,CAACuC,YAAY,CAAC,CAAC;EACrG,MAAMC,SAAS,GAAG/D,KAAK,CAACgC,WAAW,CAAC,OAAOgC,QAAQ,EAAEC,MAAM,KAAK;IAAA,IAAAC,iBAAA,EAAAC,qBAAA;IAC9D,MAAMC,OAAO,IAAAF,iBAAA,GAAGtC,KAAK,CAACQ,UAAU,cAAA8B,iBAAA,uBAAhBA,iBAAA,CAAkBE,OAAO;IACzC,IAAI,CAACA,OAAO,EAAE;MACZ;IACF;IACA,IAAIJ,QAAQ,IAAIA,QAAQ,KAAK3D,kBAAkB,IAAIuB,KAAK,CAACyC,SAAS,KAAK,UAAU,EAAE;MAAA,IAAAC,qBAAA;MACjF,CAAAA,qBAAA,GAAA/C,OAAO,CAACgD,gBAAgB,cAAAD,qBAAA,eAAxBA,qBAAA,CAAAE,IAAA,CAAAjD,OAAO,EAAoB,CAACyC,QAAQ,CAAC,CAAC;MACtC;IACF;IACA,CAAAG,qBAAA,GAAA5C,OAAO,CAACkD,oBAAoB,cAAAN,qBAAA,eAA5BA,qBAAA,CAAAK,IAAA,CAAAjD,OAA+B,CAAC;IAChC,MAAMmD,IAAI,GAAGT,MAAM,IAAI,CAAC,CAAC;MACvB;QACEU;MACF,CAAC,GAAGD,IAAI;MACRE,aAAa,GAAG9E,6BAA6B,CAAC4E,IAAI,EAAE3E,SAAS,CAAC;IAChE,MAAM8E,WAAW,GAAGhF,QAAQ,CAAC,CAAC,CAAC,EAAEa,yBAAyB,CAACiB,MAAM,CAAC,EAAEA,MAAM,CAACM,OAAO,CAAC6C,4BAA4B,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,EAAEF,aAAa,CAAC;IACpJ,MAAMG,SAAS,GAAGlC,iBAAiB,CAACmC,YAAY,CAACH,WAAW,CAAC;IAC7D,MAAMI,SAAS,GAAGF,SAAS,CAAC7B,GAAG,CAACgC,QAAQ,IAAIvB,KAAK,CAACzC,GAAG,CAACgE,QAAQ,CAAC,CAAC;IAChE,IAAI,CAACP,SAAS,IAAIM,SAAS,CAACE,KAAK,CAACC,QAAQ,IAAIA,QAAQ,KAAKjE,SAAS,CAAC,EAAE;MACrEQ,MAAM,CAACM,OAAO,CAACoD,sBAAsB,CAAC,sBAAsB,EAAE;QAC5DD,QAAQ,EAAEzE,iBAAiB,CAAC2E,cAAc,CAACL,SAAS,CAAC;QACrDJ;MACF,CAAC,CAAC;MACF;IACF;;IAEA;IACA,IAAIxC,+BAA+B,IAAIV,MAAM,CAACM,OAAO,CAACsD,YAAY,CAAC,CAAC,KAAK,CAAC,EAAE;MAC1E5D,MAAM,CAACM,OAAO,CAACuD,UAAU,CAAC,IAAI,CAAC;IACjC;IACA,MAAMC,SAAS,GAAGhD,aAAa,CAACR,OAAO,GAAG,CAAC;IAC3CQ,aAAa,CAACR,OAAO,GAAGwD,SAAS;IACjC,IAAI;MACF,MAAMC,eAAe,GAAG,MAAMtB,OAAO,CAACS,WAAW,CAAC;MAClD,MAAMc,cAAc,GAAG9C,iBAAiB,CAAC+C,aAAa,CAACf,WAAW,EAAEa,eAAe,CAAC;MACpFC,cAAc,CAACE,OAAO,CAAC,CAACT,QAAQ,EAAEU,GAAG,KAAKnC,KAAK,CAACvC,GAAG,CAAC0E,GAAG,EAAEV,QAAQ,CAAC,CAAC;MACnE,IAAI3C,aAAa,CAACR,OAAO,KAAKwD,SAAS,EAAE;QACvC9D,MAAM,CAACM,OAAO,CAACoD,sBAAsB,CAAC,sBAAsB,EAAE;UAC5DD,QAAQ,EAAEM,eAAe;UACzBb;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOkB,aAAa,EAAE;MACtB,IAAItD,aAAa,CAACR,OAAO,KAAKwD,SAAS,EAAE;QACvC9D,MAAM,CAACM,OAAO,CAACoD,sBAAsB,CAAC,sBAAsB,EAAE;UAC5DW,KAAK,EAAED,aAAa;UACpBlB;QACF,CAAC,CAAC;QACF,IAAI,OAAOlC,qBAAqB,KAAK,UAAU,EAAE;UAC/CA,qBAAqB,CAAC,IAAI7B,gBAAgB,CAAC;YACzCmF,OAAO,EAAEF,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEE,OAAO;YAC/BhC,MAAM,EAAEY,WAAW;YACnBqB,KAAK,EAAEH;UACT,CAAC,CAAC,CAAC;QACL,CAAC,MAAM,IAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UAChDlG,QAAQ,CAAC,CAAC,wHAAwH,EAAE,qIAAqI,EAAE,0FAA0F,CAAC,EAAE,OAAO,CAAC;QAClX;MACF;IACF,CAAC,SAAS;MACR,IAAIkC,+BAA+B,IAAII,aAAa,CAACR,OAAO,KAAKwD,SAAS,EAAE;QAC1E9D,MAAM,CAACM,OAAO,CAACuD,UAAU,CAAC,KAAK,CAAC;MAClC;IACF;EACF,CAAC,EAAE,CAAC3C,iBAAiB,EAAEc,KAAK,EAAEhC,MAAM,EAAEU,+BAA+B,GAAAR,kBAAA,GAAED,KAAK,CAACQ,UAAU,cAAAP,kBAAA,uBAAhBA,kBAAA,CAAkBuC,OAAO,EAAEzB,qBAAqB,EAAEpB,OAAO,EAAEK,KAAK,CAACyC,SAAS,CAAC,CAAC;EACnJ,MAAMiC,4BAA4B,GAAGtG,KAAK,CAACgC,WAAW,CAAC,MAAM;IAC3DM,kCAAkC,CAACX,MAAM,CAACM,OAAO,CAACsE,iBAAiB,CAAChG,iBAAiB,CAAC2B,UAAU,CAAC,KAAKtB,4BAA4B,CAACuB,OAAO,CAAC;EAC7I,CAAC,EAAE,CAACR,MAAM,CAAC,CAAC;EACZ,MAAM6E,gBAAgB,GAAGxG,KAAK,CAACgC,WAAW,CAACiC,MAAM,IAAI;IACnD,IAAI,OAAO,IAAIA,MAAM,EAAE;MACrBtC,MAAM,CAACM,OAAO,CAACwE,OAAO,CAAC,EAAE,CAAC;MAC1B;IACF;IACA,MAAM;MACJrB;IACF,CAAC,GAAGnB,MAAM;IACV,IAAImB,QAAQ,CAACsB,QAAQ,KAAKvF,SAAS,EAAE;MACnCQ,MAAM,CAACM,OAAO,CAAC0E,WAAW,CAACvB,QAAQ,CAACsB,QAAQ,CAAC;IAC/C;IACA/E,MAAM,CAACM,OAAO,CAACwE,OAAO,CAACrB,QAAQ,CAACwB,IAAI,CAAC;IACrCjF,MAAM,CAACM,OAAO,CAAC6C,4BAA4B,CAAC,uBAAuB,EAAE;MACnEb,MAAM,EAAEA,MAAM,CAACY,WAAW;MAC1BO;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,CAACzD,MAAM,CAAC,CAAC;EACZ,MAAMkF,mBAAmB,IAAA/E,kBAAA,GAAGF,KAAK,CAACQ,UAAU,cAAAN,kBAAA,uBAAhBA,kBAAA,CAAkBgF,SAAS;EACvD,MAAMC,mBAAmB,GAAGxF,OAAO,CAACyF,aAAa;EACjD,MAAMC,OAAO,GAAGjH,KAAK,CAACgC,WAAW,CAAC,MAAMiC,MAAM,IAAI;IAChD,IAAI,CAAC4C,mBAAmB,EAAE;MACxB,OAAO1F,SAAS;IAClB;IACA,IAAI;MACF,MAAM+F,cAAc,GAAG,MAAML,mBAAmB,CAAC5C,MAAM,CAAC;MACxD,IAAI,OAAO8C,mBAAmB,KAAK,UAAU,EAAE;QAC7CA,mBAAmB,CAAC9C,MAAM,EAAEiD,cAAc,CAAC;QAC3C,OAAOA,cAAc;MACvB;MACAvF,MAAM,CAACM,OAAO,CAACkF,gBAAgB,CAAC,CAACD,cAAc,CAAC,EAAE,EAAE,CAAC;MACrD,IAAIA,cAAc,IAAI,CAAC9G,WAAW,CAAC8G,cAAc,EAAEjD,MAAM,CAACmD,WAAW,CAAC,EAAE;QACtE;QACAzF,MAAM,CAACM,OAAO,CAACG,UAAU,CAACuB,KAAK,CAAC1C,KAAK,CAAC,CAAC;MACzC;MACA,OAAOiG,cAAc;IACvB,CAAC,CAAC,OAAOG,WAAW,EAAE;MACpB,IAAI,OAAO1E,qBAAqB,KAAK,UAAU,EAAE;QAC/CA,qBAAqB,CAAC,IAAI5B,kBAAkB,CAAC;UAC3CkF,OAAO,EAAEoB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEpB,OAAO;UAC7BhC,MAAM;UACNiC,KAAK,EAAEmB;QACT,CAAC,CAAC,CAAC;MACL,CAAC,MAAM,IAAIlB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QAChDlG,QAAQ,CAAC,CAAC,0HAA0H,EAAE,qIAAqI,EAAE,0FAA0F,CAAC,EAAE,OAAO,CAAC;MACpX;MACA,MAAMkH,WAAW,CAAC,CAAC;IACrB;EACF,CAAC,EAAE,CAAC1F,MAAM,EAAEkF,mBAAmB,EAAElE,qBAAqB,EAAEoE,mBAAmB,CAAC,CAAC;EAC7E,MAAMO,aAAa,GAAG;IACpBlF,UAAU,EAAE;MACV2B,SAAS;MACTJ,KAAK;MACLsD;IACF;EACF,CAAC;EACD,MAAMM,kBAAkB,GAAGvH,KAAK,CAACwH,OAAO,CAAC,MAAMtH,QAAQ,CAAC6D,SAAS,EAAE,CAAC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EACnF,MAAM0D,aAAa,GAAGzH,KAAK,CAAC0C,MAAM,CAAC,IAAI,CAAC;EACxC1C,KAAK,CAAC0H,SAAS,CAAC,MAAM;IACpB,IAAID,aAAa,CAACxF,OAAO,EAAE;MACzBwF,aAAa,CAACxF,OAAO,GAAG,KAAK;MAC7B;IACF;IACA,IAAIL,KAAK,CAACiC,eAAe,KAAK1C,SAAS,EAAE;MACvC;IACF;IACA,MAAMwG,QAAQ,GAAGtG,QAAQ,CAACO,KAAK,CAACiC,eAAe,EAAEtC,OAAO,CAACuC,YAAY,CAAC;IACtEF,QAAQ,CAACgE,SAAS,IAAIA,SAAS,KAAKD,QAAQ,GAAGA,QAAQ,GAAGC,SAAS,CAAC;EACtE,CAAC,EAAE,CAAChG,KAAK,CAACiC,eAAe,EAAEtC,OAAO,CAACuC,YAAY,CAAC,CAAC;EACjD9D,KAAK,CAAC0H,SAAS,CAAC,MAAM;IACpB,IAAI9F,KAAK,CAACQ,UAAU,EAAE;MACpBT,MAAM,CAACM,OAAO,CAACG,UAAU,CAACuB,KAAK,CAAC1C,KAAK,CAAC,CAAC;MACvCU,MAAM,CAACM,OAAO,CAACG,UAAU,CAAC2B,SAAS,CAAC,CAAC;IACvC;IACA,OAAO,MAAM;MACX;MACAtB,aAAa,CAACR,OAAO,IAAI,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAACN,MAAM,EAAEC,KAAK,CAACQ,UAAU,CAAC,CAAC;EAC9B,OAAO;IACLyF,GAAG,EAAE;MACHC,MAAM,EAAER;IACV,CAAC;IACDC,kBAAkB;IAClBQ,iBAAiB,EAAE;MACjBC,YAAY,EAAEpH,4BAA4B,CAACuB,OAAO;MAClD8F,KAAK,EAAE,sBAAsB;MAC7BC,SAAS,EAAE1B;IACb,CAAC;IACDzE,uBAAuB;IACvBc,iBAAiB;IACjBc,KAAK;IACLwE,MAAM,EAAE;MACNC,0BAA0B,EAAE9B,4BAA4B;MACxD+B,eAAe,EAAE/H,KAAK,CAAC+B,+BAA+B,EAAE,MAAMkF,kBAAkB,CAAC,CAAC,CAAC;MACnFe,iBAAiB,EAAEhI,KAAK,CAAC+B,+BAA+B,EAAE,MAAMkF,kBAAkB,CAAC,CAAC,CAAC;MACrFgB,qBAAqB,EAAEjI,KAAK,CAAC+B,+BAA+B,EAAE,MAAMkF,kBAAkB,CAAC,CAAC;IAC1F;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}