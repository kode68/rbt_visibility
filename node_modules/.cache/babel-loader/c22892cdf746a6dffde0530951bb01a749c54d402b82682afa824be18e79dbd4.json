{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { gridFilterModelSelector, gridFilterActiveItemsSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridEvent } from \"../../utils/index.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { gridPageCountSelector, gridPaginationModelSelector } from \"./gridPaginationSelector.js\";\nimport { getPageCount, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from \"./gridPaginationUtils.js\";\nexport const getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {\n  var _paginationModelProp$, _paginationModelProp$2;\n  let paginationModel = paginationState.paginationModel;\n  const rowCount = paginationState.rowCount;\n  const pageSize = (_paginationModelProp$ = paginationModelProp === null || paginationModelProp === void 0 ? void 0 : paginationModelProp.pageSize) !== null && _paginationModelProp$ !== void 0 ? _paginationModelProp$ : paginationModel.pageSize;\n  const page = (_paginationModelProp$2 = paginationModelProp === null || paginationModelProp === void 0 ? void 0 : paginationModelProp.page) !== null && _paginationModelProp$2 !== void 0 ? _paginationModelProp$2 : paginationModel.page;\n  const pageCount = getPageCount(rowCount, pageSize, page);\n  if (paginationModelProp && ((paginationModelProp === null || paginationModelProp === void 0 ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp === null || paginationModelProp === void 0 ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n  const validPage = pageSize === -1 ? 0 : getValidPage(paginationModel.page, pageCount);\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return paginationModel;\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridPaginationModel = (apiRef, props) => {\n  var _props$initialState2;\n  const logger = useGridLogger(apiRef, 'useGridPaginationModel');\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const previousFilterModel = React.useRef(gridFilterModelSelector(apiRef));\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'paginationModel',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(\"Setting page to \".concat(page));\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(\"Setting page size to \".concat(pageSize));\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }), 'setPaginationModel');\n  }, [apiRef, logger, props.signature]);\n  const paginationModelApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, paginationModelApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    ((_props$initialState = props.initialState) === null || _props$initialState === void 0 || (_props$initialState = _props$initialState.pagination) === null || _props$initialState === void 0 ? void 0 : _props$initialState.paginationModel) != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, (_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 || (_props$initialState2 = _props$initialState2.pagination) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto, _context$stateToResto2;\n    const paginationModel = (_context$stateToResto = context.stateToRestore.pagination) !== null && _context$stateToResto !== void 0 && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) === null || _context$stateToResto2 === void 0 ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }), 'stateRestorePreProcessing');\n    return params;\n  }, [apiRef, props.autoPageSize, props.signature]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = () => {\n    var _apiRef$current$virtu;\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) !== null && _apiRef$current$virtu !== void 0 && _apiRef$current$virtu.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n  };\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    if (!props.autoPageSize) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    const maximumPageSizeWithoutScrollBar = Math.max(1, Math.floor(dimensions.viewportInnerSize.height / rowHeight));\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  const handleRowCountChange = React.useCallback(newRowCount => {\n    if (newRowCount == null) {\n      return;\n    }\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel.page === 0) {\n      return;\n    }\n    const pageCount = gridPageCountSelector(apiRef);\n    if (paginationModel.page > pageCount - 1) {\n      apiRef.current.setPage(Math.max(0, pageCount - 1));\n    }\n  }, [apiRef]);\n\n  /**\n   * Goes to the first row of the grid\n   */\n  const navigateToStart = React.useCallback(() => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel.page !== 0) {\n      apiRef.current.setPage(0);\n    }\n\n    // If the page was not changed it might be needed to scroll to the top\n    const scrollPosition = apiRef.current.getScrollPosition();\n    if (scrollPosition.top !== 0) {\n      apiRef.current.scroll({\n        top: 0\n      });\n    }\n  }, [apiRef]);\n\n  /**\n   * Resets the page only if the active items or quick filter has changed from the last time.\n   * This is to avoid resetting the page when the filter model is changed\n   * because of and update of the operator from an item that does not have the value\n   * or reseting when the filter panel is just opened\n   */\n  const handleFilterModelChange = React.useCallback(filterModel => {\n    const currentActiveFilters = _extends({}, filterModel, {\n      // replace items with the active items\n      items: gridFilterActiveItemsSelector(apiRef)\n    });\n    if (isDeepEqual(currentActiveFilters, previousFilterModel.current)) {\n      return;\n    }\n    previousFilterModel.current = currentActiveFilters;\n    navigateToStart();\n  }, [apiRef, navigateToStart]);\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridEvent(apiRef, 'paginationModelChange', handlePaginationModelChange);\n  useGridEvent(apiRef, 'rowCountChange', handleRowCountChange);\n  useGridEvent(apiRef, 'sortModelChange', navigateToStart);\n  useGridEvent(apiRef, 'filterModelChange', handleFilterModelChange);\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (!props.pagination) {\n      return;\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)\n      })\n    }));\n  }, [apiRef, props.paginationModel, props.signature, props.pagination]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const isEnabled = props.pagination === true;\n      if (state.pagination.paginationMode === props.paginationMode || state.pagination.enabled === isEnabled) {\n        return state;\n      }\n      return _extends({}, state, {\n        pagination: _extends({}, state.pagination, {\n          paginationMode: props.paginationMode,\n          enabled: props.pagination === true\n        })\n      });\n    });\n  }, [apiRef, props.paginationMode, props.pagination]);\n  React.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);\n};","map":{"version":3,"names":["_extends","React","isDeepEqual","gridFilterModelSelector","gridFilterActiveItemsSelector","gridDensityFactorSelector","useGridLogger","useGridSelector","useGridApiMethod","useGridEvent","useGridRegisterPipeProcessor","gridPageCountSelector","gridPaginationModelSelector","getPageCount","defaultPageSize","throwIfPageSizeExceedsTheLimit","getDefaultGridPaginationModel","getValidPage","getDerivedPaginationModel","paginationState","signature","paginationModelProp","_paginationModelProp$","_paginationModelProp$2","paginationModel","rowCount","pageSize","page","pageCount","validPage","useGridPaginationModel","apiRef","props","_props$initialState2","logger","densityFactor","previousFilterModel","useRef","rowHeight","Math","floor","current","registerControlState","stateId","propModel","propOnChange","onPaginationModelChange","stateSelector","changeEvent","setPage","useCallback","currentModel","debug","concat","setPaginationModel","setPageSize","setState","state","pagination","paginationModelApi","stateExportPreProcessing","prevState","context","_props$initialState","shouldExportPaginationModel","exportOnlyDirtyModels","initialState","autoPageSize","stateRestorePreProcessing","params","_context$stateToResto","_context$stateToResto2","stateToRestore","handlePaginationModelChange","_apiRef$current$virtu","virtualScrollerRef","scrollToIndexes","rowIndex","handleUpdateAutoPageSize","dimensions","getRootDimensions","maximumPageSizeWithoutScrollBar","max","viewportInnerSize","height","handleRowCountChange","newRowCount","navigateToStart","scrollPosition","getScrollPosition","top","scroll","handleFilterModelChange","filterModel","currentActiveFilters","items","isFirstRender","useEffect","isEnabled","paginationMode","enabled"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/pagination/useGridPaginationModel.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { isDeepEqual } from '@mui/x-internals/isDeepEqual';\nimport { gridFilterModelSelector, gridFilterActiveItemsSelector } from \"../filter/gridFilterSelector.js\";\nimport { gridDensityFactorSelector } from \"../density/index.js\";\nimport { useGridLogger, useGridSelector, useGridApiMethod, useGridEvent } from \"../../utils/index.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { gridPageCountSelector, gridPaginationModelSelector } from \"./gridPaginationSelector.js\";\nimport { getPageCount, defaultPageSize, throwIfPageSizeExceedsTheLimit, getDefaultGridPaginationModel, getValidPage } from \"./gridPaginationUtils.js\";\nexport const getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {\n  let paginationModel = paginationState.paginationModel;\n  const rowCount = paginationState.rowCount;\n  const pageSize = paginationModelProp?.pageSize ?? paginationModel.pageSize;\n  const page = paginationModelProp?.page ?? paginationModel.page;\n  const pageCount = getPageCount(rowCount, pageSize, page);\n  if (paginationModelProp && (paginationModelProp?.page !== paginationModel.page || paginationModelProp?.pageSize !== paginationModel.pageSize)) {\n    paginationModel = paginationModelProp;\n  }\n  const validPage = pageSize === -1 ? 0 : getValidPage(paginationModel.page, pageCount);\n  if (validPage !== paginationModel.page) {\n    paginationModel = _extends({}, paginationModel, {\n      page: validPage\n    });\n  }\n  throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);\n  return paginationModel;\n};\n\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport const useGridPaginationModel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPaginationModel');\n  const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);\n  const previousFilterModel = React.useRef(gridFilterModelSelector(apiRef));\n  const rowHeight = Math.floor(props.rowHeight * densityFactor);\n  apiRef.current.registerControlState({\n    stateId: 'paginationModel',\n    propModel: props.paginationModel,\n    propOnChange: props.onPaginationModelChange,\n    stateSelector: gridPaginationModelSelector,\n    changeEvent: 'paginationModelChange'\n  });\n\n  /**\n   * API METHODS\n   */\n  const setPage = React.useCallback(page => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (page === currentModel.page) {\n      return;\n    }\n    logger.debug(`Setting page to ${page}`);\n    apiRef.current.setPaginationModel({\n      page,\n      pageSize: currentModel.pageSize\n    });\n  }, [apiRef, logger]);\n  const setPageSize = React.useCallback(pageSize => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (pageSize === currentModel.pageSize) {\n      return;\n    }\n    logger.debug(`Setting page size to ${pageSize}`);\n    apiRef.current.setPaginationModel({\n      pageSize,\n      page: currentModel.page\n    });\n  }, [apiRef, logger]);\n  const setPaginationModel = React.useCallback(paginationModel => {\n    const currentModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel === currentModel) {\n      return;\n    }\n    logger.debug(\"Setting 'paginationModel' to\", paginationModel);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }), 'setPaginationModel');\n  }, [apiRef, logger, props.signature]);\n  const paginationModelApi = {\n    setPage,\n    setPageSize,\n    setPaginationModel\n  };\n  useGridApiMethod(apiRef, paginationModelApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    const shouldExportPaginationModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the `paginationModel` is controlled\n    props.paginationModel != null ||\n    // Always export if the `paginationModel` has been initialized\n    props.initialState?.pagination?.paginationModel != null ||\n    // Export if `page` or `pageSize` is not equal to the default value\n    paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize);\n    if (!shouldExportPaginationModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      pagination: _extends({}, prevState.pagination, {\n        paginationModel\n      })\n    });\n  }, [apiRef, props.paginationModel, props.initialState?.pagination?.paginationModel, props.autoPageSize]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const paginationModel = context.stateToRestore.pagination?.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), context.stateToRestore.pagination?.paginationModel) : gridPaginationModelSelector(apiRef);\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)\n      })\n    }), 'stateRestorePreProcessing');\n    return params;\n  }, [apiRef, props.autoPageSize, props.signature]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n\n  /**\n   * EVENTS\n   */\n  const handlePaginationModelChange = () => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (apiRef.current.virtualScrollerRef?.current) {\n      apiRef.current.scrollToIndexes({\n        rowIndex: paginationModel.page * paginationModel.pageSize\n      });\n    }\n  };\n  const handleUpdateAutoPageSize = React.useCallback(() => {\n    if (!props.autoPageSize) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    const maximumPageSizeWithoutScrollBar = Math.max(1, Math.floor(dimensions.viewportInnerSize.height / rowHeight));\n    apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);\n  }, [apiRef, props.autoPageSize, rowHeight]);\n  const handleRowCountChange = React.useCallback(newRowCount => {\n    if (newRowCount == null) {\n      return;\n    }\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel.page === 0) {\n      return;\n    }\n    const pageCount = gridPageCountSelector(apiRef);\n    if (paginationModel.page > pageCount - 1) {\n      apiRef.current.setPage(Math.max(0, pageCount - 1));\n    }\n  }, [apiRef]);\n\n  /**\n   * Goes to the first row of the grid\n   */\n  const navigateToStart = React.useCallback(() => {\n    const paginationModel = gridPaginationModelSelector(apiRef);\n    if (paginationModel.page !== 0) {\n      apiRef.current.setPage(0);\n    }\n\n    // If the page was not changed it might be needed to scroll to the top\n    const scrollPosition = apiRef.current.getScrollPosition();\n    if (scrollPosition.top !== 0) {\n      apiRef.current.scroll({\n        top: 0\n      });\n    }\n  }, [apiRef]);\n\n  /**\n   * Resets the page only if the active items or quick filter has changed from the last time.\n   * This is to avoid resetting the page when the filter model is changed\n   * because of and update of the operator from an item that does not have the value\n   * or reseting when the filter panel is just opened\n   */\n  const handleFilterModelChange = React.useCallback(filterModel => {\n    const currentActiveFilters = _extends({}, filterModel, {\n      // replace items with the active items\n      items: gridFilterActiveItemsSelector(apiRef)\n    });\n    if (isDeepEqual(currentActiveFilters, previousFilterModel.current)) {\n      return;\n    }\n    previousFilterModel.current = currentActiveFilters;\n    navigateToStart();\n  }, [apiRef, navigateToStart]);\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleUpdateAutoPageSize);\n  useGridEvent(apiRef, 'paginationModelChange', handlePaginationModelChange);\n  useGridEvent(apiRef, 'rowCountChange', handleRowCountChange);\n  useGridEvent(apiRef, 'sortModelChange', navigateToStart);\n  useGridEvent(apiRef, 'filterModelChange', handleFilterModelChange);\n\n  /**\n   * EFFECTS\n   */\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (!props.pagination) {\n      return;\n    }\n    apiRef.current.setState(state => _extends({}, state, {\n      pagination: _extends({}, state.pagination, {\n        paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)\n      })\n    }));\n  }, [apiRef, props.paginationModel, props.signature, props.pagination]);\n  React.useEffect(() => {\n    apiRef.current.setState(state => {\n      const isEnabled = props.pagination === true;\n      if (state.pagination.paginationMode === props.paginationMode || state.pagination.enabled === isEnabled) {\n        return state;\n      }\n      return _extends({}, state, {\n        pagination: _extends({}, state.pagination, {\n          paginationMode: props.paginationMode,\n          enabled: props.pagination === true\n        })\n      });\n    });\n  }, [apiRef, props.paginationMode, props.pagination]);\n  React.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}