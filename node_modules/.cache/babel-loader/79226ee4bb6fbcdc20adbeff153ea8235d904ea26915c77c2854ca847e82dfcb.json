{"ast":null,"code":"import { Dimensions } from \"./dimensions.js\";\nimport { Virtualization } from \"./virtualization.js\";\n\n/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n\nconst selectors = {};\nexport const Keyboard = {\n  initialize: initializeState,\n  use: useKeyboard,\n  selectors\n};\nfunction initializeState(_params) {\n  return {};\n}\nfunction useKeyboard(store, params, _api) {\n  const getViewportPageSize = () => {\n    const dimensions = Dimensions.selectors.dimensions(store.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (params.getRowHeight) {\n      const renderContext = Virtualization.selectors.renderContext(store.state);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, params.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / dimensions.rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, params.rows.length);\n  };\n  return {\n    getViewportPageSize\n  };\n}","map":{"version":3,"names":["Dimensions","Virtualization","selectors","Keyboard","initialize","initializeState","use","useKeyboard","_params","store","params","_api","getViewportPageSize","dimensions","state","isReady","getRowHeight","renderContext","viewportPageSize","lastRowIndex","firstRowIndex","Math","min","rows","length","maximumPageSizeWithoutScrollBar","floor","viewportInnerSize","height","rowHeight"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-virtualizer/esm/features/keyboard.js"],"sourcesContent":["import { Dimensions } from \"./dimensions.js\";\nimport { Virtualization } from \"./virtualization.js\";\n\n/* eslint-disable import/export, @typescript-eslint/no-redeclare */\n\nconst selectors = {};\nexport const Keyboard = {\n  initialize: initializeState,\n  use: useKeyboard,\n  selectors\n};\nfunction initializeState(_params) {\n  return {};\n}\nfunction useKeyboard(store, params, _api) {\n  const getViewportPageSize = () => {\n    const dimensions = Dimensions.selectors.dimensions(store.state);\n    if (!dimensions.isReady) {\n      return 0;\n    }\n\n    // TODO: Use a combination of scrollTop, dimensions.viewportInnerSize.height and rowsMeta.possitions\n    // to find out the maximum number of rows that can fit in the visible part of the grid\n    if (params.getRowHeight) {\n      const renderContext = Virtualization.selectors.renderContext(store.state);\n      const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;\n      return Math.min(viewportPageSize - 1, params.rows.length);\n    }\n    const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / dimensions.rowHeight);\n    return Math.min(maximumPageSizeWithoutScrollBar, params.rows.length);\n  };\n  return {\n    getViewportPageSize\n  };\n}"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,cAAc,QAAQ,qBAAqB;;AAEpD;;AAEA,MAAMC,SAAS,GAAG,CAAC,CAAC;AACpB,OAAO,MAAMC,QAAQ,GAAG;EACtBC,UAAU,EAAEC,eAAe;EAC3BC,GAAG,EAAEC,WAAW;EAChBL;AACF,CAAC;AACD,SAASG,eAAeA,CAACG,OAAO,EAAE;EAChC,OAAO,CAAC,CAAC;AACX;AACA,SAASD,WAAWA,CAACE,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAE;EACxC,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,UAAU,GAAGb,UAAU,CAACE,SAAS,CAACW,UAAU,CAACJ,KAAK,CAACK,KAAK,CAAC;IAC/D,IAAI,CAACD,UAAU,CAACE,OAAO,EAAE;MACvB,OAAO,CAAC;IACV;;IAEA;IACA;IACA,IAAIL,MAAM,CAACM,YAAY,EAAE;MACvB,MAAMC,aAAa,GAAGhB,cAAc,CAACC,SAAS,CAACe,aAAa,CAACR,KAAK,CAACK,KAAK,CAAC;MACzE,MAAMI,gBAAgB,GAAGD,aAAa,CAACE,YAAY,GAAGF,aAAa,CAACG,aAAa;MACjF,OAAOC,IAAI,CAACC,GAAG,CAACJ,gBAAgB,GAAG,CAAC,EAAER,MAAM,CAACa,IAAI,CAACC,MAAM,CAAC;IAC3D;IACA,MAAMC,+BAA+B,GAAGJ,IAAI,CAACK,KAAK,CAACb,UAAU,CAACc,iBAAiB,CAACC,MAAM,GAAGf,UAAU,CAACgB,SAAS,CAAC;IAC9G,OAAOR,IAAI,CAACC,GAAG,CAACG,+BAA+B,EAAEf,MAAM,CAACa,IAAI,CAACC,MAAM,CAAC;EACtE,CAAC;EACD,OAAO;IACLZ;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}