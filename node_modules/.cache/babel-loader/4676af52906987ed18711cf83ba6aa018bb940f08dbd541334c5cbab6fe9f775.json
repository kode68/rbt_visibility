{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnLookupSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from \"./gridSortingSelector.js\";\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from \"../rows/index.js\";\nimport { useFirstRender } from \"../../utils/useFirstRender.js\";\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from \"../../core/strategyProcessing/index.js\";\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from \"./gridSortingUtils.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { getTreeNodeDescendants } from \"../rows/gridRowsUtils.js\";\nexport const sortingStateInitializer = (state, props) => {\n  const sortModel = props.sortModel ?? props.initialState?.sorting?.sortModel ?? [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n    if (existingIdx > -1) {\n      if (sortItem?.sort == null) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n    if (existing) {\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort === undefined ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {\n      return columnMenuItems;\n    }\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n    return columnMenuItems;\n  }, [props.sortingOrder, props.disableColumnSorting]);\n\n  /**\n   * API METHODS\n   */\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n      const sortModel = gridSortModelSelector(apiRef);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((field, direction, allowMultipleSorting) => {\n    const column = apiRef.current.getColumn(field);\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = sortItem?.sort == null ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.sortModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.sorting?.sortModel != null ||\n    // Export if the model is not empty\n    sortModelToExport.length > 0;\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, props.initialState?.sorting?.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const sortModel = context.stateToRestore.sorting?.sortModel;\n    if (sortModel == null) {\n      return params;\n    }\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnHeaderClick = React.useCallback((_ref, event) => {\n    let {\n      field,\n      colDef\n    } = _ref;\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    const allowMultipleSorting = props.multipleColumnsSortingMode === 'always' || event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(field, undefined, allowMultipleSorting);\n  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);\n  const handleColumnHeaderKeyDown = React.useCallback((_ref2, event) => {\n    let {\n      field,\n      colDef\n    } = _ref2;\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    // Ctrl + Enter opens the column menu\n    if (event.key === 'Enter' && !event.ctrlKey && !event.metaKey) {\n      sortColumn(field, undefined, props.multipleColumnsSortingMode === 'always' || event.shiftKey);\n    }\n  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridEvent(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridEvent(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridEvent(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridEvent(apiRef, 'columnsChange', handleColumnsChange);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};","map":{"version":3,"names":["_extends","React","useEnhancedEffect","useGridEvent","useGridApiMethod","useGridLogger","gridColumnLookupSelector","gridSortedRowEntriesSelector","gridSortedRowIdsSelector","gridSortModelSelector","GRID_ROOT_GROUP_ID","gridRowTreeSelector","useFirstRender","useGridRegisterStrategyProcessor","GRID_DEFAULT_STRATEGY","buildAggregatedSortingApplier","mergeStateWithSortModel","getNextGridSortDirection","sanitizeSortModel","useGridRegisterPipeProcessor","getTreeNodeDescendants","sortingStateInitializer","state","props","sortModel","initialState","sorting","disableMultipleColumnsSorting","sortedRows","useGridSorting","apiRef","logger","current","registerControlState","stateId","propModel","propOnChange","onSortModelChange","stateSelector","changeEvent","upsertSortModel","useCallback","field","sortItem","existingIdx","findIndex","c","newSortModel","sort","splice","createSortItem","col","directionOverride","existing","find","nextSort","undefined","sortingOrder","addColumnMenuItem","columnMenuItems","colDef","sortable","disableColumnSorting","some","item","applySorting","setState","sortingMode","debug","sortRowList","applyStrategyProcessor","publishEvent","setSortModel","model","currentModel","sortColumn","direction","allowMultipleSorting","column","getColumn","getSortModel","getSortedRows","map","row","getSortedRowIds","getRowIdFromRowIndex","index","sortApi","stateExportPreProcessing","prevState","context","sortModelToExport","shouldExportSortModel","exportOnlyDirtyModels","length","stateRestorePreProcessing","params","stateToRestore","callbacks","flatSortingMethod","rowTree","rootGroupNode","sortedChildren","children","childId","footerId","push","handleColumnHeaderClick","_ref","event","multipleColumnsSortingMode","shiftKey","metaKey","ctrlKey","handleColumnHeaderKeyDown","_ref2","key","handleColumnsChange","latestColumns","newModel","filter","handleStrategyProcessorChange","methodName"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/sorting/useGridSorting.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnLookupSelector } from \"../columns/gridColumnsSelector.js\";\nimport { gridSortedRowEntriesSelector, gridSortedRowIdsSelector, gridSortModelSelector } from \"./gridSortingSelector.js\";\nimport { GRID_ROOT_GROUP_ID, gridRowTreeSelector } from \"../rows/index.js\";\nimport { useFirstRender } from \"../../utils/useFirstRender.js\";\nimport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY } from \"../../core/strategyProcessing/index.js\";\nimport { buildAggregatedSortingApplier, mergeStateWithSortModel, getNextGridSortDirection, sanitizeSortModel } from \"./gridSortingUtils.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { getTreeNodeDescendants } from \"../rows/gridRowsUtils.js\";\nexport const sortingStateInitializer = (state, props) => {\n  const sortModel = props.sortModel ?? props.initialState?.sorting?.sortModel ?? [];\n  return _extends({}, state, {\n    sorting: {\n      sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),\n      sortedRows: []\n    }\n  });\n};\n\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\nexport const useGridSorting = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSorting');\n  apiRef.current.registerControlState({\n    stateId: 'sortModel',\n    propModel: props.sortModel,\n    propOnChange: props.onSortModelChange,\n    stateSelector: gridSortModelSelector,\n    changeEvent: 'sortModelChange'\n  });\n  const upsertSortModel = React.useCallback((field, sortItem) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existingIdx = sortModel.findIndex(c => c.field === field);\n    let newSortModel = [...sortModel];\n    if (existingIdx > -1) {\n      if (sortItem?.sort == null) {\n        newSortModel.splice(existingIdx, 1);\n      } else {\n        newSortModel.splice(existingIdx, 1, sortItem);\n      }\n    } else {\n      newSortModel = [...sortModel, sortItem];\n    }\n    return newSortModel;\n  }, [apiRef]);\n  const createSortItem = React.useCallback((col, directionOverride) => {\n    const sortModel = gridSortModelSelector(apiRef);\n    const existing = sortModel.find(c => c.field === col.field);\n    if (existing) {\n      const nextSort = directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder, existing.sort) : directionOverride;\n      return nextSort === undefined ? undefined : _extends({}, existing, {\n        sort: nextSort\n      });\n    }\n    return {\n      field: col.field,\n      sort: directionOverride === undefined ? getNextGridSortDirection(col.sortingOrder ?? props.sortingOrder) : directionOverride\n    };\n  }, [apiRef, props.sortingOrder]);\n  const addColumnMenuItem = React.useCallback((columnMenuItems, colDef) => {\n    if (colDef == null || colDef.sortable === false || props.disableColumnSorting) {\n      return columnMenuItems;\n    }\n    const sortingOrder = colDef.sortingOrder || props.sortingOrder;\n    if (sortingOrder.some(item => !!item)) {\n      return [...columnMenuItems, 'columnMenuSortItem'];\n    }\n    return columnMenuItems;\n  }, [props.sortingOrder, props.disableColumnSorting]);\n\n  /**\n   * API METHODS\n   */\n  const applySorting = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (props.sortingMode === 'server') {\n        logger.debug('Skipping sorting rows as sortingMode = server');\n        return _extends({}, state, {\n          sorting: _extends({}, state.sorting, {\n            sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)\n          })\n        });\n      }\n      const sortModel = gridSortModelSelector(apiRef);\n      const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);\n      const sortedRows = apiRef.current.applyStrategyProcessor('sorting', {\n        sortRowList\n      });\n      return _extends({}, state, {\n        sorting: _extends({}, state.sorting, {\n          sortedRows\n        })\n      });\n    });\n    apiRef.current.publishEvent('sortedRowsSet');\n  }, [apiRef, logger, props.sortingMode]);\n  const setSortModel = React.useCallback(model => {\n    const currentModel = gridSortModelSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting sort model`);\n      apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));\n      apiRef.current.applySorting();\n    }\n  }, [apiRef, logger, props.disableMultipleColumnsSorting]);\n  const sortColumn = React.useCallback((field, direction, allowMultipleSorting) => {\n    const column = apiRef.current.getColumn(field);\n    const sortItem = createSortItem(column, direction);\n    let sortModel;\n    if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {\n      sortModel = sortItem?.sort == null ? [] : [sortItem];\n    } else {\n      sortModel = upsertSortModel(column.field, sortItem);\n    }\n    apiRef.current.setSortModel(sortModel);\n  }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);\n  const getSortModel = React.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);\n  const getSortedRows = React.useCallback(() => {\n    const sortedRows = gridSortedRowEntriesSelector(apiRef);\n    return sortedRows.map(row => row.model);\n  }, [apiRef]);\n  const getSortedRowIds = React.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);\n  const getRowIdFromRowIndex = React.useCallback(index => apiRef.current.getSortedRowIds()[index], [apiRef]);\n  const sortApi = {\n    getSortModel,\n    getSortedRows,\n    getSortedRowIds,\n    getRowIdFromRowIndex,\n    setSortModel,\n    sortColumn,\n    applySorting\n  };\n  useGridApiMethod(apiRef, sortApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const sortModelToExport = gridSortModelSelector(apiRef);\n    const shouldExportSortModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.sortModel != null ||\n    // Always export if the model has been initialized\n    props.initialState?.sorting?.sortModel != null ||\n    // Export if the model is not empty\n    sortModelToExport.length > 0;\n    if (!shouldExportSortModel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      sorting: {\n        sortModel: sortModelToExport\n      }\n    });\n  }, [apiRef, props.sortModel, props.initialState?.sorting?.sortModel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const sortModel = context.stateToRestore.sorting?.sortModel;\n    if (sortModel == null) {\n      return params;\n    }\n    apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));\n    return _extends({}, params, {\n      callbacks: [...params.callbacks, apiRef.current.applySorting]\n    });\n  }, [apiRef, props.disableMultipleColumnsSorting]);\n  const flatSortingMethod = React.useCallback(params => {\n    const rowTree = gridRowTreeSelector(apiRef);\n    const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];\n    const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map(childId => rowTree[childId])) : [...rootGroupNode.children];\n    if (rootGroupNode.footerId != null) {\n      sortedChildren.push(rootGroupNode.footerId);\n    }\n    return sortedChildren;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'sorting', flatSortingMethod);\n\n  /**\n   * EVENTS\n   */\n  const handleColumnHeaderClick = React.useCallback(({\n    field,\n    colDef\n  }, event) => {\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    const allowMultipleSorting = props.multipleColumnsSortingMode === 'always' || event.shiftKey || event.metaKey || event.ctrlKey;\n    sortColumn(field, undefined, allowMultipleSorting);\n  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);\n  const handleColumnHeaderKeyDown = React.useCallback(({\n    field,\n    colDef\n  }, event) => {\n    if (!colDef.sortable || props.disableColumnSorting) {\n      return;\n    }\n    // Ctrl + Enter opens the column menu\n    if (event.key === 'Enter' && !event.ctrlKey && !event.metaKey) {\n      sortColumn(field, undefined, props.multipleColumnsSortingMode === 'always' || event.shiftKey);\n    }\n  }, [sortColumn, props.disableColumnSorting, props.multipleColumnsSortingMode]);\n  const handleColumnsChange = React.useCallback(() => {\n    // When the columns change we check that the sorted columns are still part of the dataset\n    const sortModel = gridSortModelSelector(apiRef);\n    const latestColumns = gridColumnLookupSelector(apiRef);\n    if (sortModel.length > 0) {\n      const newModel = sortModel.filter(sortItem => latestColumns[sortItem.field]);\n      if (newModel.length < sortModel.length) {\n        apiRef.current.setSortModel(newModel);\n      }\n    }\n  }, [apiRef]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'sorting') {\n      apiRef.current.applySorting();\n    }\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItem);\n  useGridEvent(apiRef, 'columnHeaderClick', handleColumnHeaderClick);\n  useGridEvent(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridEvent(apiRef, 'rowsSet', apiRef.current.applySorting);\n  useGridEvent(apiRef, 'columnsChange', handleColumnsChange);\n  useGridEvent(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n\n  /**\n   * 1ST RENDER\n   */\n  useFirstRender(() => {\n    apiRef.current.applySorting();\n  });\n\n  /**\n   * EFFECTS\n   */\n  useEnhancedEffect(() => {\n    if (props.sortModel !== undefined) {\n      apiRef.current.setSortModel(props.sortModel);\n    }\n  }, [apiRef, props.sortModel]);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,wBAAwB,QAAQ,mCAAmC;AAC5E,SAASC,4BAA4B,EAAEC,wBAAwB,EAAEC,qBAAqB,QAAQ,0BAA0B;AACxH,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,kBAAkB;AAC1E,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,gCAAgC,EAAEC,qBAAqB,QAAQ,wCAAwC;AAChH,SAASC,6BAA6B,EAAEC,uBAAuB,EAAEC,wBAAwB,EAAEC,iBAAiB,QAAQ,uBAAuB;AAC3I,SAASC,4BAA4B,QAAQ,oCAAoC;AACjF,SAASC,sBAAsB,QAAQ,0BAA0B;AACjE,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EACvD,MAAMC,SAAS,GAAGD,KAAK,CAACC,SAAS,IAAID,KAAK,CAACE,YAAY,EAAEC,OAAO,EAAEF,SAAS,IAAI,EAAE;EACjF,OAAOxB,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,EAAE;IACzBI,OAAO,EAAE;MACPF,SAAS,EAAEN,iBAAiB,CAACM,SAAS,EAAED,KAAK,CAACI,6BAA6B,CAAC;MAC5EC,UAAU,EAAE;IACd;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,MAAM,EAAEP,KAAK,KAAK;EAC/C,MAAMQ,MAAM,GAAG1B,aAAa,CAACyB,MAAM,EAAE,gBAAgB,CAAC;EACtDA,MAAM,CAACE,OAAO,CAACC,oBAAoB,CAAC;IAClCC,OAAO,EAAE,WAAW;IACpBC,SAAS,EAAEZ,KAAK,CAACC,SAAS;IAC1BY,YAAY,EAAEb,KAAK,CAACc,iBAAiB;IACrCC,aAAa,EAAE7B,qBAAqB;IACpC8B,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,eAAe,GAAGvC,KAAK,CAACwC,WAAW,CAAC,CAACC,KAAK,EAAEC,QAAQ,KAAK;IAC7D,MAAMnB,SAAS,GAAGf,qBAAqB,CAACqB,MAAM,CAAC;IAC/C,MAAMc,WAAW,GAAGpB,SAAS,CAACqB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACJ,KAAK,KAAKA,KAAK,CAAC;IAC/D,IAAIK,YAAY,GAAG,CAAC,GAAGvB,SAAS,CAAC;IACjC,IAAIoB,WAAW,GAAG,CAAC,CAAC,EAAE;MACpB,IAAID,QAAQ,EAAEK,IAAI,IAAI,IAAI,EAAE;QAC1BD,YAAY,CAACE,MAAM,CAACL,WAAW,EAAE,CAAC,CAAC;MACrC,CAAC,MAAM;QACLG,YAAY,CAACE,MAAM,CAACL,WAAW,EAAE,CAAC,EAAED,QAAQ,CAAC;MAC/C;IACF,CAAC,MAAM;MACLI,YAAY,GAAG,CAAC,GAAGvB,SAAS,EAAEmB,QAAQ,CAAC;IACzC;IACA,OAAOI,YAAY;EACrB,CAAC,EAAE,CAACjB,MAAM,CAAC,CAAC;EACZ,MAAMoB,cAAc,GAAGjD,KAAK,CAACwC,WAAW,CAAC,CAACU,GAAG,EAAEC,iBAAiB,KAAK;IACnE,MAAM5B,SAAS,GAAGf,qBAAqB,CAACqB,MAAM,CAAC;IAC/C,MAAMuB,QAAQ,GAAG7B,SAAS,CAAC8B,IAAI,CAACR,CAAC,IAAIA,CAAC,CAACJ,KAAK,KAAKS,GAAG,CAACT,KAAK,CAAC;IAC3D,IAAIW,QAAQ,EAAE;MACZ,MAAME,QAAQ,GAAGH,iBAAiB,KAAKI,SAAS,GAAGvC,wBAAwB,CAACkC,GAAG,CAACM,YAAY,IAAIlC,KAAK,CAACkC,YAAY,EAAEJ,QAAQ,CAACL,IAAI,CAAC,GAAGI,iBAAiB;MACtJ,OAAOG,QAAQ,KAAKC,SAAS,GAAGA,SAAS,GAAGxD,QAAQ,CAAC,CAAC,CAAC,EAAEqD,QAAQ,EAAE;QACjEL,IAAI,EAAEO;MACR,CAAC,CAAC;IACJ;IACA,OAAO;MACLb,KAAK,EAAES,GAAG,CAACT,KAAK;MAChBM,IAAI,EAAEI,iBAAiB,KAAKI,SAAS,GAAGvC,wBAAwB,CAACkC,GAAG,CAACM,YAAY,IAAIlC,KAAK,CAACkC,YAAY,CAAC,GAAGL;IAC7G,CAAC;EACH,CAAC,EAAE,CAACtB,MAAM,EAAEP,KAAK,CAACkC,YAAY,CAAC,CAAC;EAChC,MAAMC,iBAAiB,GAAGzD,KAAK,CAACwC,WAAW,CAAC,CAACkB,eAAe,EAAEC,MAAM,KAAK;IACvE,IAAIA,MAAM,IAAI,IAAI,IAAIA,MAAM,CAACC,QAAQ,KAAK,KAAK,IAAItC,KAAK,CAACuC,oBAAoB,EAAE;MAC7E,OAAOH,eAAe;IACxB;IACA,MAAMF,YAAY,GAAGG,MAAM,CAACH,YAAY,IAAIlC,KAAK,CAACkC,YAAY;IAC9D,IAAIA,YAAY,CAACM,IAAI,CAACC,IAAI,IAAI,CAAC,CAACA,IAAI,CAAC,EAAE;MACrC,OAAO,CAAC,GAAGL,eAAe,EAAE,oBAAoB,CAAC;IACnD;IACA,OAAOA,eAAe;EACxB,CAAC,EAAE,CAACpC,KAAK,CAACkC,YAAY,EAAElC,KAAK,CAACuC,oBAAoB,CAAC,CAAC;;EAEpD;AACF;AACA;EACE,MAAMG,YAAY,GAAGhE,KAAK,CAACwC,WAAW,CAAC,MAAM;IAC3CX,MAAM,CAACE,OAAO,CAACkC,QAAQ,CAAC5C,KAAK,IAAI;MAC/B,IAAIC,KAAK,CAAC4C,WAAW,KAAK,QAAQ,EAAE;QAClCpC,MAAM,CAACqC,KAAK,CAAC,+CAA+C,CAAC;QAC7D,OAAOpE,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,EAAE;UACzBI,OAAO,EAAE1B,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,CAACI,OAAO,EAAE;YACnCE,UAAU,EAAER,sBAAsB,CAACT,mBAAmB,CAACmB,MAAM,CAAC,EAAEpB,kBAAkB,EAAE,KAAK;UAC3F,CAAC;QACH,CAAC,CAAC;MACJ;MACA,MAAMc,SAAS,GAAGf,qBAAqB,CAACqB,MAAM,CAAC;MAC/C,MAAMuC,WAAW,GAAGtD,6BAA6B,CAACS,SAAS,EAAEM,MAAM,CAAC;MACpE,MAAMF,UAAU,GAAGE,MAAM,CAACE,OAAO,CAACsC,sBAAsB,CAAC,SAAS,EAAE;QAClED;MACF,CAAC,CAAC;MACF,OAAOrE,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,EAAE;QACzBI,OAAO,EAAE1B,QAAQ,CAAC,CAAC,CAAC,EAAEsB,KAAK,CAACI,OAAO,EAAE;UACnCE;QACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;IACFE,MAAM,CAACE,OAAO,CAACuC,YAAY,CAAC,eAAe,CAAC;EAC9C,CAAC,EAAE,CAACzC,MAAM,EAAEC,MAAM,EAAER,KAAK,CAAC4C,WAAW,CAAC,CAAC;EACvC,MAAMK,YAAY,GAAGvE,KAAK,CAACwC,WAAW,CAACgC,KAAK,IAAI;IAC9C,MAAMC,YAAY,GAAGjE,qBAAqB,CAACqB,MAAM,CAAC;IAClD,IAAI4C,YAAY,KAAKD,KAAK,EAAE;MAC1B1C,MAAM,CAACqC,KAAK,CAAC,oBAAoB,CAAC;MAClCtC,MAAM,CAACE,OAAO,CAACkC,QAAQ,CAAClD,uBAAuB,CAACyD,KAAK,EAAElD,KAAK,CAACI,6BAA6B,CAAC,CAAC;MAC5FG,MAAM,CAACE,OAAO,CAACiC,YAAY,CAAC,CAAC;IAC/B;EACF,CAAC,EAAE,CAACnC,MAAM,EAAEC,MAAM,EAAER,KAAK,CAACI,6BAA6B,CAAC,CAAC;EACzD,MAAMgD,UAAU,GAAG1E,KAAK,CAACwC,WAAW,CAAC,CAACC,KAAK,EAAEkC,SAAS,EAAEC,oBAAoB,KAAK;IAC/E,MAAMC,MAAM,GAAGhD,MAAM,CAACE,OAAO,CAAC+C,SAAS,CAACrC,KAAK,CAAC;IAC9C,MAAMC,QAAQ,GAAGO,cAAc,CAAC4B,MAAM,EAAEF,SAAS,CAAC;IAClD,IAAIpD,SAAS;IACb,IAAI,CAACqD,oBAAoB,IAAItD,KAAK,CAACI,6BAA6B,EAAE;MAChEH,SAAS,GAAGmB,QAAQ,EAAEK,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,CAACL,QAAQ,CAAC;IACtD,CAAC,MAAM;MACLnB,SAAS,GAAGgB,eAAe,CAACsC,MAAM,CAACpC,KAAK,EAAEC,QAAQ,CAAC;IACrD;IACAb,MAAM,CAACE,OAAO,CAACwC,YAAY,CAAChD,SAAS,CAAC;EACxC,CAAC,EAAE,CAACM,MAAM,EAAEU,eAAe,EAAEU,cAAc,EAAE3B,KAAK,CAACI,6BAA6B,CAAC,CAAC;EAClF,MAAMqD,YAAY,GAAG/E,KAAK,CAACwC,WAAW,CAAC,MAAMhC,qBAAqB,CAACqB,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACrF,MAAMmD,aAAa,GAAGhF,KAAK,CAACwC,WAAW,CAAC,MAAM;IAC5C,MAAMb,UAAU,GAAGrB,4BAA4B,CAACuB,MAAM,CAAC;IACvD,OAAOF,UAAU,CAACsD,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACV,KAAK,CAAC;EACzC,CAAC,EAAE,CAAC3C,MAAM,CAAC,CAAC;EACZ,MAAMsD,eAAe,GAAGnF,KAAK,CAACwC,WAAW,CAAC,MAAMjC,wBAAwB,CAACsB,MAAM,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAC3F,MAAMuD,oBAAoB,GAAGpF,KAAK,CAACwC,WAAW,CAAC6C,KAAK,IAAIxD,MAAM,CAACE,OAAO,CAACoD,eAAe,CAAC,CAAC,CAACE,KAAK,CAAC,EAAE,CAACxD,MAAM,CAAC,CAAC;EAC1G,MAAMyD,OAAO,GAAG;IACdP,YAAY;IACZC,aAAa;IACbG,eAAe;IACfC,oBAAoB;IACpBb,YAAY;IACZG,UAAU;IACVV;EACF,CAAC;EACD7D,gBAAgB,CAAC0B,MAAM,EAAEyD,OAAO,EAAE,QAAQ,CAAC;;EAE3C;AACF;AACA;EACE,MAAMC,wBAAwB,GAAGvF,KAAK,CAACwC,WAAW,CAAC,CAACgD,SAAS,EAAEC,OAAO,KAAK;IACzE,MAAMC,iBAAiB,GAAGlF,qBAAqB,CAACqB,MAAM,CAAC;IACvD,MAAM8D,qBAAqB;IAC3B;IACA,CAACF,OAAO,CAACG,qBAAqB;IAC9B;IACAtE,KAAK,CAACC,SAAS,IAAI,IAAI;IACvB;IACAD,KAAK,CAACE,YAAY,EAAEC,OAAO,EAAEF,SAAS,IAAI,IAAI;IAC9C;IACAmE,iBAAiB,CAACG,MAAM,GAAG,CAAC;IAC5B,IAAI,CAACF,qBAAqB,EAAE;MAC1B,OAAOH,SAAS;IAClB;IACA,OAAOzF,QAAQ,CAAC,CAAC,CAAC,EAAEyF,SAAS,EAAE;MAC7B/D,OAAO,EAAE;QACPF,SAAS,EAAEmE;MACb;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC7D,MAAM,EAAEP,KAAK,CAACC,SAAS,EAAED,KAAK,CAACE,YAAY,EAAEC,OAAO,EAAEF,SAAS,CAAC,CAAC;EACrE,MAAMuE,yBAAyB,GAAG9F,KAAK,CAACwC,WAAW,CAAC,CAACuD,MAAM,EAAEN,OAAO,KAAK;IACvE,MAAMlE,SAAS,GAAGkE,OAAO,CAACO,cAAc,CAACvE,OAAO,EAAEF,SAAS;IAC3D,IAAIA,SAAS,IAAI,IAAI,EAAE;MACrB,OAAOwE,MAAM;IACf;IACAlE,MAAM,CAACE,OAAO,CAACkC,QAAQ,CAAClD,uBAAuB,CAACQ,SAAS,EAAED,KAAK,CAACI,6BAA6B,CAAC,CAAC;IAChG,OAAO3B,QAAQ,CAAC,CAAC,CAAC,EAAEgG,MAAM,EAAE;MAC1BE,SAAS,EAAE,CAAC,GAAGF,MAAM,CAACE,SAAS,EAAEpE,MAAM,CAACE,OAAO,CAACiC,YAAY;IAC9D,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnC,MAAM,EAAEP,KAAK,CAACI,6BAA6B,CAAC,CAAC;EACjD,MAAMwE,iBAAiB,GAAGlG,KAAK,CAACwC,WAAW,CAACuD,MAAM,IAAI;IACpD,MAAMI,OAAO,GAAGzF,mBAAmB,CAACmB,MAAM,CAAC;IAC3C,MAAMuE,aAAa,GAAGD,OAAO,CAAC1F,kBAAkB,CAAC;IACjD,MAAM4F,cAAc,GAAGN,MAAM,CAAC3B,WAAW,GAAG2B,MAAM,CAAC3B,WAAW,CAACgC,aAAa,CAACE,QAAQ,CAACrB,GAAG,CAACsB,OAAO,IAAIJ,OAAO,CAACI,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGH,aAAa,CAACE,QAAQ,CAAC;IACrJ,IAAIF,aAAa,CAACI,QAAQ,IAAI,IAAI,EAAE;MAClCH,cAAc,CAACI,IAAI,CAACL,aAAa,CAACI,QAAQ,CAAC;IAC7C;IACA,OAAOH,cAAc;EACvB,CAAC,EAAE,CAACxE,MAAM,CAAC,CAAC;EACZX,4BAA4B,CAACW,MAAM,EAAE,aAAa,EAAE0D,wBAAwB,CAAC;EAC7ErE,4BAA4B,CAACW,MAAM,EAAE,cAAc,EAAEiE,yBAAyB,CAAC;EAC/ElF,gCAAgC,CAACiB,MAAM,EAAEhB,qBAAqB,EAAE,SAAS,EAAEqF,iBAAiB,CAAC;;EAE7F;AACF;AACA;EACE,MAAMQ,uBAAuB,GAAG1G,KAAK,CAACwC,WAAW,CAAC,CAAAmE,IAAA,EAG/CC,KAAK,KAAK;IAAA,IAHsC;MACjDnE,KAAK;MACLkB;IACF,CAAC,GAAAgD,IAAA;IACC,IAAI,CAAChD,MAAM,CAACC,QAAQ,IAAItC,KAAK,CAACuC,oBAAoB,EAAE;MAClD;IACF;IACA,MAAMe,oBAAoB,GAAGtD,KAAK,CAACuF,0BAA0B,KAAK,QAAQ,IAAID,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACI,OAAO;IAC9HtC,UAAU,CAACjC,KAAK,EAAEc,SAAS,EAAEqB,oBAAoB,CAAC;EACpD,CAAC,EAAE,CAACF,UAAU,EAAEpD,KAAK,CAACuC,oBAAoB,EAAEvC,KAAK,CAACuF,0BAA0B,CAAC,CAAC;EAC9E,MAAMI,yBAAyB,GAAGjH,KAAK,CAACwC,WAAW,CAAC,CAAA0E,KAAA,EAGjDN,KAAK,KAAK;IAAA,IAHwC;MACnDnE,KAAK;MACLkB;IACF,CAAC,GAAAuD,KAAA;IACC,IAAI,CAACvD,MAAM,CAACC,QAAQ,IAAItC,KAAK,CAACuC,oBAAoB,EAAE;MAClD;IACF;IACA;IACA,IAAI+C,KAAK,CAACO,GAAG,KAAK,OAAO,IAAI,CAACP,KAAK,CAACI,OAAO,IAAI,CAACJ,KAAK,CAACG,OAAO,EAAE;MAC7DrC,UAAU,CAACjC,KAAK,EAAEc,SAAS,EAAEjC,KAAK,CAACuF,0BAA0B,KAAK,QAAQ,IAAID,KAAK,CAACE,QAAQ,CAAC;IAC/F;EACF,CAAC,EAAE,CAACpC,UAAU,EAAEpD,KAAK,CAACuC,oBAAoB,EAAEvC,KAAK,CAACuF,0BAA0B,CAAC,CAAC;EAC9E,MAAMO,mBAAmB,GAAGpH,KAAK,CAACwC,WAAW,CAAC,MAAM;IAClD;IACA,MAAMjB,SAAS,GAAGf,qBAAqB,CAACqB,MAAM,CAAC;IAC/C,MAAMwF,aAAa,GAAGhH,wBAAwB,CAACwB,MAAM,CAAC;IACtD,IAAIN,SAAS,CAACsE,MAAM,GAAG,CAAC,EAAE;MACxB,MAAMyB,QAAQ,GAAG/F,SAAS,CAACgG,MAAM,CAAC7E,QAAQ,IAAI2E,aAAa,CAAC3E,QAAQ,CAACD,KAAK,CAAC,CAAC;MAC5E,IAAI6E,QAAQ,CAACzB,MAAM,GAAGtE,SAAS,CAACsE,MAAM,EAAE;QACtChE,MAAM,CAACE,OAAO,CAACwC,YAAY,CAAC+C,QAAQ,CAAC;MACvC;IACF;EACF,CAAC,EAAE,CAACzF,MAAM,CAAC,CAAC;EACZ,MAAM2F,6BAA6B,GAAGxH,KAAK,CAACwC,WAAW,CAACiF,UAAU,IAAI;IACpE,IAAIA,UAAU,KAAK,SAAS,EAAE;MAC5B5F,MAAM,CAACE,OAAO,CAACiC,YAAY,CAAC,CAAC;IAC/B;EACF,CAAC,EAAE,CAACnC,MAAM,CAAC,CAAC;EACZX,4BAA4B,CAACW,MAAM,EAAE,YAAY,EAAE4B,iBAAiB,CAAC;EACrEvD,YAAY,CAAC2B,MAAM,EAAE,mBAAmB,EAAE6E,uBAAuB,CAAC;EAClExG,YAAY,CAAC2B,MAAM,EAAE,qBAAqB,EAAEoF,yBAAyB,CAAC;EACtE/G,YAAY,CAAC2B,MAAM,EAAE,SAAS,EAAEA,MAAM,CAACE,OAAO,CAACiC,YAAY,CAAC;EAC5D9D,YAAY,CAAC2B,MAAM,EAAE,eAAe,EAAEuF,mBAAmB,CAAC;EAC1DlH,YAAY,CAAC2B,MAAM,EAAE,+BAA+B,EAAE2F,6BAA6B,CAAC;;EAEpF;AACF;AACA;EACE7G,cAAc,CAAC,MAAM;IACnBkB,MAAM,CAACE,OAAO,CAACiC,YAAY,CAAC,CAAC;EAC/B,CAAC,CAAC;;EAEF;AACF;AACA;EACE/D,iBAAiB,CAAC,MAAM;IACtB,IAAIqB,KAAK,CAACC,SAAS,KAAKgC,SAAS,EAAE;MACjC1B,MAAM,CAACE,OAAO,CAACwC,YAAY,CAACjD,KAAK,CAACC,SAAS,CAAC;IAC9C;EACF,CAAC,EAAE,CAACM,MAAM,EAAEP,KAAK,CAACC,SAAS,CAAC,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}