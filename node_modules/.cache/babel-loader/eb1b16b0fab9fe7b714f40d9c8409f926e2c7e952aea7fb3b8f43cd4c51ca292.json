{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowNodeSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionManagerSelector, gridRowSelectionStateSelector, gridRowSelectionCountSelector, gridRowSelectionIdsSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector, gridFilterModelSelector, gridQuickFilterValuesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nimport { createRowSelectionManager } from \"../../../models/gridRowSelectionManager.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nexport const rowSelectionStateInitializer = (state, props) => {\n  var _props$rowSelectionMo;\n  return _extends({}, state, {\n    rowSelection: props.rowSelection ? (_props$rowSelectionMo = props.rowSelectionModel) !== null && _props$rowSelectionMo !== void 0 ? _props$rowSelectionMo : emptyModel : emptyModel\n  });\n};\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  var _props$rowSelectionPr, _props$rowSelectionPr2, _props$rowSelectionPr13, _props$rowSelectionPr14, _props$rowSelectionPr27, _props$rowSelectionPr28, _props$rowSelectionPr33, _props$rowSelectionPr34, _props$rowSelectionPr37, _props$rowSelectionPr39;\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => function () {\n    if (props.rowSelection) {\n      callback(...arguments);\n    }\n  }, [props.rowSelection]);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (((_props$rowSelectionPr = props.rowSelectionPropagation) === null || _props$rowSelectionPr === void 0 ? void 0 : _props$rowSelectionPr.parents) || ((_props$rowSelectionPr2 = props.rowSelectionPropagation) === null || _props$rowSelectionPr2 === void 0 ? void 0 : _props$rowSelectionPr2.descendants)) && isNestedData;\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    var _lastRowToggled$curre;\n    let endId = id;\n    const startId = (_lastRowToggled$curre = lastRowToggled.current) !== null && _lastRowToggled$curre !== void 0 ? _lastRowToggled$curre : id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = useEventCallback(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback((model, reason) => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(\"Setting selection model\");\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }), reason);\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = gridRowSelectionManagerSelector(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if ((rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'footer' || (rowNode === null || rowNode === void 0 ? void 0 : rowNode.type) === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => gridRowSelectionIdsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback(function (id) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(\"Setting selection for row \".concat(id));\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          var _props$rowSelectionPr3, _props$rowSelectionPr4, _props$rowSelectionPr5, _props$rowSelectionPr6;\n          findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr3 = (_props$rowSelectionPr4 = props.rowSelectionPropagation) === null || _props$rowSelectionPr4 === void 0 ? void 0 : _props$rowSelectionPr4.descendants) !== null && _props$rowSelectionPr3 !== void 0 ? _props$rowSelectionPr3 : false, (_props$rowSelectionPr5 = (_props$rowSelectionPr6 = props.rowSelectionPropagation) === null || _props$rowSelectionPr6 === void 0 ? void 0 : _props$rowSelectionPr6.parents) !== null && _props$rowSelectionPr5 !== void 0 ? _props$rowSelectionPr5 : false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel, 'singleRowSelection');\n    } else {\n      logger.debug(\"Toggling selection for row \".concat(id));\n      const selectionModel = gridRowSelectionStateSelector(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          var _props$rowSelectionPr7, _props$rowSelectionPr8, _props$rowSelectionPr9, _props$rowSelectionPr0;\n          findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr7 = (_props$rowSelectionPr8 = props.rowSelectionPropagation) === null || _props$rowSelectionPr8 === void 0 ? void 0 : _props$rowSelectionPr8.descendants) !== null && _props$rowSelectionPr7 !== void 0 ? _props$rowSelectionPr7 : false, (_props$rowSelectionPr9 = (_props$rowSelectionPr0 = props.rowSelectionPropagation) === null || _props$rowSelectionPr0 === void 0 ? void 0 : _props$rowSelectionPr0.parents) !== null && _props$rowSelectionPr9 !== void 0 ? _props$rowSelectionPr9 : false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        var _props$rowSelectionPr1, _props$rowSelectionPr10, _props$rowSelectionPr11, _props$rowSelectionPr12;\n        findRowsToDeselect(apiRef, tree, id, (_props$rowSelectionPr1 = (_props$rowSelectionPr10 = props.rowSelectionPropagation) === null || _props$rowSelectionPr10 === void 0 ? void 0 : _props$rowSelectionPr10.descendants) !== null && _props$rowSelectionPr1 !== void 0 ? _props$rowSelectionPr1 : false, (_props$rowSelectionPr11 = (_props$rowSelectionPr12 = props.rowSelectionPropagation) === null || _props$rowSelectionPr12 === void 0 ? void 0 : _props$rowSelectionPr12.parents) !== null && _props$rowSelectionPr11 !== void 0 ? _props$rowSelectionPr11 : false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel, 'singleRowSelection');\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, (_props$rowSelectionPr13 = props.rowSelectionPropagation) === null || _props$rowSelectionPr13 === void 0 ? void 0 : _props$rowSelectionPr13.descendants, (_props$rowSelectionPr14 = props.rowSelectionPropagation) === null || _props$rowSelectionPr14 === void 0 ? void 0 : _props$rowSelectionPr14.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback(function (ids) {\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    logger.debug(\"Setting selection for several rows\");\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = gridRowSelectionStateSelector(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = createRowSelectionManager(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            var _props$rowSelectionPr15, _props$rowSelectionPr16, _props$rowSelectionPr17, _props$rowSelectionPr18;\n            findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr15 = (_props$rowSelectionPr16 = props.rowSelectionPropagation) === null || _props$rowSelectionPr16 === void 0 ? void 0 : _props$rowSelectionPr16.descendants) !== null && _props$rowSelectionPr15 !== void 0 ? _props$rowSelectionPr15 : false, (_props$rowSelectionPr17 = (_props$rowSelectionPr18 = props.rowSelectionPropagation) === null || _props$rowSelectionPr18 === void 0 ? void 0 : _props$rowSelectionPr18.parents) !== null && _props$rowSelectionPr17 !== void 0 ? _props$rowSelectionPr17 : false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            var _props$rowSelectionPr19, _props$rowSelectionPr20, _props$rowSelectionPr21, _props$rowSelectionPr22;\n            findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr19 = (_props$rowSelectionPr20 = props.rowSelectionPropagation) === null || _props$rowSelectionPr20 === void 0 ? void 0 : _props$rowSelectionPr20.descendants) !== null && _props$rowSelectionPr19 !== void 0 ? _props$rowSelectionPr19 : false, (_props$rowSelectionPr21 = (_props$rowSelectionPr22 = props.rowSelectionPropagation) === null || _props$rowSelectionPr22 === void 0 ? void 0 : _props$rowSelectionPr22.parents) !== null && _props$rowSelectionPr21 !== void 0 ? _props$rowSelectionPr21 : false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            var _props$rowSelectionPr23, _props$rowSelectionPr24, _props$rowSelectionPr25, _props$rowSelectionPr26;\n            findRowsToDeselect(apiRef, tree, id, (_props$rowSelectionPr23 = (_props$rowSelectionPr24 = props.rowSelectionPropagation) === null || _props$rowSelectionPr24 === void 0 ? void 0 : _props$rowSelectionPr24.descendants) !== null && _props$rowSelectionPr23 !== void 0 ? _props$rowSelectionPr23 : false, (_props$rowSelectionPr25 = (_props$rowSelectionPr26 = props.rowSelectionPropagation) === null || _props$rowSelectionPr26 === void 0 ? void 0 : _props$rowSelectionPr26.parents) !== null && _props$rowSelectionPr25 !== void 0 ? _props$rowSelectionPr25 : false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel, 'multipleRowsSelection');\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, (_props$rowSelectionPr27 = props.rowSelectionPropagation) === null || _props$rowSelectionPr27 === void 0 ? void 0 : _props$rowSelectionPr27.descendants, (_props$rowSelectionPr28 = props.rowSelectionPropagation) === null || _props$rowSelectionPr28 === void 0 ? void 0 : _props$rowSelectionPr28.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = createRowSelectionManager(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      var _props$rowSelectionPr29, _props$rowSelectionPr30, _props$rowSelectionPr31, _props$rowSelectionPr32;\n      findRowsToSelect(apiRef, tree, id, (_props$rowSelectionPr29 = (_props$rowSelectionPr30 = props.rowSelectionPropagation) === null || _props$rowSelectionPr30 === void 0 ? void 0 : _props$rowSelectionPr30.descendants) !== null && _props$rowSelectionPr29 !== void 0 ? _props$rowSelectionPr29 : false, (_props$rowSelectionPr31 = (_props$rowSelectionPr32 = props.rowSelectionPropagation) === null || _props$rowSelectionPr32 === void 0 ? void 0 : _props$rowSelectionPr32.parents) !== null && _props$rowSelectionPr31 !== void 0 ? _props$rowSelectionPr31 : false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, (_props$rowSelectionPr33 = props.rowSelectionPropagation) === null || _props$rowSelectionPr33 === void 0 ? void 0 : _props$rowSelectionPr33.descendants, (_props$rowSelectionPr34 = props.rowSelectionPropagation) === null || _props$rowSelectionPr34 === void 0 ? void 0 : _props$rowSelectionPr34.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(function (_ref) {\n    let {\n      startId,\n      endId\n    } = _ref;\n    let isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let resetSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(\"Expanding selection from row \".concat(startId, \" to row \").concat(endId));\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback(function () {\n    var _props$rowSelectionPr36;\n    let sortModelUpdated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const rowTree = gridRowTreeSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowTree[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = createRowSelectionManager(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      var _props$rowSelectionPr35;\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!((_props$rowSelectionPr35 = props.rowSelectionPropagation) !== null && _props$rowSelectionPr35 !== void 0 && _props$rowSelectionPr35.parents)) {\n        continue;\n      }\n      const node = tree[id];\n      if ((node === null || node === void 0 ? void 0 : node.type) === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && ((_props$rowSelectionPr36 = props.rowSelectionPropagation) === null || _props$rowSelectionPr36 === void 0 ? void 0 : _props$rowSelectionPr36.parents) && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel, 'multipleRowsSelection');\n      }\n    }\n  }, [apiRef, isNestedData, (_props$rowSelectionPr37 = props.rowSelectionPropagation) === null || _props$rowSelectionPr37 === void 0 ? void 0 : _props$rowSelectionPr37.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    var _event$target$closest;\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = (_event$target$closest = event.target.closest(\".\".concat(gridClasses.cell))) === null || _event$target$closest === void 0 ? void 0 : _event$target$closest.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if ((column === null || column === void 0 ? void 0 : column.type) === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = gridRowNodeSelector(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 || _window$getSelection.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    var _props$rowSelectionPr38;\n    const filterModel = gridFilterModelSelector(apiRef);\n    const quickFilterModel = gridQuickFilterValuesSelector(apiRef);\n    const hasFilters = filterModel.items.length > 0 || (quickFilterModel === null || quickFilterModel === void 0 ? void 0 : quickFilterModel.some(val => val.length));\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && (!isNestedData || (_props$rowSelectionPr38 = props.rowSelectionPropagation) !== null && _props$rowSelectionPr38 !== void 0 && _props$rowSelectionPr38.descendants) && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      }, 'multipleRowsSelection');\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable, (_props$rowSelectionPr39 = props.rowSelectionPropagation) === null || _props$rowSelectionPr39 === void 0 ? void 0 : _props$rowSelectionPr39.descendants, isNestedData]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = getVisibleRows(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = useEventCallback(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  useGridEvent(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridEvent(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  useGridEvent(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridEvent(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridEvent(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridEvent(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridEvent(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};","map":{"version":3,"names":["_extends","React","useEventCallback","GridSignature","useGridEvent","useGridApiMethod","useGridLogger","useGridSelector","gridRowsLookupSelector","gridRowMaximumTreeDepthSelector","gridRowNodeSelector","gridRowTreeSelector","gridRowSelectionManagerSelector","gridRowSelectionStateSelector","gridRowSelectionCountSelector","gridRowSelectionIdsSelector","gridFocusCellSelector","gridExpandedSortedRowIdsSelector","gridFilteredRowsLookupSelector","gridFilterModelSelector","gridQuickFilterValuesSelector","GRID_CHECKBOX_SELECTION_COL_DEF","GRID_ACTIONS_COLUMN_TYPE","GridCellModes","isKeyboardEvent","isNavigationKey","getVisibleRows","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridClasses","isEventTargetInPortal","isMultipleRowSelectionEnabled","findRowsToSelect","findRowsToDeselect","createRowSelectionManager","gridPaginatedVisibleSortedGridRowIdsSelector","emptyModel","type","ids","Set","rowSelectionStateInitializer","state","props","_props$rowSelectionMo","rowSelection","rowSelectionModel","useGridRowSelection","apiRef","_props$rowSelectionPr","_props$rowSelectionPr2","_props$rowSelectionPr13","_props$rowSelectionPr14","_props$rowSelectionPr27","_props$rowSelectionPr28","_props$rowSelectionPr33","_props$rowSelectionPr34","_props$rowSelectionPr37","_props$rowSelectionPr39","logger","runIfRowSelectionIsEnabled","useCallback","callback","arguments","isNestedData","applyAutoSelection","signature","DataGrid","rowSelectionPropagation","parents","descendants","propRowSelectionModel","useMemo","lastRowToggled","useRef","current","registerControlState","stateId","propModel","propOnChange","onRowSelectionModelChange","stateSelector","changeEvent","checkboxSelection","disableRowSelectionOnClick","isRowSelectable","propIsRowSelectable","canHaveMultipleSelection","tree","expandMouseRowRangeSelection","id","_lastRowToggled$curre","endId","startId","isSelected","isRowSelected","visibleRowIds","startIndex","findIndex","rowId","endIndex","selectRowRange","getRowsToBeSelected","rowsToBeSelected","pagination","checkboxSelectionVisibleOnly","paginationMode","setRowSelectionModel","model","reason","size","Error","join","currentModel","debug","setState","selectionManager","has","getRowParams","rowNode","getSelectedRows","selectRow","length","undefined","resetSelection","concat","newSelectionModel","addRow","add","_props$rowSelectionPr3","_props$rowSelectionPr4","_props$rowSelectionPr5","_props$rowSelectionPr6","selectionModel","unselect","select","removeRow","_props$rowSelectionPr7","_props$rowSelectionPr8","_props$rowSelectionPr9","_props$rowSelectionPr0","_props$rowSelectionPr1","_props$rowSelectionPr10","_props$rowSelectionPr11","_props$rowSelectionPr12","isSelectionValid","selectRows","selectableIds","i","currentSelectionModel","_props$rowSelectionPr15","_props$rowSelectionPr16","_props$rowSelectionPr17","_props$rowSelectionPr18","Array","from","every","_props$rowSelectionPr19","_props$rowSelectionPr20","_props$rowSelectionPr21","_props$rowSelectionPr22","_props$rowSelectionPr23","_props$rowSelectionPr24","_props$rowSelectionPr25","_props$rowSelectionPr26","getPropagatedRowSelectionModel","inputSelectionModel","propagatedSelectionModel","_props$rowSelectionPr29","_props$rowSelectionPr30","_props$rowSelectionPr31","_props$rowSelectionPr32","_ref","getRow","allPagesRowIds","indexOf","start","end","rowsBetweenStartAndEnd","slice","selectionPublicApi","selectionPrivateApi","isFirstRender","removeOutdatedSelection","_props$rowSelectionPr36","sortModelUpdated","currentSelection","rowsLookup","rowTree","filteredRowsLookup","isNonExistent","filterMode","hasChanged","_props$rowSelectionPr35","keepNonExistentRowsSelected","node","isAutoGenerated","children","childId","shouldReapplyPropagation","unfilteredSelectedRowIds","selectedRowIds","push","handleSingleRowSelection","event","hasCtrlKey","metaKey","ctrlKey","isMultipleSelectionDisabled","selectedRowsCount","shouldStaySelected","newSelectionState","handleRowClick","params","_event$target$closest","field","target","closest","cell","getAttribute","column","getColumn","shiftKey","preventSelectionOnShift","_window$getSelection","window","getSelection","removeAllRanges","handleRowSelectionCheckboxChange","nativeEvent","value","toggleAllRows","_props$rowSelectionPr38","filterModel","quickFilterModel","hasFilters","items","some","val","handleHeaderSelectionCheckboxChange","handleCellKeyDown","getCellMode","Edit","key","focusCell","preventDefault","isNextRowSelected","newRowIndex","getRowIndexRelativeToVisibleRows","previousRowIndex","visibleRows","rows","String","fromCharCode","keyCode","syncControlledState","useEffect","isStateControlled"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/rowSelection/useGridRowSelection.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridSelector } from \"../../utils/useGridSelector.js\";\nimport { gridRowsLookupSelector, gridRowMaximumTreeDepthSelector, gridRowNodeSelector, gridRowTreeSelector } from \"../rows/gridRowsSelector.js\";\nimport { gridRowSelectionManagerSelector, gridRowSelectionStateSelector, gridRowSelectionCountSelector, gridRowSelectionIdsSelector } from \"./gridRowSelectionSelector.js\";\nimport { gridFocusCellSelector } from \"../focus/gridFocusStateSelector.js\";\nimport { gridExpandedSortedRowIdsSelector, gridFilteredRowsLookupSelector, gridFilterModelSelector, gridQuickFilterValuesSelector } from \"../filter/gridFilterSelector.js\";\nimport { GRID_CHECKBOX_SELECTION_COL_DEF, GRID_ACTIONS_COLUMN_TYPE } from \"../../../colDef/index.js\";\nimport { GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { isKeyboardEvent, isNavigationKey } from \"../../../utils/keyboardUtils.js\";\nimport { getVisibleRows } from \"../../utils/useGridVisibleRows.js\";\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from \"../../../internals/constants.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { isEventTargetInPortal } from \"../../../utils/domUtils.js\";\nimport { isMultipleRowSelectionEnabled, findRowsToSelect, findRowsToDeselect } from \"./utils.js\";\nimport { createRowSelectionManager } from \"../../../models/gridRowSelectionManager.js\";\nimport { gridPaginatedVisibleSortedGridRowIdsSelector } from \"../pagination/index.js\";\nconst emptyModel = {\n  type: 'include',\n  ids: new Set()\n};\nexport const rowSelectionStateInitializer = (state, props) => _extends({}, state, {\n  rowSelection: props.rowSelection ? props.rowSelectionModel ?? emptyModel : emptyModel\n});\n\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport const useGridRowSelection = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridSelection');\n  const runIfRowSelectionIsEnabled = React.useCallback(callback => (...args) => {\n    if (props.rowSelection) {\n      callback(...args);\n    }\n  }, [props.rowSelection]);\n  const isNestedData = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector) > 1;\n  const applyAutoSelection = props.signature !== GridSignature.DataGrid && (props.rowSelectionPropagation?.parents || props.rowSelectionPropagation?.descendants) && isNestedData;\n  const propRowSelectionModel = React.useMemo(() => {\n    return props.rowSelectionModel;\n  }, [props.rowSelectionModel]);\n  const lastRowToggled = React.useRef(null);\n  apiRef.current.registerControlState({\n    stateId: 'rowSelection',\n    propModel: propRowSelectionModel,\n    propOnChange: props.onRowSelectionModelChange,\n    stateSelector: gridRowSelectionStateSelector,\n    changeEvent: 'rowSelectionChange'\n  });\n  const {\n    checkboxSelection,\n    disableRowSelectionOnClick,\n    isRowSelectable: propIsRowSelectable\n  } = props;\n  const canHaveMultipleSelection = isMultipleRowSelectionEnabled(props);\n  const tree = useGridSelector(apiRef, gridRowTreeSelector);\n  const expandMouseRowRangeSelection = React.useCallback(id => {\n    let endId = id;\n    const startId = lastRowToggled.current ?? id;\n    const isSelected = apiRef.current.isRowSelected(id);\n    if (isSelected) {\n      const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n      const startIndex = visibleRowIds.findIndex(rowId => rowId === startId);\n      const endIndex = visibleRowIds.findIndex(rowId => rowId === endId);\n      if (startIndex === endIndex) {\n        return;\n      }\n      if (startIndex > endIndex) {\n        endId = visibleRowIds[endIndex + 1];\n      } else {\n        endId = visibleRowIds[endIndex - 1];\n      }\n    }\n    lastRowToggled.current = id;\n    apiRef.current.selectRowRange({\n      startId,\n      endId\n    }, !isSelected);\n  }, [apiRef]);\n  const getRowsToBeSelected = useEventCallback(() => {\n    const rowsToBeSelected = props.pagination && props.checkboxSelectionVisibleOnly && props.paginationMode === 'client' ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);\n    return rowsToBeSelected;\n  });\n\n  /*\n   * API METHODS\n   */\n  const setRowSelectionModel = React.useCallback((model, reason) => {\n    if (props.signature === GridSignature.DataGrid && !canHaveMultipleSelection && (model.type !== 'include' || model.ids.size > 1)) {\n      throw new Error(['MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.', 'You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection.'].join('\\n'));\n    }\n    const currentModel = gridRowSelectionStateSelector(apiRef);\n    if (currentModel !== model) {\n      logger.debug(`Setting selection model`);\n      apiRef.current.setState(state => _extends({}, state, {\n        rowSelection: props.rowSelection ? model : emptyModel\n      }), reason);\n    }\n  }, [apiRef, logger, props.rowSelection, props.signature, canHaveMultipleSelection]);\n  const isRowSelected = React.useCallback(id => {\n    const selectionManager = gridRowSelectionManagerSelector(apiRef);\n    return selectionManager.has(id);\n  }, [apiRef]);\n  const isRowSelectable = React.useCallback(id => {\n    if (props.rowSelection === false) {\n      return false;\n    }\n    if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {\n      return false;\n    }\n    const rowNode = gridRowNodeSelector(apiRef, id);\n    if (rowNode?.type === 'footer' || rowNode?.type === 'pinnedRow') {\n      return false;\n    }\n    return true;\n  }, [apiRef, props.rowSelection, propIsRowSelectable]);\n  const getSelectedRows = React.useCallback(() => gridRowSelectionIdsSelector(apiRef), [apiRef]);\n  const selectRow = React.useCallback((id, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.isRowSelectable(id)) {\n      return;\n    }\n    lastRowToggled.current = id;\n    if (resetSelection) {\n      logger.debug(`Setting selection for row ${id}`);\n      const newSelectionModel = {\n        type: 'include',\n        ids: new Set()\n      };\n      const addRow = rowId => {\n        newSelectionModel.ids.add(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      }\n      apiRef.current.setRowSelectionModel(newSelectionModel, 'singleRowSelection');\n    } else {\n      logger.debug(`Toggling selection for row ${id}`);\n      const selectionModel = gridRowSelectionStateSelector(apiRef);\n      const newSelectionModel = {\n        type: selectionModel.type,\n        ids: new Set(selectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      selectionManager.unselect(id);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      if (isSelected) {\n        addRow(id);\n        if (applyAutoSelection) {\n          findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n        }\n      } else if (applyAutoSelection) {\n        findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n      }\n      const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n      if (isSelectionValid) {\n        apiRef.current.setRowSelectionModel(newSelectionModel, 'singleRowSelection');\n      }\n    }\n  }, [apiRef, logger, applyAutoSelection, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, canHaveMultipleSelection]);\n  const selectRows = React.useCallback((ids, isSelected = true, resetSelection = false) => {\n    logger.debug(`Setting selection for several rows`);\n    if (props.rowSelection === false) {\n      return;\n    }\n    const selectableIds = new Set();\n    for (let i = 0; i < ids.length; i += 1) {\n      const id = ids[i];\n      if (apiRef.current.isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    const currentSelectionModel = gridRowSelectionStateSelector(apiRef);\n    let newSelectionModel;\n    if (resetSelection) {\n      newSelectionModel = {\n        type: 'include',\n        ids: selectableIds\n      };\n      if (isSelected) {\n        const selectionManager = createRowSelectionManager(newSelectionModel);\n        if (applyAutoSelection) {\n          const addRow = rowId => {\n            selectionManager.select(rowId);\n          };\n          for (const id of selectableIds) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        }\n      } else {\n        newSelectionModel.ids = new Set();\n      }\n      if (currentSelectionModel.type === newSelectionModel.type && newSelectionModel.ids.size === currentSelectionModel.ids.size && Array.from(newSelectionModel.ids).every(id => currentSelectionModel.ids.has(id))) {\n        return;\n      }\n    } else {\n      newSelectionModel = {\n        type: currentSelectionModel.type,\n        ids: new Set(currentSelectionModel.ids)\n      };\n      const selectionManager = createRowSelectionManager(newSelectionModel);\n      const addRow = rowId => {\n        selectionManager.select(rowId);\n      };\n      const removeRow = rowId => {\n        selectionManager.unselect(rowId);\n      };\n      for (const id of selectableIds) {\n        if (isSelected) {\n          selectionManager.select(id);\n          if (applyAutoSelection) {\n            findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow);\n          }\n        } else {\n          removeRow(id);\n          if (applyAutoSelection) {\n            findRowsToDeselect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, removeRow);\n          }\n        }\n      }\n    }\n    const isSelectionValid = newSelectionModel.type === 'include' && newSelectionModel.ids.size < 2 || canHaveMultipleSelection;\n    if (isSelectionValid) {\n      apiRef.current.setRowSelectionModel(newSelectionModel, 'multipleRowsSelection');\n    }\n  }, [logger, applyAutoSelection, canHaveMultipleSelection, apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, props.rowSelection]);\n  const getPropagatedRowSelectionModel = React.useCallback(inputSelectionModel => {\n    if (!isNestedData || !applyAutoSelection || inputSelectionModel.ids.size === 0 && inputSelectionModel.type === 'include') {\n      return inputSelectionModel;\n    }\n    const propagatedSelectionModel = {\n      type: inputSelectionModel.type,\n      ids: new Set(inputSelectionModel.ids)\n    };\n    const selectionManager = createRowSelectionManager(propagatedSelectionModel);\n    const addRow = rowId => {\n      selectionManager.select(rowId);\n    };\n    for (const id of inputSelectionModel.ids) {\n      findRowsToSelect(apiRef, tree, id, props.rowSelectionPropagation?.descendants ?? false, props.rowSelectionPropagation?.parents ?? false, addRow, selectionManager);\n    }\n    return propagatedSelectionModel;\n  }, [apiRef, tree, props.rowSelectionPropagation?.descendants, props.rowSelectionPropagation?.parents, isNestedData, applyAutoSelection]);\n  const selectRowRange = React.useCallback(({\n    startId,\n    endId\n  }, isSelected = true, resetSelection = false) => {\n    if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {\n      return;\n    }\n    logger.debug(`Expanding selection from row ${startId} to row ${endId}`);\n\n    // Using rows from all pages allow to select a range across several pages\n    const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);\n    const startIndex = allPagesRowIds.indexOf(startId);\n    const endIndex = allPagesRowIds.indexOf(endId);\n    const [start, end] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];\n    const rowsBetweenStartAndEnd = allPagesRowIds.slice(start, end + 1);\n    apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);\n  }, [apiRef, logger]);\n  const selectionPublicApi = {\n    selectRow,\n    setRowSelectionModel,\n    getSelectedRows,\n    isRowSelected,\n    isRowSelectable\n  };\n  const selectionPrivateApi = {\n    selectRows,\n    selectRowRange,\n    getPropagatedRowSelectionModel\n  };\n  useGridApiMethod(apiRef, selectionPublicApi, 'public');\n  useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /*\n   * EVENTS\n   */\n  const isFirstRender = React.useRef(true);\n  const removeOutdatedSelection = React.useCallback((sortModelUpdated = false) => {\n    if (isFirstRender.current) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    const rowsLookup = gridRowsLookupSelector(apiRef);\n    const rowTree = gridRowTreeSelector(apiRef);\n    const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n    const isNonExistent = id => {\n      if (props.filterMode === 'server') {\n        return !rowsLookup[id];\n      }\n      return !rowTree[id] || filteredRowsLookup[id] === false;\n    };\n    const newSelectionModel = {\n      type: currentSelection.type,\n      ids: new Set(currentSelection.ids)\n    };\n    const selectionManager = createRowSelectionManager(newSelectionModel);\n    let hasChanged = false;\n    for (const id of currentSelection.ids) {\n      if (isNonExistent(id)) {\n        if (props.keepNonExistentRowsSelected) {\n          continue;\n        }\n        selectionManager.unselect(id);\n        hasChanged = true;\n        continue;\n      }\n      if (!props.rowSelectionPropagation?.parents) {\n        continue;\n      }\n      const node = tree[id];\n      if (node?.type === 'group') {\n        const isAutoGenerated = node.isAutoGenerated;\n        if (isAutoGenerated) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n          continue;\n        }\n        // Keep previously selected tree data parents selected if all their children are filtered out\n        if (!node.children.every(childId => filteredRowsLookup[childId] === false)) {\n          selectionManager.unselect(id);\n          hasChanged = true;\n        }\n      }\n    }\n\n    // For nested data, on row tree updation (filtering, adding rows, etc.) when the selection is\n    // not empty, we need to re-run scanning of the tree to propagate the selection changes\n    // Example: A parent whose de-selected children are filtered out should now be selected\n    const shouldReapplyPropagation = isNestedData && props.rowSelectionPropagation?.parents && (newSelectionModel.ids.size > 0 ||\n    // In case of exclude selection, newSelectionModel.ids.size === 0 means all rows are selected\n    newSelectionModel.type === 'exclude');\n    if (hasChanged || shouldReapplyPropagation && !sortModelUpdated) {\n      if (shouldReapplyPropagation) {\n        if (newSelectionModel.type === 'exclude') {\n          const unfilteredSelectedRowIds = getRowsToBeSelected();\n          const selectedRowIds = [];\n          for (let i = 0; i < unfilteredSelectedRowIds.length; i += 1) {\n            const rowId = unfilteredSelectedRowIds[i];\n            if ((props.keepNonExistentRowsSelected || !isNonExistent(rowId)) && selectionManager.has(rowId)) {\n              selectedRowIds.push(rowId);\n            }\n          }\n          apiRef.current.selectRows(selectedRowIds, true, true);\n        } else {\n          apiRef.current.selectRows(Array.from(newSelectionModel.ids), true, true);\n        }\n      } else {\n        apiRef.current.setRowSelectionModel(newSelectionModel, 'multipleRowsSelection');\n      }\n    }\n  }, [apiRef, isNestedData, props.rowSelectionPropagation?.parents, props.keepNonExistentRowsSelected, props.filterMode, tree, getRowsToBeSelected]);\n  const handleSingleRowSelection = React.useCallback((id, event) => {\n    const hasCtrlKey = event.metaKey || event.ctrlKey;\n\n    // multiple selection is only allowed if:\n    // - it is a checkboxSelection\n    // - it is a keyboard selection\n    // - Ctrl is pressed\n\n    const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);\n    const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;\n    const isSelected = apiRef.current.isRowSelected(id);\n    const selectedRowsCount = gridRowSelectionCountSelector(apiRef);\n\n    // Clicking on a row should toggle the selection except when a range of rows is already selected and the selection should reset\n    // In that case, we want to keep the current row selected (https://github.com/mui/mui-x/pull/15509#discussion_r1878082687)\n    const shouldStaySelected = selectedRowsCount > 1 && resetSelection;\n    const newSelectionState = shouldStaySelected || !isSelected;\n    apiRef.current.selectRow(id, newSelectionState, resetSelection);\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection]);\n  const handleRowClick = React.useCallback((params, event) => {\n    if (disableRowSelectionOnClick) {\n      return;\n    }\n    const field = event.target.closest(`.${gridClasses.cell}`)?.getAttribute('data-field');\n    if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // click on checkbox should not trigger row selection\n      return;\n    }\n    if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n      // click to open the detail panel should not select the row\n      return;\n    }\n    if (field) {\n      const column = apiRef.current.getColumn(field);\n      if (column?.type === GRID_ACTIONS_COLUMN_TYPE) {\n        return;\n      }\n    }\n    const rowNode = gridRowNodeSelector(apiRef, params.id);\n    if (rowNode.type === 'pinnedRow') {\n      return;\n    }\n    if (event.shiftKey && canHaveMultipleSelection) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      handleSingleRowSelection(params.id, event);\n    }\n  }, [disableRowSelectionOnClick, canHaveMultipleSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);\n  const preventSelectionOnShift = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.shiftKey) {\n      window.getSelection()?.removeAllRanges();\n    }\n  }, [canHaveMultipleSelection]);\n  const handleRowSelectionCheckboxChange = React.useCallback((params, event) => {\n    if (canHaveMultipleSelection && event.nativeEvent.shiftKey) {\n      expandMouseRowRangeSelection(params.id);\n    } else {\n      apiRef.current.selectRow(params.id, params.value, !canHaveMultipleSelection);\n    }\n  }, [apiRef, expandMouseRowRangeSelection, canHaveMultipleSelection]);\n  const toggleAllRows = React.useCallback(value => {\n    const filterModel = gridFilterModelSelector(apiRef);\n    const quickFilterModel = gridQuickFilterValuesSelector(apiRef);\n    const hasFilters = filterModel.items.length > 0 || quickFilterModel?.some(val => val.length);\n    if (!props.isRowSelectable && !props.checkboxSelectionVisibleOnly && (!isNestedData || props.rowSelectionPropagation?.descendants) && !hasFilters) {\n      apiRef.current.setRowSelectionModel({\n        type: value ? 'exclude' : 'include',\n        ids: new Set()\n      }, 'multipleRowsSelection');\n    } else {\n      apiRef.current.selectRows(getRowsToBeSelected(), value);\n    }\n  }, [apiRef, getRowsToBeSelected, props.checkboxSelectionVisibleOnly, props.isRowSelectable, props.rowSelectionPropagation?.descendants, isNestedData]);\n  const handleHeaderSelectionCheckboxChange = React.useCallback(params => {\n    toggleAllRows(params.value);\n  }, [toggleAllRows]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Get the most recent cell mode because it may have been changed by another listener\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {\n      return;\n    }\n\n    // Ignore portal\n    // Do not apply shortcuts if the focus is not on the cell root component\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      // The cell that has focus after the keyboard navigation\n      const focusCell = gridFocusCellSelector(apiRef);\n      if (focusCell && focusCell.id !== params.id) {\n        event.preventDefault();\n        const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);\n        if (!canHaveMultipleSelection) {\n          apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);\n          return;\n        }\n        const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);\n        const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);\n        let start;\n        let end;\n        if (newRowIndex > previousRowIndex) {\n          if (isNextRowSelected) {\n            // We are navigating to the bottom of the page and adding selected rows\n            start = previousRowIndex;\n            end = newRowIndex - 1;\n          } else {\n            // We are navigating to the bottom of the page and removing selected rows\n            start = previousRowIndex;\n            end = newRowIndex;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (isNextRowSelected) {\n            // We are navigating to the top of the page and removing selected rows\n            start = newRowIndex + 1;\n            end = previousRowIndex;\n          } else {\n            // We are navigating to the top of the page and adding selected rows\n            start = newRowIndex;\n            end = previousRowIndex;\n          }\n        }\n        const visibleRows = getVisibleRows(apiRef);\n        const rowsBetweenStartAndEnd = [];\n        for (let i = start; i <= end; i += 1) {\n          rowsBetweenStartAndEnd.push(visibleRows.rows[i].id);\n        }\n        apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);\n        return;\n      }\n    }\n    if (event.key === ' ' && event.shiftKey) {\n      event.preventDefault();\n      handleSingleRowSelection(params.id, event);\n      return;\n    }\n    if (String.fromCharCode(event.keyCode) === 'A' && (event.ctrlKey || event.metaKey)) {\n      event.preventDefault();\n      toggleAllRows(true);\n    }\n  }, [apiRef, canHaveMultipleSelection, handleSingleRowSelection, toggleAllRows]);\n  const syncControlledState = useEventCallback(() => {\n    if (!props.rowSelection) {\n      apiRef.current.setRowSelectionModel(emptyModel);\n      return;\n    }\n    if (propRowSelectionModel === undefined) {\n      return;\n    }\n    if (!applyAutoSelection || !isNestedData || propRowSelectionModel.type === 'include' && propRowSelectionModel.ids.size === 0) {\n      apiRef.current.setRowSelectionModel(propRowSelectionModel);\n      return;\n    }\n    const newSelectionModel = apiRef.current.getPropagatedRowSelectionModel(propRowSelectionModel);\n    if (newSelectionModel.type !== propRowSelectionModel.type || newSelectionModel.ids.size !== propRowSelectionModel.ids.size || !Array.from(propRowSelectionModel.ids).every(id => newSelectionModel.ids.has(id))) {\n      apiRef.current.setRowSelectionModel(newSelectionModel);\n      return;\n    }\n    apiRef.current.setRowSelectionModel(propRowSelectionModel);\n  });\n  useGridEvent(apiRef, 'sortedRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection(true)));\n  useGridEvent(apiRef, 'filteredRowsSet', runIfRowSelectionIsEnabled(() => removeOutdatedSelection()));\n  useGridEvent(apiRef, 'rowClick', runIfRowSelectionIsEnabled(handleRowClick));\n  useGridEvent(apiRef, 'rowSelectionCheckboxChange', runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));\n  useGridEvent(apiRef, 'headerSelectionCheckboxChange', handleHeaderSelectionCheckboxChange);\n  useGridEvent(apiRef, 'cellMouseDown', runIfRowSelectionIsEnabled(preventSelectionOnShift));\n  useGridEvent(apiRef, 'cellKeyDown', runIfRowSelectionIsEnabled(handleCellKeyDown));\n\n  /*\n   * EFFECTS\n   */\n  React.useEffect(() => {\n    syncControlledState();\n  }, [apiRef, propRowSelectionModel, props.rowSelection, syncControlledState]);\n  const isStateControlled = propRowSelectionModel != null;\n  React.useEffect(() => {\n    if (isStateControlled || !props.rowSelection || typeof isRowSelectable !== 'function') {\n      return;\n    }\n\n    // props.isRowSelectable changed\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (currentSelection.type !== 'include') {\n      return;\n    }\n    const selectableIds = new Set();\n    for (const id of currentSelection.ids) {\n      if (isRowSelectable(id)) {\n        selectableIds.add(id);\n      }\n    }\n    if (selectableIds.size < currentSelection.ids.size) {\n      apiRef.current.setRowSelectionModel({\n        type: currentSelection.type,\n        ids: selectableIds\n      });\n    }\n  }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    if (!props.rowSelection || isStateControlled) {\n      return;\n    }\n    const currentSelection = gridRowSelectionStateSelector(apiRef);\n    if (!canHaveMultipleSelection && (currentSelection.type === 'include' && currentSelection.ids.size > 1 || currentSelection.type === 'exclude')) {\n      // See https://github.com/mui/mui-x/issues/8455\n      apiRef.current.setRowSelectionModel(emptyModel);\n    }\n  }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);\n  React.useEffect(() => {\n    runIfRowSelectionIsEnabled(removeOutdatedSelection);\n  }, [removeOutdatedSelection, runIfRowSelectionIsEnabled]);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n    }\n  }, []);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}