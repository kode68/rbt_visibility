{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol, escapeOperandAttributeSelector } from \"../../../utils/domUtils.js\";\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from \"./gridColumnResizeApi.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { useGridEvent, useGridApiMethod, useGridEventPriority, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from \"../../utils/index.js\";\nimport { gridVirtualizationColumnEnabledSelector } from \"../virtualization/index.js\";\nimport { createControllablePromise } from \"../../../utils/createControllablePromise.js\";\nimport { clamp } from \"../../../utils/utils.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridPinnedColumnPosition } from \"../columns/gridColumnsInterfaces.js\";\nimport { gridColumnsStateSelector } from \"../columns/index.js\";\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, isRtl) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (isRtl) {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef(undefined);\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      var _cell$getBoundingClie;\n      return (_cell$getBoundingClie = cell.getBoundingClientRect().width) !== null && _cell$getBoundingClie !== void 0 ? _cell$getBoundingClie : 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        var _iconContainer$client, _menuContainer$client;\n        const title = header.querySelector(\".\".concat(gridClasses.columnHeaderTitle));\n        const content = header.querySelector(\".\".concat(gridClasses.columnHeaderTitleContainerContent));\n        const iconContainer = header.querySelector(\".\".concat(gridClasses.iconButtonContainer));\n        const menuContainer = header.querySelector(\".\".concat(gridClasses.menuIcon));\n        const element = title !== null && title !== void 0 ? title : content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + ((_iconContainer$client = iconContainer === null || iconContainer === void 0 ? void 0 : iconContainer.clientWidth) !== null && _iconContainer$client !== void 0 ? _iconContainer$client : 0) + ((_menuContainer$client = menuContainer === null || menuContainer === void 0 ? void 0 : menuContainer.clientWidth) !== null && _menuContainer$client !== void 0 ? _menuContainer$client : 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const isRtl = useRtl();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef(null);\n  const resizeDirection = React.useRef(null);\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef(undefined);\n  const updateWidth = newWidth => {\n    logger.debug(\"Updating width to \".concat(newWidth, \" for col \").concat(refs.colDef.field));\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    if (columnWidthDiff > 0) {\n      var _apiRef$current$rootE;\n      const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n      (_apiRef$current$rootE = apiRef.current.rootElementRef) === null || _apiRef$current$rootE === void 0 || (_apiRef$current$rootE = _apiRef$current$rootE.current) === null || _apiRef$current$rootE === void 0 || _apiRef$current$rootE.style.setProperty('--DataGrid-rowWidth', \"\".concat(newTotalWidth, \"px\"));\n    }\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = \"\".concat(newWidth, \"px\");\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = \"\".concat(newWidth, \"px\");\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = \"\".concat(newWidth, \"px\");\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = \"\".concat(div.offsetWidth + widthDiff, \"px\");\n      }\n      div.style.width = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = \"\".concat(newWidth, \"px\");\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = \"\".concat(div.offsetWidth + widthDiff, \"px\");\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(\"Updating col \".concat(refs.colDef.field, \" with new width: \").concat(refs.colDef.width));\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = gridColumnsStateSelector(apiRef);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = \"\".concat(newWidth, \"px\");\n        div.style.width = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    var _apiRef$current$colum;\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(\".\".concat(gridClasses.headerFilterRow, \" [data-field=\\\"\").concat(escapeOperandAttributeSelector(colDef.field), \"\\\"]\"));\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = findGroupHeaderElementsFromField((_apiRef$current$colum = apiRef.current.columnHeadersContainerRef) === null || _apiRef$current$colum === void 0 ? void 0 : _apiRef$current$colum.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, isRtl ? 'filler--pinnedRight' : 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, isRtl ? 'filler--pinnedLeft' : 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    resizeDirection.current = getResizeDirection(separator, isRtl);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(\"Start Resize on col \".concat(colDef.field));\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(_ref => {\n    let {\n      field\n    } = _ref;\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback((_ref2, event) => {\n    let {\n      colDef\n    } = _ref2;\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(\"Start Resize on col \".concat(colDef.field));\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      disableColumnVirtualization: false,\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    var _apiRef$current$rootE2, _userOptions$columns;\n    const root = (_apiRef$current$rootE2 = apiRef.current.rootElementRef) === null || _apiRef$current$rootE2 === void 0 ? void 0 : _apiRef$current$rootE2.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: (_userOptions$columns = userOptions === null || userOptions === void 0 ? void 0 : userOptions.columns) !== null && _userOptions$columns !== void 0 ? _userOptions$columns : state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      if (!props.disableVirtualization && options.disableColumnVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(false);\n        await columnVirtualizationDisabled();\n      }\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field],\n        flex: 0\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => {\n          var _ref3, _widthByField$column$;\n          return total + ((_ref3 = (_widthByField$column$ = widthByField[column.field]) !== null && _widthByField$column$ !== void 0 ? _widthByField$column$ : column.computedWidth) !== null && _ref3 !== void 0 ? _ref3 : column.width);\n        }, 0);\n        const dimensions = apiRef.current.getRootDimensions();\n        const availableWidth = dimensions.viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      if (!props.disableVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(true);\n      }\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled, props.disableVirtualization]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => {\n    var _apiRef$current$colum2;\n    return (_apiRef$current$colum2 = apiRef.current.columnHeadersContainerRef) === null || _apiRef$current$colum2 === void 0 ? void 0 : _apiRef$current$colum2.current;\n  }, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridEvent(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridEvent(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridEvent(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridEvent(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridEventPriority(apiRef, 'columnResize', props.onColumnResize);\n  useGridEventPriority(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = \"\".concat(parseInt(element.style[property], 10) + delta, \"px\");\n}","map":{"version":3,"names":["_extends","React","useEventCallback","ownerDocument","useLazyRef","useRtl","findGridCellElementsFromCol","findGridElement","findLeftPinnedCellsAfterCol","findRightPinnedCellsBeforeCol","getFieldFromHeaderElem","findHeaderElementFromField","getFieldsFromGroupHeaderElem","findGroupHeaderElementsFromField","findGridHeader","findGridCells","findParentElementFromClassName","findLeftPinnedHeadersAfterCol","findRightPinnedHeadersBeforeCol","escapeOperandAttributeSelector","DEFAULT_GRID_AUTOSIZE_OPTIONS","gridClasses","useGridEvent","useGridApiMethod","useGridEventPriority","useGridLogger","useGridNativeEventListener","useGridSelector","useOnMount","gridVirtualizationColumnEnabledSelector","createControllablePromise","clamp","useTimeout","GridPinnedColumnPosition","gridColumnsStateSelector","trackFinger","event","currentTouchId","undefined","changedTouches","i","length","touch","identifier","x","clientX","y","clientY","computeNewWidth","initialOffsetToSeparator","clickX","columnBounds","resizeDirection","newWidth","left","right","computeOffsetToSeparator","flipResizeDirection","side","getResizeDirection","separator","isRtl","classList","contains","preventClick","preventDefault","stopImmediatePropagation","useColumnVirtualizationDisabled","apiRef","promise","useRef","selector","value","useEffect","current","resolve","asyncCheck","Promise","excludeOutliers","inputValues","factor","values","slice","sort","a","b","q1","Math","floor","q3","iqr","deviation","filter","v","extractColumnWidths","options","columns","widthByField","root","rootElementRef","add","autosizing","forEach","column","cells","field","widths","map","cell","_cell$getBoundingClie","getBoundingClientRect","width","filteredWidths","includeOutliers","outliersFactor","includeHeaders","header","_iconContainer$client","_menuContainer$client","title","querySelector","concat","columnHeaderTitle","content","columnHeaderTitleContainerContent","iconContainer","iconButtonContainer","menuContainer","menuIcon","element","style","window","getComputedStyle","paddingWidth","parseInt","paddingLeft","paddingRight","contentWidth","scrollWidth","clientWidth","push","hasColumnMin","minWidth","Infinity","hasColumnMax","maxWidth","min","max","maxContent","remove","columnResizeStateInitializer","state","columnResize","resizingColumnField","createResizeRefs","colDef","initialColWidth","initialTotalWidth","previousMouseClickEvent","columnHeaderElement","headerFilterElement","groupHeaderElements","cellElements","leftPinnedCellsAfter","rightPinnedCellsBefore","fillerLeft","fillerRight","leftPinnedHeadersAfter","rightPinnedHeadersBefore","useGridColumnResize","props","logger","refs","stopResizeEventTimeout","touchId","updateWidth","debug","prevWidth","offsetWidth","widthDiff","columnWidthDiff","_apiRef$current$rootE","newTotalWidth","setProperty","computedWidth","flex","div","finalWidth","getAttribute","pinnedPosition","unstable_applyPipeProcessors","LEFT","updateProperty","RIGHT","finishResize","nativeEvent","stopListening","prevEvent","prevTimeStamp","timeStamp","prevClientX","prevClientY","publishEvent","setColumnWidth","columnsState","fields","reduce","acc","columnVisibilityModel","lookup","start","storeReferences","xStart","_apiRef$current$colum","getRootDimensions","rowWidth","columnHeadersContainerRef","headerFilterRow","handleResizeMouseUp","handleResizeMouseMove","buttons","params","handleTouchEnd","finger","handleTouchMove","type","handleTouchStart","cellSeparator","target","columnHeader","getColumn","doc","currentTarget","addEventListener","useCallback","body","removeProperty","removeEventListener","setTimeout","pointerEvents","handleResizeStart","_ref","setState","handleResizeStop","handleColumnResizeMouseDown","_ref2","button","cursor","handleColumnSeparatorDoubleClick","disableAutosize","resizable","autosizeColumns","autosizeOptions","disableColumnVirtualization","columnVirtualizationDisabled","isAutosizingRef","userOptions","_apiRef$current$rootE2","_userOptions$columns","orderedFields","c","disableVirtualization","unstable_setColumnVirtualization","newColumns","expand","visibleColumns","totalWidth","total","_ref3","_widthByField$column$","dimensions","availableWidth","viewportInnerSize","remainingWidth","widthPerColumn","updateColumns","newColumn","index","getColumnHeaderElement","autosizeOnMount","then","_apiRef$current$colum2","passive","onColumnResize","onColumnWidthChange","property","delta"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/columnResize/useGridColumnResize.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport ownerDocument from '@mui/utils/ownerDocument';\nimport useLazyRef from '@mui/utils/useLazyRef';\nimport { useRtl } from '@mui/system/RtlProvider';\nimport { findGridCellElementsFromCol, findGridElement, findLeftPinnedCellsAfterCol, findRightPinnedCellsBeforeCol, getFieldFromHeaderElem, findHeaderElementFromField, getFieldsFromGroupHeaderElem, findGroupHeaderElementsFromField, findGridHeader, findGridCells, findParentElementFromClassName, findLeftPinnedHeadersAfterCol, findRightPinnedHeadersBeforeCol, escapeOperandAttributeSelector } from \"../../../utils/domUtils.js\";\nimport { DEFAULT_GRID_AUTOSIZE_OPTIONS } from \"./gridColumnResizeApi.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { useGridEvent, useGridApiMethod, useGridEventPriority, useGridLogger, useGridNativeEventListener, useGridSelector, useOnMount } from \"../../utils/index.js\";\nimport { gridVirtualizationColumnEnabledSelector } from \"../virtualization/index.js\";\nimport { createControllablePromise } from \"../../../utils/createControllablePromise.js\";\nimport { clamp } from \"../../../utils/utils.js\";\nimport { useTimeout } from \"../../utils/useTimeout.js\";\nimport { GridPinnedColumnPosition } from \"../columns/gridColumnsInterfaces.js\";\nimport { gridColumnsStateSelector } from \"../columns/index.js\";\nfunction trackFinger(event, currentTouchId) {\n  if (currentTouchId !== undefined && event.changedTouches) {\n    for (let i = 0; i < event.changedTouches.length; i += 1) {\n      const touch = event.changedTouches[i];\n      if (touch.identifier === currentTouchId) {\n        return {\n          x: touch.clientX,\n          y: touch.clientY\n        };\n      }\n    }\n    return false;\n  }\n  return {\n    x: event.clientX,\n    y: event.clientY\n  };\n}\nfunction computeNewWidth(initialOffsetToSeparator, clickX, columnBounds, resizeDirection) {\n  let newWidth = initialOffsetToSeparator;\n  if (resizeDirection === 'Right') {\n    newWidth += clickX - columnBounds.left;\n  } else {\n    newWidth += columnBounds.right - clickX;\n  }\n  return newWidth;\n}\nfunction computeOffsetToSeparator(clickX, columnBounds, resizeDirection) {\n  if (resizeDirection === 'Left') {\n    return clickX - columnBounds.left;\n  }\n  return columnBounds.right - clickX;\n}\nfunction flipResizeDirection(side) {\n  if (side === 'Right') {\n    return 'Left';\n  }\n  return 'Right';\n}\nfunction getResizeDirection(separator, isRtl) {\n  const side = separator.classList.contains(gridClasses['columnSeparator--sideRight']) ? 'Right' : 'Left';\n  if (isRtl) {\n    // Resizing logic should be mirrored in the RTL case\n    return flipResizeDirection(side);\n  }\n  return side;\n}\nfunction preventClick(event) {\n  event.preventDefault();\n  event.stopImmediatePropagation();\n}\n\n/**\n * Checker that returns a promise that resolves when the column virtualization\n * is disabled.\n */\nfunction useColumnVirtualizationDisabled(apiRef) {\n  const promise = React.useRef(undefined);\n  const selector = () => gridVirtualizationColumnEnabledSelector(apiRef);\n  const value = useGridSelector(apiRef, selector);\n  React.useEffect(() => {\n    if (promise.current && value === false) {\n      promise.current.resolve();\n      promise.current = undefined;\n    }\n  });\n  const asyncCheck = () => {\n    if (!promise.current) {\n      if (selector() === false) {\n        return Promise.resolve();\n      }\n      promise.current = createControllablePromise();\n    }\n    return promise.current;\n  };\n  return asyncCheck;\n}\n\n/**\n * Basic statistical outlier detection, checks if the value is `F * IQR` away from\n * the Q1 and Q3 boundaries. IQR: interquartile range.\n */\nfunction excludeOutliers(inputValues, factor) {\n  if (inputValues.length < 4) {\n    return inputValues;\n  }\n  const values = inputValues.slice();\n  values.sort((a, b) => a - b);\n  const q1 = values[Math.floor(values.length * 0.25)];\n  const q3 = values[Math.floor(values.length * 0.75) - 1];\n  const iqr = q3 - q1;\n\n  // We make a small adjustment if `iqr < 5` for the cases where the IQR is\n  // very small (for example zero) due to very close by values in the input data.\n  // Otherwise, with an IQR of `0`, anything outside that would be considered\n  // an outlier, but it makes more sense visually to allow for this 5px variance\n  // rather than showing a cropped cell.\n  const deviation = iqr < 5 ? 5 : iqr * factor;\n  return values.filter(v => v > q1 - deviation && v < q3 + deviation);\n}\nfunction extractColumnWidths(apiRef, options, columns) {\n  const widthByField = {};\n  const root = apiRef.current.rootElementRef.current;\n  root.classList.add(gridClasses.autosizing);\n  columns.forEach(column => {\n    const cells = findGridCells(apiRef.current, column.field);\n    const widths = cells.map(cell => {\n      return cell.getBoundingClientRect().width ?? 0;\n    });\n    const filteredWidths = options.includeOutliers ? widths : excludeOutliers(widths, options.outliersFactor);\n    if (options.includeHeaders) {\n      const header = findGridHeader(apiRef.current, column.field);\n      if (header) {\n        const title = header.querySelector(`.${gridClasses.columnHeaderTitle}`);\n        const content = header.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n        const iconContainer = header.querySelector(`.${gridClasses.iconButtonContainer}`);\n        const menuContainer = header.querySelector(`.${gridClasses.menuIcon}`);\n        const element = title ?? content;\n        const style = window.getComputedStyle(header, null);\n        const paddingWidth = parseInt(style.paddingLeft, 10) + parseInt(style.paddingRight, 10);\n        const contentWidth = element.scrollWidth + 1;\n        const width = contentWidth + paddingWidth + (iconContainer?.clientWidth ?? 0) + (menuContainer?.clientWidth ?? 0);\n        filteredWidths.push(width);\n      }\n    }\n    const hasColumnMin = column.minWidth !== -Infinity && column.minWidth !== undefined;\n    const hasColumnMax = column.maxWidth !== Infinity && column.maxWidth !== undefined;\n    const min = hasColumnMin ? column.minWidth : 0;\n    const max = hasColumnMax ? column.maxWidth : Infinity;\n    const maxContent = filteredWidths.length === 0 ? 0 : Math.max(...filteredWidths);\n    widthByField[column.field] = clamp(maxContent, min, max);\n  });\n  root.classList.remove(gridClasses.autosizing);\n  return widthByField;\n}\nexport const columnResizeStateInitializer = state => _extends({}, state, {\n  columnResize: {\n    resizingColumnField: ''\n  }\n});\nfunction createResizeRefs() {\n  return {\n    colDef: undefined,\n    initialColWidth: 0,\n    initialTotalWidth: 0,\n    previousMouseClickEvent: undefined,\n    columnHeaderElement: undefined,\n    headerFilterElement: undefined,\n    groupHeaderElements: [],\n    cellElements: [],\n    leftPinnedCellsAfter: [],\n    rightPinnedCellsBefore: [],\n    fillerLeft: undefined,\n    fillerRight: undefined,\n    leftPinnedHeadersAfter: [],\n    rightPinnedHeadersBefore: []\n  };\n}\n\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport const useGridColumnResize = (apiRef, props) => {\n  const isRtl = useRtl();\n  const logger = useGridLogger(apiRef, 'useGridColumnResize');\n  const refs = useLazyRef(createResizeRefs).current;\n\n  // To improve accessibility, the separator has padding on both sides.\n  // Clicking inside the padding area should be treated as a click in the separator.\n  // This ref stores the offset between the click and the separator.\n  const initialOffsetToSeparator = React.useRef(null);\n  const resizeDirection = React.useRef(null);\n  const stopResizeEventTimeout = useTimeout();\n  const touchId = React.useRef(undefined);\n  const updateWidth = newWidth => {\n    logger.debug(`Updating width to ${newWidth} for col ${refs.colDef.field}`);\n    const prevWidth = refs.columnHeaderElement.offsetWidth;\n    const widthDiff = newWidth - prevWidth;\n    const columnWidthDiff = newWidth - refs.initialColWidth;\n    if (columnWidthDiff > 0) {\n      const newTotalWidth = refs.initialTotalWidth + columnWidthDiff;\n      apiRef.current.rootElementRef?.current?.style.setProperty('--DataGrid-rowWidth', `${newTotalWidth}px`);\n    }\n    refs.colDef.computedWidth = newWidth;\n    refs.colDef.width = newWidth;\n    refs.colDef.flex = 0;\n    refs.columnHeaderElement.style.width = `${newWidth}px`;\n    const headerFilterElement = refs.headerFilterElement;\n    if (headerFilterElement) {\n      headerFilterElement.style.width = `${newWidth}px`;\n    }\n    refs.groupHeaderElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.width = finalWidth;\n    });\n    refs.cellElements.forEach(element => {\n      const div = element;\n      let finalWidth;\n      if (div.getAttribute('aria-colspan') === '1') {\n        finalWidth = `${newWidth}px`;\n      } else {\n        // Cell with colspan > 1 cannot be just updated width new width.\n        // Instead, we add width diff to the current width.\n        finalWidth = `${div.offsetWidth + widthDiff}px`;\n      }\n      div.style.setProperty('--width', finalWidth);\n    });\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    if (pinnedPosition === GridPinnedColumnPosition.LEFT) {\n      updateProperty(refs.fillerLeft, 'width', widthDiff);\n      refs.leftPinnedCellsAfter.forEach(cell => {\n        updateProperty(cell, 'left', widthDiff);\n      });\n      refs.leftPinnedHeadersAfter.forEach(header => {\n        updateProperty(header, 'left', widthDiff);\n      });\n    }\n    if (pinnedPosition === GridPinnedColumnPosition.RIGHT) {\n      updateProperty(refs.fillerRight, 'width', widthDiff);\n      refs.rightPinnedCellsBefore.forEach(cell => {\n        updateProperty(cell, 'right', widthDiff);\n      });\n      refs.rightPinnedHeadersBefore.forEach(header => {\n        updateProperty(header, 'right', widthDiff);\n      });\n    }\n  };\n  const finishResize = nativeEvent => {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    stopListening();\n\n    // Prevent double-clicks from being interpreted as two separate clicks\n    if (refs.previousMouseClickEvent) {\n      const prevEvent = refs.previousMouseClickEvent;\n      const prevTimeStamp = prevEvent.timeStamp;\n      const prevClientX = prevEvent.clientX;\n      const prevClientY = prevEvent.clientY;\n\n      // Check if the current event is part of a double-click\n      if (nativeEvent.timeStamp - prevTimeStamp < 300 && nativeEvent.clientX === prevClientX && nativeEvent.clientY === prevClientY) {\n        refs.previousMouseClickEvent = undefined;\n        apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n        return;\n      }\n    }\n    if (refs.colDef) {\n      apiRef.current.setColumnWidth(refs.colDef.field, refs.colDef.width);\n      logger.debug(`Updating col ${refs.colDef.field} with new width: ${refs.colDef.width}`);\n\n      // Since during resizing we update the columns width outside of React, React is unable to\n      // reapply the right style properties. We need to sync the state manually.\n      // So we reapply the same logic as in https://github.com/mui/mui-x/blob/0511bf65543ca05d2602a5a3e0a6156f2fc8e759/packages/x-data-grid/src/hooks/features/columnHeaders/useGridColumnHeaders.tsx#L405\n      const columnsState = gridColumnsStateSelector(apiRef);\n      refs.groupHeaderElements.forEach(element => {\n        const fields = getFieldsFromGroupHeaderElem(element);\n        const div = element;\n        const newWidth = fields.reduce((acc, field) => {\n          if (columnsState.columnVisibilityModel[field] !== false) {\n            return acc + columnsState.lookup[field].computedWidth;\n          }\n          return acc;\n        }, 0);\n        const finalWidth = `${newWidth}px`;\n        div.style.width = finalWidth;\n      });\n    }\n    stopResizeEventTimeout.start(0, () => {\n      apiRef.current.publishEvent('columnResizeStop', null, nativeEvent);\n    });\n  };\n  const storeReferences = (colDef, separator, xStart) => {\n    const root = apiRef.current.rootElementRef.current;\n    refs.initialColWidth = colDef.computedWidth;\n    refs.initialTotalWidth = apiRef.current.getRootDimensions().rowWidth;\n    refs.colDef = colDef;\n    refs.columnHeaderElement = findHeaderElementFromField(apiRef.current.columnHeadersContainerRef.current, colDef.field);\n    const headerFilterElement = root.querySelector(`.${gridClasses.headerFilterRow} [data-field=\"${escapeOperandAttributeSelector(colDef.field)}\"]`);\n    if (headerFilterElement) {\n      refs.headerFilterElement = headerFilterElement;\n    }\n    refs.groupHeaderElements = findGroupHeaderElementsFromField(apiRef.current.columnHeadersContainerRef?.current, colDef.field);\n    refs.cellElements = findGridCellElementsFromCol(refs.columnHeaderElement, apiRef.current);\n    refs.fillerLeft = findGridElement(apiRef.current, isRtl ? 'filler--pinnedRight' : 'filler--pinnedLeft');\n    refs.fillerRight = findGridElement(apiRef.current, isRtl ? 'filler--pinnedLeft' : 'filler--pinnedRight');\n    const pinnedPosition = apiRef.current.unstable_applyPipeProcessors('isColumnPinned', false, refs.colDef.field);\n    refs.leftPinnedCellsAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedCellsAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedCellsBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedCellsBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.leftPinnedHeadersAfter = pinnedPosition !== GridPinnedColumnPosition.LEFT ? [] : findLeftPinnedHeadersAfterCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    refs.rightPinnedHeadersBefore = pinnedPosition !== GridPinnedColumnPosition.RIGHT ? [] : findRightPinnedHeadersBeforeCol(apiRef.current, refs.columnHeaderElement, isRtl);\n    resizeDirection.current = getResizeDirection(separator, isRtl);\n    initialOffsetToSeparator.current = computeOffsetToSeparator(xStart, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n  };\n  const handleResizeMouseUp = useEventCallback(finishResize);\n  const handleResizeMouseMove = useEventCallback(nativeEvent => {\n    // Cancel move in case some other element consumed a mouseup event and it was not fired.\n    if (nativeEvent.buttons === 0) {\n      handleResizeMouseUp(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, nativeEvent.clientX, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchEnd = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n    finishResize(nativeEvent);\n  });\n  const handleTouchMove = useEventCallback(nativeEvent => {\n    const finger = trackFinger(nativeEvent, touchId.current);\n    if (!finger) {\n      return;\n    }\n\n    // Cancel move in case some other element consumed a touchmove event and it was not fired.\n    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {\n      handleTouchEnd(nativeEvent);\n      return;\n    }\n    let newWidth = computeNewWidth(initialOffsetToSeparator.current, finger.x, refs.columnHeaderElement.getBoundingClientRect(), resizeDirection.current);\n    newWidth = clamp(newWidth, refs.colDef.minWidth, refs.colDef.maxWidth);\n    updateWidth(newWidth);\n    const params = {\n      element: refs.columnHeaderElement,\n      colDef: refs.colDef,\n      width: newWidth\n    };\n    apiRef.current.publishEvent('columnResize', params, nativeEvent);\n  });\n  const handleTouchStart = useEventCallback(event => {\n    const cellSeparator = findParentElementFromClassName(event.target, gridClasses['columnSeparator--resizable']);\n    // Let the event bubble if the target is not a col separator\n    if (!cellSeparator) {\n      return;\n    }\n    const touch = event.changedTouches[0];\n    if (touch != null) {\n      // A number that uniquely identifies the current finger in the touch session.\n      touchId.current = touch.identifier;\n    }\n    const columnHeaderElement = findParentElementFromClassName(event.target, gridClasses.columnHeader);\n    const field = getFieldFromHeaderElem(columnHeaderElement);\n    const colDef = apiRef.current.getColumn(field);\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field\n    }, event);\n    storeReferences(colDef, cellSeparator, touch.clientX);\n    const doc = ownerDocument(event.currentTarget);\n    doc.addEventListener('touchmove', handleTouchMove);\n    doc.addEventListener('touchend', handleTouchEnd);\n  });\n  const stopListening = React.useCallback(() => {\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.removeProperty('cursor');\n    doc.removeEventListener('mousemove', handleResizeMouseMove);\n    doc.removeEventListener('mouseup', handleResizeMouseUp);\n    doc.removeEventListener('touchmove', handleTouchMove);\n    doc.removeEventListener('touchend', handleTouchEnd);\n    // The click event runs right after the mouseup event, we want to wait until it\n    // has been canceled before removing our handler.\n    setTimeout(() => {\n      doc.removeEventListener('click', preventClick, true);\n    }, 100);\n    if (refs.columnHeaderElement) {\n      refs.columnHeaderElement.style.pointerEvents = 'unset';\n    }\n  }, [apiRef, refs, handleResizeMouseMove, handleResizeMouseUp, handleTouchMove, handleTouchEnd]);\n  const handleResizeStart = React.useCallback(({\n    field\n  }) => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: field\n      })\n    }));\n  }, [apiRef]);\n  const handleResizeStop = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      columnResize: _extends({}, state.columnResize, {\n        resizingColumnField: ''\n      })\n    }));\n  }, [apiRef]);\n  const handleColumnResizeMouseDown = useEventCallback(({\n    colDef\n  }, event) => {\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Skip if the column isn't resizable\n    if (!event.currentTarget.classList.contains(gridClasses['columnSeparator--resizable'])) {\n      return;\n    }\n\n    // Avoid text selection\n    event.preventDefault();\n    logger.debug(`Start Resize on col ${colDef.field}`);\n    apiRef.current.publishEvent('columnResizeStart', {\n      field: colDef.field\n    }, event);\n    storeReferences(colDef, event.currentTarget, event.clientX);\n    const doc = ownerDocument(apiRef.current.rootElementRef.current);\n    doc.body.style.cursor = 'col-resize';\n    refs.previousMouseClickEvent = event.nativeEvent;\n    doc.addEventListener('mousemove', handleResizeMouseMove);\n    doc.addEventListener('mouseup', handleResizeMouseUp);\n\n    // Prevent the click event if we have resized the column.\n    // Fixes https://github.com/mui/mui-x/issues/4777\n    doc.addEventListener('click', preventClick, true);\n  });\n  const handleColumnSeparatorDoubleClick = useEventCallback((params, event) => {\n    if (props.disableAutosize) {\n      return;\n    }\n\n    // Only handle left clicks\n    if (event.button !== 0) {\n      return;\n    }\n    const column = apiRef.current.state.columns.lookup[params.field];\n    if (column.resizable === false) {\n      return;\n    }\n    apiRef.current.autosizeColumns(_extends({}, props.autosizeOptions, {\n      disableColumnVirtualization: false,\n      columns: [column.field]\n    }));\n  });\n\n  /**\n   * API METHODS\n   */\n\n  const columnVirtualizationDisabled = useColumnVirtualizationDisabled(apiRef);\n  const isAutosizingRef = React.useRef(false);\n  const autosizeColumns = React.useCallback(async userOptions => {\n    const root = apiRef.current.rootElementRef?.current;\n    if (!root) {\n      return;\n    }\n    if (isAutosizingRef.current) {\n      return;\n    }\n    isAutosizingRef.current = true;\n    const state = gridColumnsStateSelector(apiRef);\n    const options = _extends({}, DEFAULT_GRID_AUTOSIZE_OPTIONS, userOptions, {\n      columns: userOptions?.columns ?? state.orderedFields\n    });\n    options.columns = options.columns.filter(c => state.columnVisibilityModel[c] !== false);\n    const columns = options.columns.map(c => apiRef.current.state.columns.lookup[c]);\n    try {\n      if (!props.disableVirtualization && options.disableColumnVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(false);\n        await columnVirtualizationDisabled();\n      }\n      const widthByField = extractColumnWidths(apiRef, options, columns);\n      const newColumns = columns.map(column => _extends({}, column, {\n        width: widthByField[column.field],\n        computedWidth: widthByField[column.field],\n        flex: 0\n      }));\n      if (options.expand) {\n        const visibleColumns = state.orderedFields.map(field => state.lookup[field]).filter(c => state.columnVisibilityModel[c.field] !== false);\n        const totalWidth = visibleColumns.reduce((total, column) => total + (widthByField[column.field] ?? column.computedWidth ?? column.width), 0);\n        const dimensions = apiRef.current.getRootDimensions();\n        const availableWidth = dimensions.viewportInnerSize.width;\n        const remainingWidth = availableWidth - totalWidth;\n        if (remainingWidth > 0) {\n          const widthPerColumn = remainingWidth / (newColumns.length || 1);\n          newColumns.forEach(column => {\n            column.width += widthPerColumn;\n            column.computedWidth += widthPerColumn;\n          });\n        }\n      }\n      apiRef.current.updateColumns(newColumns);\n      newColumns.forEach((newColumn, index) => {\n        if (newColumn.width !== columns[index].width) {\n          const width = newColumn.width;\n          apiRef.current.publishEvent('columnWidthChange', {\n            element: apiRef.current.getColumnHeaderElement(newColumn.field),\n            colDef: newColumn,\n            width\n          });\n        }\n      });\n    } finally {\n      if (!props.disableVirtualization) {\n        apiRef.current.unstable_setColumnVirtualization(true);\n      }\n      isAutosizingRef.current = false;\n    }\n  }, [apiRef, columnVirtualizationDisabled, props.disableVirtualization]);\n\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => stopListening, [stopListening]);\n  useOnMount(() => {\n    if (props.autosizeOnMount) {\n      Promise.resolve().then(() => {\n        apiRef.current.autosizeColumns(props.autosizeOptions);\n      });\n    }\n  });\n  useGridNativeEventListener(apiRef, () => apiRef.current.columnHeadersContainerRef?.current, 'touchstart', handleTouchStart, {\n    passive: true\n  });\n  useGridApiMethod(apiRef, {\n    autosizeColumns\n  }, 'public');\n  useGridEvent(apiRef, 'columnResizeStop', handleResizeStop);\n  useGridEvent(apiRef, 'columnResizeStart', handleResizeStart);\n  useGridEvent(apiRef, 'columnSeparatorMouseDown', handleColumnResizeMouseDown);\n  useGridEvent(apiRef, 'columnSeparatorDoubleClick', handleColumnSeparatorDoubleClick);\n  useGridEventPriority(apiRef, 'columnResize', props.onColumnResize);\n  useGridEventPriority(apiRef, 'columnWidthChange', props.onColumnWidthChange);\n};\nfunction updateProperty(element, property, delta) {\n  if (!element) {\n    return;\n  }\n  element.style[property] = `${parseInt(element.style[property], 10) + delta}px`;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}