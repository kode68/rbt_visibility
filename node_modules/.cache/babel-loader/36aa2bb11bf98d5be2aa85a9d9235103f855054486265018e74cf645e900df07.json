{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { computeOffsetLeft } from '@mui/x-virtualizer';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridColumnsTotalWidthSelector, gridGroupHeaderHeightSelector, gridHasFillerSelector, gridHeaderHeightSelector, gridVerticalScrollbarWidthSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow'\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const gridHasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const headerHeight = useGridSelector(apiRef, gridHeaderHeightSelector);\n  const groupHeaderHeight = useGridSelector(apiRef, gridGroupHeaderHeightSelector);\n  const scrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridEvent(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridEvent(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridEvent(apiRef, 'columnHeaderDragEndNative', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    // HACK: renderContext ins't always synchronized, this should be handled properly.\n    const lastColumnToRender = Math.min(currentContext.lastColumnIndex, visibleColumns.length);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = function (params, children, leftOverflow) {\n    let borderBottom = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const isPinnedRight = (params === null || params === void 0 ? void 0 : params.position) === PinnedColumnPosition.RIGHT;\n    const isNotPinned = (params === null || params === void 0 ? void 0 : params.position) === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getFillers.displayName = \"getFillers\";\n  const getColumnHeaders = function (params) {\n    let other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params === null || params === void 0 ? void 0 : params.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showColumnVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      style: {\n        height: headerHeight\n      },\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getColumnHeadersRow.displayName = \"getColumnHeadersRow\";\n  const getColumnGroupHeaders = _ref => {\n    var _columnGroupsModel$fi, _columnGroupsModel$fi2, _columnGroupsModel$la, _columnGroupsModel$la2;\n    let {\n      depth,\n      params\n    } = _ref;\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = (_columnGroupsModel$fi = (_columnGroupsModel$fi2 = columnGroupsModel[firstColumnFieldToRender]) === null || _columnGroupsModel$fi2 === void 0 ? void 0 : _columnGroupsModel$fi2[depth]) !== null && _columnGroupsModel$fi !== void 0 ? _columnGroupsModel$fi : null;\n    const firstGroupIndex = rowStructure.findIndex(_ref2 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref2;\n      return groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender);\n    });\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = (_columnGroupsModel$la = (_columnGroupsModel$la2 = columnGroupsModel[lastColumnFieldToRender]) === null || _columnGroupsModel$la2 === void 0 ? void 0 : _columnGroupsModel$la2[depth]) !== null && _columnGroupsModel$la !== void 0 ? _columnGroupsModel$la : null;\n    const lastGroupIndex = rowStructure.findIndex(_ref3 => {\n      let {\n        groupId,\n        columnFields\n      } = _ref3;\n      return groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender);\n    });\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      var _column$computedWidth;\n      const column = columnsLookup[field];\n      return acc + ((_column$computedWidth = column.computedWidth) !== null && _column$computedWidth !== void 0 ? _column$computedWidth : 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map((_ref4, index) => {\n      let {\n        groupId,\n        columnFields\n      } = _ref4;\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showColumnVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        style: {\n          height: groupHeaderHeight\n        },\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};","map":{"version":3,"names":["_extends","React","clsx","styled","computeOffsetLeft","useGridSelector","useGridRootProps","useGridPrivateApiContext","useGridEvent","GridColumnHeaderItem","gridColumnsTotalWidthSelector","gridGroupHeaderHeightSelector","gridHasFillerSelector","gridHeaderHeightSelector","gridVerticalScrollbarWidthSelector","gridRenderContextColumnsSelector","GridColumnGroupHeader","gridColumnPositionsSelector","gridVisiblePinnedColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnGroupsUnwrappedModelSelector","GridScrollbarFillerCell","ScrollbarFiller","getPinnedCellOffset","GridColumnHeaderSeparatorSides","gridClasses","shouldCellShowLeftBorder","shouldCellShowRightBorder","PinnedColumnPosition","jsx","_jsx","jsxs","_jsxs","GridColumnHeaderRow","name","slot","display","useGridColumnHeaders","props","visibleColumns","sortColumnLookup","filterColumnLookup","columnHeaderTabIndexState","columnGroupHeaderTabIndexState","columnHeaderFocus","columnGroupHeaderFocus","headerGroupingMaxDepth","columnMenuState","columnVisibility","columnGroupsHeaderStructure","hasOtherElementInTabSequence","dragCol","setDragCol","useState","resizeCol","setResizeCol","apiRef","rootProps","columnGroupsModel","columnPositions","renderContext","pinnedColumns","columnsLookup","offsetLeft","left","length","columnsTotalWidth","gridHasFiller","headerHeight","groupHeaderHeight","scrollbarWidth","handleColumnResizeStart","useCallback","params","field","handleColumnResizeStop","handleColumnReorderStart","handleColumnReorderStop","leftRenderContext","useMemo","firstColumnIndex","lastColumnIndex","rightRenderContext","right","getColumnsToRender","currentContext","firstColumnToRender","lastColumnToRender","Math","min","renderedColumns","slice","getFillers","children","leftOverflow","borderBottom","arguments","undefined","isPinnedRight","position","RIGHT","isNotPinned","hasScrollbarFiller","leftOffsetWidth","Fragment","role","style","width","className","filler","header","pinnedRight","borderTop","process","env","NODE_ENV","displayName","getColumnHeaders","other","columns","i","colDef","columnIndex","isFirstColumn","tabIndex","hasFocus","open","pinnedPosition","pinnedOffset","computedWidth","siblingWithBorderingSeparator","isSiblingFocused","isLastUnpinned","indexInSection","sectionLength","showLeftBorder","showRightBorder","showColumnVerticalBorder","push","columnMenuOpen","filterItemsCounter","isDragging","colIndex","isResizing","isLast","getColumnHeadersRow","ownerState","height","LEFT","disableReorder","separatorSide","Left","getColumnGroupHeaders","_ref","_columnGroupsModel$fi","_columnGroupsModel$fi2","_columnGroupsModel$la","_columnGroupsModel$la2","depth","columnsToRender","rowStructure","firstColumnFieldToRender","firstGroupToRender","firstGroupIndex","findIndex","_ref2","groupId","columnFields","includes","lastColumnFieldToRender","lastGroupToRender","lastGroupIndex","_ref3","visibleColumnGroupHeader","map","groupStructure","filter","firstVisibleColumnIndex","indexOf","hiddenGroupColumns","reduce","acc","_column$computedWidth","column","_ref4","index","headerInfo","fields","isLastColumn","maxDepth","getColumnGroupHeadersRows","headerRows","maxLastColumn","getInnerProps"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/columnHeaders/useGridColumnHeaders.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { styled } from '@mui/material/styles';\nimport { computeOffsetLeft } from '@mui/x-virtualizer';\nimport { useGridSelector } from \"../../utils/index.js\";\nimport { useGridRootProps } from \"../../utils/useGridRootProps.js\";\nimport { useGridPrivateApiContext } from \"../../utils/useGridPrivateApiContext.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { GridColumnHeaderItem } from \"../../../components/columnHeaders/GridColumnHeaderItem.js\";\nimport { gridColumnsTotalWidthSelector, gridGroupHeaderHeightSelector, gridHasFillerSelector, gridHeaderHeightSelector, gridVerticalScrollbarWidthSelector } from \"../dimensions/gridDimensionsSelectors.js\";\nimport { gridRenderContextColumnsSelector } from \"../virtualization/index.js\";\nimport { GridColumnGroupHeader } from \"../../../components/columnHeaders/GridColumnGroupHeader.js\";\nimport { gridColumnPositionsSelector, gridVisiblePinnedColumnDefinitionsSelector, gridColumnLookupSelector } from \"../columns/index.js\";\nimport { gridColumnGroupsUnwrappedModelSelector } from \"../columnGrouping/gridColumnGroupsSelector.js\";\nimport { GridScrollbarFillerCell as ScrollbarFiller } from \"../../../components/GridScrollbarFillerCell.js\";\nimport { getPinnedCellOffset } from \"../../../internals/utils/getPinnedCellOffset.js\";\nimport { GridColumnHeaderSeparatorSides } from \"../../../components/columnHeaders/GridColumnHeaderSeparator.js\";\nimport { gridClasses } from \"../../../constants/gridClasses.js\";\nimport { shouldCellShowLeftBorder, shouldCellShowRightBorder } from \"../../../utils/cellBorderUtils.js\";\nimport { PinnedColumnPosition } from \"../../../internals/constants.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridColumnHeaderRow = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnHeaderRow'\n})({\n  display: 'flex'\n});\nexport const useGridColumnHeaders = props => {\n  const {\n    visibleColumns,\n    sortColumnLookup,\n    filterColumnLookup,\n    columnHeaderTabIndexState,\n    columnGroupHeaderTabIndexState,\n    columnHeaderFocus,\n    columnGroupHeaderFocus,\n    headerGroupingMaxDepth,\n    columnMenuState,\n    columnVisibility,\n    columnGroupsHeaderStructure,\n    hasOtherElementInTabSequence\n  } = props;\n  const [dragCol, setDragCol] = React.useState('');\n  const [resizeCol, setResizeCol] = React.useState('');\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const columnGroupsModel = useGridSelector(apiRef, gridColumnGroupsUnwrappedModelSelector);\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const renderContext = useGridSelector(apiRef, gridRenderContextColumnsSelector);\n  const pinnedColumns = useGridSelector(apiRef, gridVisiblePinnedColumnDefinitionsSelector);\n  const columnsLookup = useGridSelector(apiRef, gridColumnLookupSelector);\n  const offsetLeft = computeOffsetLeft(columnPositions, renderContext, pinnedColumns.left.length);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const gridHasFiller = useGridSelector(apiRef, gridHasFillerSelector);\n  const headerHeight = useGridSelector(apiRef, gridHeaderHeightSelector);\n  const groupHeaderHeight = useGridSelector(apiRef, gridGroupHeaderHeightSelector);\n  const scrollbarWidth = useGridSelector(apiRef, gridVerticalScrollbarWidthSelector);\n  const handleColumnResizeStart = React.useCallback(params => setResizeCol(params.field), []);\n  const handleColumnResizeStop = React.useCallback(() => setResizeCol(''), []);\n  const handleColumnReorderStart = React.useCallback(params => setDragCol(params.field), []);\n  const handleColumnReorderStop = React.useCallback(() => setDragCol(''), []);\n  const leftRenderContext = React.useMemo(() => {\n    return pinnedColumns.left.length ? {\n      firstColumnIndex: 0,\n      lastColumnIndex: pinnedColumns.left.length\n    } : null;\n  }, [pinnedColumns.left.length]);\n  const rightRenderContext = React.useMemo(() => {\n    return pinnedColumns.right.length ? {\n      firstColumnIndex: visibleColumns.length - pinnedColumns.right.length,\n      lastColumnIndex: visibleColumns.length\n    } : null;\n  }, [pinnedColumns.right.length, visibleColumns.length]);\n  useGridEvent(apiRef, 'columnResizeStart', handleColumnResizeStart);\n  useGridEvent(apiRef, 'columnResizeStop', handleColumnResizeStop);\n  useGridEvent(apiRef, 'columnHeaderDragStart', handleColumnReorderStart);\n  useGridEvent(apiRef, 'columnHeaderDragEndNative', handleColumnReorderStop);\n\n  // Helper for computation common between getColumnHeaders and getColumnGroupHeaders\n  const getColumnsToRender = params => {\n    const {\n      renderContext: currentContext = renderContext\n    } = params || {};\n    const firstColumnToRender = currentContext.firstColumnIndex;\n    // HACK: renderContext ins't always synchronized, this should be handled properly.\n    const lastColumnToRender = Math.min(currentContext.lastColumnIndex, visibleColumns.length);\n    const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);\n    return {\n      renderedColumns,\n      firstColumnToRender,\n      lastColumnToRender\n    };\n  };\n  const getFillers = (params, children, leftOverflow, borderBottom = false) => {\n    const isPinnedRight = params?.position === PinnedColumnPosition.RIGHT;\n    const isNotPinned = params?.position === undefined;\n    const hasScrollbarFiller = pinnedColumns.right.length > 0 && isPinnedRight || pinnedColumns.right.length === 0 && isNotPinned;\n    const leftOffsetWidth = offsetLeft - leftOverflow;\n    return /*#__PURE__*/_jsxs(React.Fragment, {\n      children: [isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        style: {\n          width: leftOffsetWidth\n        }\n      }), children, isNotPinned && /*#__PURE__*/_jsx(\"div\", {\n        role: \"presentation\",\n        className: clsx(gridClasses.filler, borderBottom && gridClasses['filler--borderBottom'])\n      }), hasScrollbarFiller && /*#__PURE__*/_jsx(ScrollbarFiller, {\n        header: true,\n        pinnedRight: isPinnedRight,\n        borderBottom: borderBottom,\n        borderTop: false\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getFillers.displayName = \"getFillers\";\n  const getColumnHeaders = (params, other = {}) => {\n    const {\n      renderedColumns,\n      firstColumnToRender\n    } = getColumnsToRender(params);\n    const columns = [];\n    for (let i = 0; i < renderedColumns.length; i += 1) {\n      const colDef = renderedColumns[i];\n      const columnIndex = firstColumnToRender + i;\n      const isFirstColumn = columnIndex === 0;\n      const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;\n      const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;\n      const open = columnMenuState.open && columnMenuState.field === colDef.field;\n      const pinnedPosition = params?.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, colDef.computedWidth, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      const siblingWithBorderingSeparator = pinnedPosition === PinnedColumnPosition.RIGHT ? renderedColumns[i - 1] : renderedColumns[i + 1];\n      const isSiblingFocused = siblingWithBorderingSeparator ? columnHeaderFocus !== null && columnHeaderFocus.field === siblingWithBorderingSeparator.field : false;\n      const isLastUnpinned = columnIndex + 1 === columnPositions.length - pinnedColumns.right.length;\n      const indexInSection = i;\n      const sectionLength = renderedColumns.length;\n      const showLeftBorder = shouldCellShowLeftBorder(pinnedPosition, indexInSection);\n      const showRightBorder = shouldCellShowRightBorder(pinnedPosition, indexInSection, sectionLength, rootProps.showColumnVerticalBorder, gridHasFiller);\n      columns.push(/*#__PURE__*/_jsx(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {\n        columnMenuOpen: open,\n        filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,\n        headerHeight: headerHeight,\n        isDragging: colDef.field === dragCol,\n        colDef: colDef,\n        colIndex: columnIndex,\n        isResizing: resizeCol === colDef.field,\n        isLast: columnIndex === columnPositions.length - 1,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        isLastUnpinned: isLastUnpinned,\n        isSiblingFocused: isSiblingFocused,\n        showLeftBorder: showLeftBorder,\n        showRightBorder: showRightBorder\n      }, other), colDef.field));\n    }\n    return getFillers(params, columns, 0);\n  };\n  const getColumnHeadersRow = () => {\n    return /*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n      role: \"row\",\n      \"aria-rowindex\": headerGroupingMaxDepth + 1,\n      ownerState: rootProps,\n      className: gridClasses['row--borderBottom'],\n      style: {\n        height: headerHeight\n      },\n      children: [leftRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.LEFT,\n        renderContext: leftRenderContext\n      }, {\n        disableReorder: true\n      }), getColumnHeaders({\n        renderContext\n      }), rightRenderContext && getColumnHeaders({\n        position: PinnedColumnPosition.RIGHT,\n        renderContext: rightRenderContext\n      }, {\n        disableReorder: true,\n        separatorSide: GridColumnHeaderSeparatorSides.Left\n      })]\n    });\n  };\n  if (process.env.NODE_ENV !== \"production\") getColumnHeadersRow.displayName = \"getColumnHeadersRow\";\n  const getColumnGroupHeaders = ({\n    depth,\n    params\n  }) => {\n    const columnsToRender = getColumnsToRender(params);\n    if (columnsToRender.renderedColumns.length === 0) {\n      return null;\n    }\n    const {\n      firstColumnToRender,\n      lastColumnToRender\n    } = columnsToRender;\n    const rowStructure = columnGroupsHeaderStructure[depth];\n    const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;\n    const firstGroupToRender = columnGroupsModel[firstColumnFieldToRender]?.[depth] ?? null;\n    const firstGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));\n    const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;\n    const lastGroupToRender = columnGroupsModel[lastColumnFieldToRender]?.[depth] ?? null;\n    const lastGroupIndex = rowStructure.findIndex(({\n      groupId,\n      columnFields\n    }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));\n    const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map(groupStructure => {\n      return _extends({}, groupStructure, {\n        columnFields: groupStructure.columnFields.filter(field => columnVisibility[field] !== false)\n      });\n    }).filter(groupStructure => groupStructure.columnFields.length > 0);\n    const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);\n    const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);\n    const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {\n      const column = columnsLookup[field];\n      return acc + (column.computedWidth ?? 0);\n    }, 0);\n    let columnIndex = firstColumnToRender;\n    const children = visibleColumnGroupHeader.map(({\n      groupId,\n      columnFields\n    }, index) => {\n      const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);\n      const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;\n      const headerInfo = {\n        groupId,\n        width: columnFields.reduce((acc, field) => acc + columnsLookup[field].computedWidth, 0),\n        fields: columnFields,\n        colIndex: columnIndex,\n        hasFocus,\n        tabIndex\n      };\n      const pinnedPosition = params.position;\n      const pinnedOffset = getPinnedCellOffset(pinnedPosition, headerInfo.width, columnIndex, columnPositions, columnsTotalWidth, scrollbarWidth);\n      columnIndex += columnFields.length;\n      let indexInSection = index;\n      if (pinnedPosition === PinnedColumnPosition.LEFT) {\n        // Group headers can expand to multiple columns, we need to adjust the index\n        indexInSection = columnIndex - 1;\n      }\n      return /*#__PURE__*/_jsx(GridColumnGroupHeader, {\n        groupId: groupId,\n        width: headerInfo.width,\n        fields: headerInfo.fields,\n        colIndex: headerInfo.colIndex,\n        depth: depth,\n        isLastColumn: index === visibleColumnGroupHeader.length - 1,\n        maxDepth: headerGroupingMaxDepth,\n        height: groupHeaderHeight,\n        hasFocus: hasFocus,\n        tabIndex: tabIndex,\n        pinnedPosition: pinnedPosition,\n        pinnedOffset: pinnedOffset,\n        showLeftBorder: shouldCellShowLeftBorder(pinnedPosition, indexInSection),\n        showRightBorder: shouldCellShowRightBorder(pinnedPosition, indexInSection, visibleColumnGroupHeader.length, rootProps.showColumnVerticalBorder, gridHasFiller)\n      }, index);\n    });\n    return getFillers(params, children, leftOverflow);\n  };\n  const getColumnGroupHeadersRows = () => {\n    if (headerGroupingMaxDepth === 0) {\n      return null;\n    }\n    const headerRows = [];\n    for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {\n      headerRows.push(/*#__PURE__*/_jsxs(GridColumnHeaderRow, {\n        role: \"row\",\n        \"aria-rowindex\": depth + 1,\n        ownerState: rootProps,\n        style: {\n          height: groupHeaderHeight\n        },\n        children: [leftRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.LEFT,\n            renderContext: leftRenderContext,\n            maxLastColumn: leftRenderContext.lastColumnIndex\n          }\n        }), getColumnGroupHeaders({\n          depth,\n          params: {\n            renderContext\n          }\n        }), rightRenderContext && getColumnGroupHeaders({\n          depth,\n          params: {\n            position: PinnedColumnPosition.RIGHT,\n            renderContext: rightRenderContext,\n            maxLastColumn: rightRenderContext.lastColumnIndex\n          }\n        })]\n      }, depth));\n    }\n    return headerRows;\n  };\n  return {\n    renderContext,\n    leftRenderContext,\n    rightRenderContext,\n    pinnedColumns,\n    visibleColumns,\n    columnPositions,\n    getFillers,\n    getColumnHeadersRow,\n    getColumnsToRender,\n    getColumnGroupHeadersRows,\n    getPinnedCellOffset,\n    isDragging: !!dragCol,\n    getInnerProps: () => ({\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}