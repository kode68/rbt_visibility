{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { gridPreferencePanelStateSelector } from \"./gridPreferencePanelSelector.js\";\nexport const preferencePanelStateInitializer = (state, props) => {\n  var _props$initialState$p, _props$initialState;\n  return _extends({}, state, {\n    preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) === null || _props$initialState === void 0 ? void 0 : _props$initialState.preferencePanel) !== null && _props$initialState$p !== void 0 ? _props$initialState$p : {\n      open: false\n    }\n  });\n};\n\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  var _props$initialState3;\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n\n  /**\n   * API METHODS\n   */\n  const hidePreferences = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (!state.preferencePanel.open) {\n        return state;\n      }\n      logger.debug('Hiding Preferences Panel');\n      const preferencePanelState = gridPreferencePanelStateSelector(apiRef);\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n      return _extends({}, state, {\n        preferencePanel: {\n          open: false\n        }\n      });\n    });\n  }, [apiRef, logger]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n  }, [logger, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences\n  }, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState2;\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef);\n    const shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    ((_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.preferencePanel) != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, (_props$initialState3 = props.initialState) === null || _props$initialState3 === void 0 ? void 0 : _props$initialState3.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","useGridRegisterPipeProcessor","gridPreferencePanelStateSelector","preferencePanelStateInitializer","state","props","_props$initialState$p","_props$initialState","preferencePanel","initialState","open","useGridPreferencesPanel","apiRef","_props$initialState3","logger","hidePreferences","useCallback","current","setState","debug","preferencePanelState","publishEvent","openedPanelValue","showPreferences","newValue","panelId","labelId","stateExportPreProcessing","prevState","context","_props$initialState2","preferencePanelToExport","shouldExportPreferencePanel","exportOnlyDirtyModels","stateRestorePreProcessing","params","stateToRestore"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/preferencesPanel/useGridPreferencesPanel.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { useGridRegisterPipeProcessor } from \"../../core/pipeProcessing/index.js\";\nimport { gridPreferencePanelStateSelector } from \"./gridPreferencePanelSelector.js\";\nexport const preferencePanelStateInitializer = (state, props) => _extends({}, state, {\n  preferencePanel: props.initialState?.preferencePanel ?? {\n    open: false\n  }\n});\n\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexport const useGridPreferencesPanel = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPreferencesPanel');\n\n  /**\n   * API METHODS\n   */\n  const hidePreferences = React.useCallback(() => {\n    apiRef.current.setState(state => {\n      if (!state.preferencePanel.open) {\n        return state;\n      }\n      logger.debug('Hiding Preferences Panel');\n      const preferencePanelState = gridPreferencePanelStateSelector(apiRef);\n      apiRef.current.publishEvent('preferencePanelClose', {\n        openedPanelValue: preferencePanelState.openedPanelValue\n      });\n      return _extends({}, state, {\n        preferencePanel: {\n          open: false\n        }\n      });\n    });\n  }, [apiRef, logger]);\n  const showPreferences = React.useCallback((newValue, panelId, labelId) => {\n    logger.debug('Opening Preferences Panel');\n    apiRef.current.setState(state => _extends({}, state, {\n      preferencePanel: _extends({}, state.preferencePanel, {\n        open: true,\n        openedPanelValue: newValue,\n        panelId,\n        labelId\n      })\n    }));\n    apiRef.current.publishEvent('preferencePanelOpen', {\n      openedPanelValue: newValue\n    });\n  }, [logger, apiRef]);\n  useGridApiMethod(apiRef, {\n    showPreferences,\n    hidePreferences\n  }, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef);\n    const shouldExportPreferencePanel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the panel was initialized\n    props.initialState?.preferencePanel != null ||\n    // Always export if the panel is opened\n    preferencePanelToExport.open;\n    if (!shouldExportPreferencePanel) {\n      return prevState;\n    }\n    return _extends({}, prevState, {\n      preferencePanel: preferencePanelToExport\n    });\n  }, [apiRef, props.initialState?.preferencePanel]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const preferencePanel = context.stateToRestore.preferencePanel;\n    if (preferencePanel != null) {\n      apiRef.current.setState(state => _extends({}, state, {\n        preferencePanel\n      }));\n    }\n    return params;\n  }, [apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,4BAA4B,QAAQ,oCAAoC;AACjF,SAASC,gCAAgC,QAAQ,kCAAkC;AACnF,OAAO,MAAMC,+BAA+B,GAAGA,CAACC,KAAK,EAAEC,KAAK;EAAA,IAAAC,qBAAA,EAAAC,mBAAA;EAAA,OAAKV,QAAQ,CAAC,CAAC,CAAC,EAAEO,KAAK,EAAE;IACnFI,eAAe,GAAAF,qBAAA,IAAAC,mBAAA,GAAEF,KAAK,CAACI,YAAY,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBC,eAAe,cAAAF,qBAAA,cAAAA,qBAAA,GAAI;MACtDI,IAAI,EAAE;IACR;EACF,CAAC,CAAC;AAAA;;AAEF;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAACC,MAAM,EAAEP,KAAK,KAAK;EAAA,IAAAQ,oBAAA;EACxD,MAAMC,MAAM,GAAGd,aAAa,CAACY,MAAM,EAAE,yBAAyB,CAAC;;EAE/D;AACF;AACA;EACE,MAAMG,eAAe,GAAGjB,KAAK,CAACkB,WAAW,CAAC,MAAM;IAC9CJ,MAAM,CAACK,OAAO,CAACC,QAAQ,CAACd,KAAK,IAAI;MAC/B,IAAI,CAACA,KAAK,CAACI,eAAe,CAACE,IAAI,EAAE;QAC/B,OAAON,KAAK;MACd;MACAU,MAAM,CAACK,KAAK,CAAC,0BAA0B,CAAC;MACxC,MAAMC,oBAAoB,GAAGlB,gCAAgC,CAACU,MAAM,CAAC;MACrEA,MAAM,CAACK,OAAO,CAACI,YAAY,CAAC,sBAAsB,EAAE;QAClDC,gBAAgB,EAAEF,oBAAoB,CAACE;MACzC,CAAC,CAAC;MACF,OAAOzB,QAAQ,CAAC,CAAC,CAAC,EAAEO,KAAK,EAAE;QACzBI,eAAe,EAAE;UACfE,IAAI,EAAE;QACR;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAACE,MAAM,EAAEE,MAAM,CAAC,CAAC;EACpB,MAAMS,eAAe,GAAGzB,KAAK,CAACkB,WAAW,CAAC,CAACQ,QAAQ,EAAEC,OAAO,EAAEC,OAAO,KAAK;IACxEZ,MAAM,CAACK,KAAK,CAAC,2BAA2B,CAAC;IACzCP,MAAM,CAACK,OAAO,CAACC,QAAQ,CAACd,KAAK,IAAIP,QAAQ,CAAC,CAAC,CAAC,EAAEO,KAAK,EAAE;MACnDI,eAAe,EAAEX,QAAQ,CAAC,CAAC,CAAC,EAAEO,KAAK,CAACI,eAAe,EAAE;QACnDE,IAAI,EAAE,IAAI;QACVY,gBAAgB,EAAEE,QAAQ;QAC1BC,OAAO;QACPC;MACF,CAAC;IACH,CAAC,CAAC,CAAC;IACHd,MAAM,CAACK,OAAO,CAACI,YAAY,CAAC,qBAAqB,EAAE;MACjDC,gBAAgB,EAAEE;IACpB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACV,MAAM,EAAEF,MAAM,CAAC,CAAC;EACpBb,gBAAgB,CAACa,MAAM,EAAE;IACvBW,eAAe;IACfR;EACF,CAAC,EAAE,QAAQ,CAAC;;EAEZ;AACF;AACA;EACE,MAAMY,wBAAwB,GAAG7B,KAAK,CAACkB,WAAW,CAAC,CAACY,SAAS,EAAEC,OAAO,KAAK;IAAA,IAAAC,oBAAA;IACzE,MAAMC,uBAAuB,GAAG7B,gCAAgC,CAACU,MAAM,CAAC;IACxE,MAAMoB,2BAA2B;IACjC;IACA,CAACH,OAAO,CAACI,qBAAqB;IAC9B;IACA,EAAAH,oBAAA,GAAAzB,KAAK,CAACI,YAAY,cAAAqB,oBAAA,uBAAlBA,oBAAA,CAAoBtB,eAAe,KAAI,IAAI;IAC3C;IACAuB,uBAAuB,CAACrB,IAAI;IAC5B,IAAI,CAACsB,2BAA2B,EAAE;MAChC,OAAOJ,SAAS;IAClB;IACA,OAAO/B,QAAQ,CAAC,CAAC,CAAC,EAAE+B,SAAS,EAAE;MAC7BpB,eAAe,EAAEuB;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACnB,MAAM,GAAAC,oBAAA,GAAER,KAAK,CAACI,YAAY,cAAAI,oBAAA,uBAAlBA,oBAAA,CAAoBL,eAAe,CAAC,CAAC;EACjD,MAAM0B,yBAAyB,GAAGpC,KAAK,CAACkB,WAAW,CAAC,CAACmB,MAAM,EAAEN,OAAO,KAAK;IACvE,MAAMrB,eAAe,GAAGqB,OAAO,CAACO,cAAc,CAAC5B,eAAe;IAC9D,IAAIA,eAAe,IAAI,IAAI,EAAE;MAC3BI,MAAM,CAACK,OAAO,CAACC,QAAQ,CAACd,KAAK,IAAIP,QAAQ,CAAC,CAAC,CAAC,EAAEO,KAAK,EAAE;QACnDI;MACF,CAAC,CAAC,CAAC;IACL;IACA,OAAO2B,MAAM;EACf,CAAC,EAAE,CAACvB,MAAM,CAAC,CAAC;EACZX,4BAA4B,CAACW,MAAM,EAAE,aAAa,EAAEe,wBAAwB,CAAC;EAC7E1B,4BAA4B,CAACW,MAAM,EAAE,cAAc,EAAEsB,yBAAyB,CAAC;AACjF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}