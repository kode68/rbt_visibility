{"ast":null,"code":"// src/firebase.js\nimport{initializeApp,getApps,getApp}from\"firebase/app\";import{getAuth,browserLocalPersistence,setPersistence,// initializeAuth, indexedDBLocalPersistence, // <- use these instead if you ever target React Native\nconnectAuthEmulator}from\"firebase/auth\";import{getFirestore,connectFirestoreEmulator,setLogLevel}from\"firebase/firestore\";/**\r\n * ---- Config from environment (prod-safe) ----\r\n * Keep your real keys in .env / .env.production\r\n * For local development, override in .env.local\r\n */const firebaseConfig={apiKey:process.env.REACT_APP_FIREBASE_API_KEY,authDomain:process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,projectId:process.env.REACT_APP_FIREBASE_PROJECT_ID,storageBucket:process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_FIREBASE_APP_ID,measurementId:process.env.REACT_APP_FIREBASE_MEASUREMENT_ID||undefined};// ---- Behavior toggles ----\nconst useEmulators=String(process.env.REACT_APP_USE_EMULATOR||\"false\").toLowerCase()===\"true\";const isDev=process.env.NODE_ENV===\"development\";// Optional: strict sanity check in production builds\nif(!useEmulators){const required=[\"REACT_APP_FIREBASE_API_KEY\",\"REACT_APP_FIREBASE_AUTH_DOMAIN\",\"REACT_APP_FIREBASE_PROJECT_ID\",\"REACT_APP_FIREBASE_APP_ID\"];for(const key of required){if(!process.env[key]){// Don't throw in dev to avoid breaking DX; warn instead.\n// In prod, this will still compile but you can see the error in logs.\n// If you prefer hard-fail, replace console.error with: throw new Error(...)\nconsole.error(`[firebase] Missing env: ${key}`);}}}// Optional verbose Firestore logs in dev\nif(isDev){setLogLevel(\"debug\");console.log(`[firebase] Mode: ${useEmulators?\"EMULATORS\":\"PRODUCTION\"} | NODE_ENV=${process.env.NODE_ENV}`);}// ---- Initialize (reuse if hot reloaded) ----\nconst app=getApps().length?getApp():initializeApp(firebaseConfig);const auth=getAuth(app);const db=getFirestore(app);// Persist user sessions across refreshes\nsetPersistence(auth,browserLocalPersistence).catch(()=>{/* ignore */});// ---- Emulator wiring (opt-in) ----\n// NOTE: We call direct connect* APIs to keep emulator code out of prod bundles.\nif(useEmulators){try{connectAuthEmulator(auth,\"http://localhost:9099\",{disableWarnings:true});}catch(e){// ignore double-connect during hot reload\n}try{connectFirestoreEmulator(db,\"localhost\",8080);}catch(e){// ignore double-connect during hot reload\n}if(isDev)console.log(\"[firebase] Connected to Auth(9099) + Firestore(8080) emulators\");}// Handy for quick inspection from the browser console\nif(typeof window!==\"undefined\"){window.__FIREBASE__={app,auth,db,useEmulators};}export{app,auth,db};","map":{"version":3,"names":["initializeApp","getApps","getApp","getAuth","browserLocalPersistence","setPersistence","connectAuthEmulator","getFirestore","connectFirestoreEmulator","setLogLevel","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","undefined","useEmulators","String","REACT_APP_USE_EMULATOR","toLowerCase","isDev","NODE_ENV","required","key","console","error","log","app","length","auth","db","catch","disableWarnings","e","window","__FIREBASE__"],"sources":["C:/Users/mis/rbt-dashboard/src/firebase.js"],"sourcesContent":["// src/firebase.js\r\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\r\nimport {\r\n  getAuth,\r\n  browserLocalPersistence,\r\n  setPersistence,\r\n  // initializeAuth, indexedDBLocalPersistence, // <- use these instead if you ever target React Native\r\n  connectAuthEmulator,\r\n} from \"firebase/auth\";\r\nimport {\r\n  getFirestore,\r\n  connectFirestoreEmulator,\r\n  setLogLevel,\r\n} from \"firebase/firestore\";\r\n\r\n/**\r\n * ---- Config from environment (prod-safe) ----\r\n * Keep your real keys in .env / .env.production\r\n * For local development, override in .env.local\r\n */\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID || undefined,\r\n};\r\n\r\n// ---- Behavior toggles ----\r\nconst useEmulators =\r\n  String(process.env.REACT_APP_USE_EMULATOR || \"false\").toLowerCase() === \"true\";\r\nconst isDev = process.env.NODE_ENV === \"development\";\r\n\r\n// Optional: strict sanity check in production builds\r\nif (!useEmulators) {\r\n  const required = [\r\n    \"REACT_APP_FIREBASE_API_KEY\",\r\n    \"REACT_APP_FIREBASE_AUTH_DOMAIN\",\r\n    \"REACT_APP_FIREBASE_PROJECT_ID\",\r\n    \"REACT_APP_FIREBASE_APP_ID\",\r\n  ];\r\n  for (const key of required) {\r\n    if (!process.env[key]) {\r\n      // Don't throw in dev to avoid breaking DX; warn instead.\r\n      // In prod, this will still compile but you can see the error in logs.\r\n      // If you prefer hard-fail, replace console.error with: throw new Error(...)\r\n      console.error(`[firebase] Missing env: ${key}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Optional verbose Firestore logs in dev\r\nif (isDev) {\r\n  setLogLevel(\"debug\");\r\n  console.log(\r\n    `[firebase] Mode: ${useEmulators ? \"EMULATORS\" : \"PRODUCTION\"} | NODE_ENV=${process.env.NODE_ENV}`\r\n  );\r\n}\r\n\r\n// ---- Initialize (reuse if hot reloaded) ----\r\nconst app = getApps().length ? getApp() : initializeApp(firebaseConfig);\r\nconst auth = getAuth(app);\r\nconst db = getFirestore(app);\r\n\r\n// Persist user sessions across refreshes\r\nsetPersistence(auth, browserLocalPersistence).catch(() => { /* ignore */ });\r\n\r\n// ---- Emulator wiring (opt-in) ----\r\n// NOTE: We call direct connect* APIs to keep emulator code out of prod bundles.\r\nif (useEmulators) {\r\n  try {\r\n    connectAuthEmulator(auth, \"http://localhost:9099\", { disableWarnings: true });\r\n  } catch (e) {\r\n    // ignore double-connect during hot reload\r\n  }\r\n  try {\r\n    connectFirestoreEmulator(db, \"localhost\", 8080);\r\n  } catch (e) {\r\n    // ignore double-connect during hot reload\r\n  }\r\n  if (isDev) console.log(\"[firebase] Connected to Auth(9099) + Firestore(8080) emulators\");\r\n}\r\n\r\n// Handy for quick inspection from the browser console\r\nif (typeof window !== \"undefined\") {\r\n  window.__FIREBASE__ = { app, auth, db, useEmulators };\r\n}\r\n\r\nexport { app, auth, db };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}