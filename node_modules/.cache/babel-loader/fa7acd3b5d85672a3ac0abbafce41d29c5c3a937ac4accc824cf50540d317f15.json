{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridFilterInputMultipleSingleSelect(props) {\n  var _resolvedColumn, _resolvedColumn2;\n  const {\n      item,\n      applyValue,\n      type,\n      apiRef,\n      focusElementRef,\n      slotProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = (_resolvedColumn = resolvedColumn) === null || _resolvedColumn === void 0 ? void 0 : _resolvedColumn.getOptionValue;\n  const getOptionLabel = (_resolvedColumn2 = resolvedColumn) === null || _resolvedColumn2 === void 0 ? void 0 : _resolvedColumn2.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  const BaseAutocomplete = rootProps.slots.baseAutocomplete;\n  return /*#__PURE__*/_jsx(BaseAutocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n    slotProps: {\n      textField: {\n        type: type || 'text',\n        inputRef: focusElementRef\n      }\n    }\n  }, other, slotProps === null || slotProps === void 0 ? void 0 : slotProps.root));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  clearButton: PropTypes.node,\n  disabled: PropTypes.bool,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  headerFilterMenu: PropTypes.node,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: (props, propName) => {\n      if (props[propName] == null) {\n        return null;\n      }\n      if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n        return new Error(\"Expected prop '\".concat(propName, \"' to be of type Element\"));\n      }\n      return null;\n    }\n  })]),\n  /**\n   * It is `true` if the filter either has a value or an operator with no value\n   * required is selected (for example `isEmpty`)\n   */\n  isFilterActive: PropTypes.bool,\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  slotProps: PropTypes.object,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","useId","useGridRootProps","getValueOptions","isSingleSelectColDef","jsx","_jsx","GridFilterInputMultipleSingleSelect","props","_resolvedColumn","_resolvedColumn2","item","applyValue","type","apiRef","focusElementRef","slotProps","other","id","rootProps","resolvedColumn","field","column","current","getColumn","getOptionValue","getOptionLabel","isOptionEqualToValue","useCallback","option","value","resolvedValueOptions","useMemo","filteredValues","Array","isArray","reduce","acc","resolvedValue","find","v","push","handleChange","event","map","BaseAutocomplete","slots","baseAutocomplete","multiple","options","onChange","label","getLocaleText","placeholder","textField","inputRef","root","process","env","NODE_ENV","propTypes","shape","object","isRequired","func","className","string","clearButton","node","disabled","bool","oneOfType","headerFilterMenu","propName","nodeType","Error","concat","isFilterActive","number","operator","any","onBlur","onFocus","tabIndex","oneOf"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\", \"slotProps\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport useId from '@mui/utils/useId';\nimport { useGridRootProps } from \"../../../hooks/utils/useGridRootProps.js\";\nimport { getValueOptions, isSingleSelectColDef } from \"./filterPanelUtils.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const {\n      item,\n      applyValue,\n      type,\n      apiRef,\n      focusElementRef,\n      slotProps\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const id = useId();\n  const rootProps = useGridRootProps();\n  let resolvedColumn = null;\n  if (item.field) {\n    const column = apiRef.current.getColumn(item.field);\n    if (isSingleSelectColDef(column)) {\n      resolvedColumn = column;\n    }\n  }\n  const getOptionValue = resolvedColumn?.getOptionValue;\n  const getOptionLabel = resolvedColumn?.getOptionLabel;\n  const isOptionEqualToValue = React.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);\n  const resolvedValueOptions = React.useMemo(() => {\n    return getValueOptions(resolvedColumn) || [];\n  }, [resolvedColumn]);\n\n  // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useState, the Autocomplete could receive incoherent value and options\n  const filteredValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n    return item.value.reduce((acc, value) => {\n      const resolvedValue = resolvedValueOptions.find(v => getOptionValue(v) === value);\n      if (resolvedValue != null) {\n        acc.push(resolvedValue);\n      }\n      return acc;\n    }, []);\n  }, [getOptionValue, item.value, resolvedValueOptions]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: value.map(getOptionValue)\n    }));\n  }, [applyValue, item, getOptionValue]);\n  const BaseAutocomplete = rootProps.slots.baseAutocomplete;\n  return /*#__PURE__*/_jsx(BaseAutocomplete, _extends({\n    multiple: true,\n    options: resolvedValueOptions,\n    isOptionEqualToValue: isOptionEqualToValue,\n    id: id,\n    value: filteredValues,\n    onChange: handleChange,\n    getOptionLabel: getOptionLabel,\n    label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n    placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n    slotProps: {\n      textField: {\n        type: type || 'text',\n        inputRef: focusElementRef\n      }\n    }\n  }, other, slotProps?.root));\n}\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.shape({\n    current: PropTypes.object.isRequired\n  }).isRequired,\n  applyValue: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  clearButton: PropTypes.node,\n  disabled: PropTypes.bool,\n  focusElementRef: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.func, PropTypes.object]),\n  headerFilterMenu: PropTypes.node,\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: (props, propName) => {\n      if (props[propName] == null) {\n        return null;\n      }\n      if (typeof props[propName] !== 'object' || props[propName].nodeType !== 1) {\n        return new Error(`Expected prop '${propName}' to be of type Element`);\n      }\n      return null;\n    }\n  })]),\n  /**\n   * It is `true` if the filter either has a value or an operator with no value\n   * required is selected (for example `isEmpty`)\n   */\n  isFilterActive: PropTypes.bool,\n  item: PropTypes.shape({\n    field: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operator: PropTypes.string.isRequired,\n    value: PropTypes.any\n  }).isRequired,\n  onBlur: PropTypes.func,\n  onFocus: PropTypes.func,\n  slotProps: PropTypes.object,\n  tabIndex: PropTypes.number,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}