{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { TimerBasedCleanupTracking } from \"../../utils/cleanupTracking/TimerBasedCleanupTracking.js\";\nimport { FinalizationRegistryBasedCleanupTracking } from \"../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js\";\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {\n  static create() {\n    return new ObjectToBeRetainedByReact();\n  }\n}\nconst registryContainer = {\n  current: createRegistry()\n};\nlet cleanupTokensCounter = 0;\nexport function useGridEvent(apiRef, eventName, handler, options) {\n  const objectRetainedByReact = React.useState(ObjectToBeRetainedByReact.create)[0];\n  const subscription = React.useRef(null);\n  const handlerRef = React.useRef(null);\n  handlerRef.current = handler;\n  const cleanupTokenRef = React.useRef(null);\n  if (!subscription.current && handlerRef.current) {\n    const enhancedHandler = (params, event, details) => {\n      if (!event.defaultMuiPrevented) {\n        var _handlerRef$current;\n        (_handlerRef$current = handlerRef.current) === null || _handlerRef$current === void 0 || _handlerRef$current.call(handlerRef, params, event, details);\n      }\n    };\n    subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n    cleanupTokensCounter += 1;\n    cleanupTokenRef.current = {\n      cleanupToken: cleanupTokensCounter\n    };\n    registryContainer.current.register(objectRetainedByReact,\n    // The callback below will be called once this reference stops being retained\n    () => {\n      var _subscription$current;\n      (_subscription$current = subscription.current) === null || _subscription$current === void 0 || _subscription$current.call(subscription);\n      subscription.current = null;\n      cleanupTokenRef.current = null;\n    }, cleanupTokenRef.current);\n  } else if (!handlerRef.current && subscription.current) {\n    subscription.current();\n    subscription.current = null;\n    if (cleanupTokenRef.current) {\n      registryContainer.current.unregister(cleanupTokenRef.current);\n      cleanupTokenRef.current = null;\n    }\n  }\n  React.useEffect(() => {\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          var _handlerRef$current2;\n          (_handlerRef$current2 = handlerRef.current) === null || _handlerRef$current2 === void 0 || _handlerRef$current2.call(handlerRef, params, event, details);\n        }\n      };\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n    }\n    if (cleanupTokenRef.current && registryContainer.current) {\n      // If the effect was called, it means that this render was committed\n      // so we can trust the cleanup function to remove the listener.\n      registryContainer.current.unregister(cleanupTokenRef.current);\n      cleanupTokenRef.current = null;\n    }\n    return () => {\n      var _subscription$current2;\n      (_subscription$current2 = subscription.current) === null || _subscription$current2 === void 0 || _subscription$current2.call(subscription);\n      subscription.current = null;\n    };\n  }, [apiRef, eventName, options]);\n}\nconst OPTIONS_IS_FIRST = {\n  isFirst: true\n};\nexport function useGridEventPriority(apiRef, eventName, handler) {\n  useGridEvent(apiRef, eventName, handler, OPTIONS_IS_FIRST);\n}\n\n// TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_resetCleanupTracking() {\n  var _registryContainer$cu;\n  (_registryContainer$cu = registryContainer.current) === null || _registryContainer$cu === void 0 || _registryContainer$cu.reset();\n  registryContainer.current = createRegistry();\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const internal_registryContainer = registryContainer;\nfunction createRegistry() {\n  return typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n}","map":{"version":3,"names":["React","TimerBasedCleanupTracking","FinalizationRegistryBasedCleanupTracking","ObjectToBeRetainedByReact","create","registryContainer","current","createRegistry","cleanupTokensCounter","useGridEvent","apiRef","eventName","handler","options","objectRetainedByReact","useState","subscription","useRef","handlerRef","cleanupTokenRef","enhancedHandler","params","event","details","defaultMuiPrevented","_handlerRef$current","call","subscribeEvent","cleanupToken","register","_subscription$current","unregister","useEffect","_handlerRef$current2","_subscription$current2","OPTIONS_IS_FIRST","isFirst","useGridEventPriority","unstable_resetCleanupTracking","_registryContainer$cu","reset","internal_registryContainer","FinalizationRegistry"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/utils/useGridEvent.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { TimerBasedCleanupTracking } from \"../../utils/cleanupTracking/TimerBasedCleanupTracking.js\";\nimport { FinalizationRegistryBasedCleanupTracking } from \"../../utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js\";\n// Based on https://github.com/Bnaya/use-dispose-uncommitted/blob/main/src/finalization-registry-based-impl.ts\n// Check https://github.com/facebook/react/issues/15317 to get more information\n\n// We use class to make it easier to detect in heap snapshots by name\nclass ObjectToBeRetainedByReact {\n  static create() {\n    return new ObjectToBeRetainedByReact();\n  }\n}\nconst registryContainer = {\n  current: createRegistry()\n};\nlet cleanupTokensCounter = 0;\nexport function useGridEvent(apiRef, eventName, handler, options) {\n  const objectRetainedByReact = React.useState(ObjectToBeRetainedByReact.create)[0];\n  const subscription = React.useRef(null);\n  const handlerRef = React.useRef(null);\n  handlerRef.current = handler;\n  const cleanupTokenRef = React.useRef(null);\n  if (!subscription.current && handlerRef.current) {\n    const enhancedHandler = (params, event, details) => {\n      if (!event.defaultMuiPrevented) {\n        handlerRef.current?.(params, event, details);\n      }\n    };\n    subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n    cleanupTokensCounter += 1;\n    cleanupTokenRef.current = {\n      cleanupToken: cleanupTokensCounter\n    };\n    registryContainer.current.register(objectRetainedByReact,\n    // The callback below will be called once this reference stops being retained\n    () => {\n      subscription.current?.();\n      subscription.current = null;\n      cleanupTokenRef.current = null;\n    }, cleanupTokenRef.current);\n  } else if (!handlerRef.current && subscription.current) {\n    subscription.current();\n    subscription.current = null;\n    if (cleanupTokenRef.current) {\n      registryContainer.current.unregister(cleanupTokenRef.current);\n      cleanupTokenRef.current = null;\n    }\n  }\n  React.useEffect(() => {\n    if (!subscription.current && handlerRef.current) {\n      const enhancedHandler = (params, event, details) => {\n        if (!event.defaultMuiPrevented) {\n          handlerRef.current?.(params, event, details);\n        }\n      };\n      subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);\n    }\n    if (cleanupTokenRef.current && registryContainer.current) {\n      // If the effect was called, it means that this render was committed\n      // so we can trust the cleanup function to remove the listener.\n      registryContainer.current.unregister(cleanupTokenRef.current);\n      cleanupTokenRef.current = null;\n    }\n    return () => {\n      subscription.current?.();\n      subscription.current = null;\n    };\n  }, [apiRef, eventName, options]);\n}\nconst OPTIONS_IS_FIRST = {\n  isFirst: true\n};\nexport function useGridEventPriority(apiRef, eventName, handler) {\n  useGridEvent(apiRef, eventName, handler, OPTIONS_IS_FIRST);\n}\n\n// TODO: move to @mui/x-data-grid/internals\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_resetCleanupTracking() {\n  registryContainer.current?.reset();\n  registryContainer.current = createRegistry();\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const internal_registryContainer = registryContainer;\nfunction createRegistry() {\n  return typeof FinalizationRegistry !== 'undefined' ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}