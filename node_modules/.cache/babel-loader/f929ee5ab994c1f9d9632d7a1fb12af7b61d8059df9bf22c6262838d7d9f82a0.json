{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from \"./gridColumnsSelector.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from \"./gridColumnsUtils.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _ref, _props$columnVisibili, _props$initialState2, _state$pinnedColumns;\n  apiRef.current.caches.columns = {\n    lastColumnsProp: props.columns\n  };\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState = props.initialState) === null || _props$initialState === void 0 ? void 0 : _props$initialState.columns,\n    columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) !== null && _props$columnVisibili !== void 0 ? _props$columnVisibili : (_props$initialState2 = props.initialState) === null || _props$initialState2 === void 0 || (_props$initialState2 = _props$initialState2.columns) === null || _props$initialState2 === void 0 ? void 0 : _props$initialState2.columnVisibilityModel) !== null && _ref !== void 0 ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: (_state$pinnedColumns = state.pinnedColumns) !== null && _state$pinnedColumns !== void 0 ? _state$pinnedColumns : EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  var _props$initialState4, _props$slotProps2;\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback(function (field) {\n    let useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      var _apiRef$current$updat, _apiRef$current;\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      (_apiRef$current$updat = (_apiRef$current = apiRef.current).updateRenderContext) === null || _apiRef$current$updat === void 0 || _apiRef$current$updat.call(_apiRef$current);\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    var _columnVisibilityMode;\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) !== null && _columnVisibilityMode !== void 0 ? _columnVisibilityMode : true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(\"Moving column \".concat(field, \" to index \").concat(targetIndexPosition));\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(\"Updating column \".concat(field, \" width to \").concat(width));\n    const columnsState = gridColumnsStateSelector(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    var _props$initialState$c, _props$initialState3;\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) === null || _props$initialState3 === void 0 || (_props$initialState3 = _props$initialState3.columns) === null || _props$initialState3 === void 0 ? void 0 : _props$initialState3.columnVisibilityModel) !== null && _props$initialState$c !== void 0 ? _props$initialState$c : {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) === null || _props$initialState4 === void 0 ? void 0 : _props$initialState4.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const initialState = context.stateToRestore.columns;\n    const columnVisibilityModelToImport = initialState === null || initialState === void 0 ? void 0 : initialState.columnVisibilityModel;\n    if (initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    if (initialState != null) {\n      apiRef.current.setState(prevState => _extends({}, prevState, {\n        columns: _extends({}, prevState.columns, {\n          lookup: columnsState.lookup,\n          orderedFields: columnsState.orderedFields,\n          initialColumnVisibilityModel: columnsState.initialColumnVisibilityModel\n        })\n      }));\n    }\n\n    // separate column visibility model state update as it can be controlled\n    // https://github.com/mui/mui-x/issues/17681#issuecomment-3012528602\n    if (columnVisibilityModelToImport != null) {\n      apiRef.current.setState(prevState => _extends({}, prevState, {\n        columns: _extends({}, prevState.columns, {\n          columnVisibilityModel: columnVisibilityModelToImport\n        })\n      }));\n    }\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$slotProps;\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) === null || _props$slotProps === void 0 ? void 0 : _props$slotProps.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) === null || _props$slotProps2 === void 0 ? void 0 : _props$slotProps2.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = gridPivotActiveSelector(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = gridVisibleColumnDefinitionsSelector(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(\"Columns pipe processing have changed, regenerating the columns\");\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  React.useEffect(() => {\n    if (apiRef.current.caches.columns.lastColumnsProp === props.columns) {\n      return;\n    }\n    apiRef.current.caches.columns.lastColumnsProp = props.columns;\n    logger.info(\"GridColumns have changed, new length \".concat(props.columns.length));\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true,\n      columnVisibilityModel: props.columnVisibilityModel\n    });\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, props.columnVisibilityModel]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsStateSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","GridSignature","useGridEvent","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","EMPTY_PINNED_COLUMN_FIELDS","hydrateColumnsWidth","createColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","gridPivotActiveSelector","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_ref","_props$columnVisibili","_props$initialState2","_state$pinnedColumns","current","caches","columns","lastColumnsProp","columnsState","columnsToUpsert","initialState","columnVisibilityModel","keepOnlyColumnsToUpsert","pinnedColumns","useGridColumns","_props$initialState4","_props$slotProps2","logger","registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","mergeColumnsState","publishEvent","orderedFields","getColumn","field","getAllColumns","getVisibleColumns","getColumnIndex","useVisibleColumns","arguments","length","undefined","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","_apiRef$current$updat","_apiRef$current","updateRenderContext","call","updateColumns","updateNonPivotColumns","updateInitialVisibilityModel","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","getColumnIndexRelativeToVisibleColumns","allColumns","setColumnIndex","targetIndexPosition","oldIndexPosition","concat","updatedColumns","fieldRemoved","splice","params","column","targetIndex","oldIndex","setColumnWidth","width","lookup","newColumn","hasBeenResized","getRootDimensions","element","getColumnHeaderElement","colDef","columnApi","columnReorderApi","signature","DataGrid","stateExportPreProcessing","prevState","context","_props$initialState$c","_props$initialState3","columnsStateToExport","columnVisibilityModelToExport","shouldExportColumnVisibilityModel","exportOnlyDirtyModels","Object","keys","dimensions","forEach","colDefDimensions","propertyName","propertyValue","Infinity","stateRestorePreProcessing","stateToRestore","columnVisibilityModelToImport","initialColumnVisibilityModel","preferencePanelPreProcessing","initialValue","value","_props$slotProps","ColumnsPanel","slots","columnsPanel","slotProps","addColumnMenuItems","columnMenuItems","isPivotActive","disableColumnSelector","prevInnerWidth","useRef","handleGridSizeChange","size","hasFlexColumns","some","flex","hydrateColumns","info","useEffect"],"sources":["C:/Users/mis/rbt-dashboard/node_modules/@mui/x-data-grid/esm/hooks/features/columns/useGridColumns.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { useGridLogger } from \"../../utils/useGridLogger.js\";\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsStateSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from \"./gridColumnsSelector.js\";\nimport { GridSignature } from \"../../../constants/signature.js\";\nimport { useGridEvent } from \"../../utils/useGridEvent.js\";\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from \"../../core/pipeProcessing/index.js\";\nimport { EMPTY_PINNED_COLUMN_FIELDS } from \"./gridColumnsInterfaces.js\";\nimport { hydrateColumnsWidth, createColumnsState, COLUMNS_DIMENSION_PROPERTIES } from \"./gridColumnsUtils.js\";\nimport { GridPreferencePanelsValue } from \"../preferencesPanel/index.js\";\nimport { gridPivotActiveSelector } from \"../pivoting/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.caches.columns = {\n    lastColumnsProp: props.columns\n  };\n  const columnsState = createColumnsState({\n    apiRef,\n    columnsToUpsert: props.columns,\n    initialState: props.initialState?.columns,\n    columnVisibilityModel: props.columnVisibilityModel ?? props.initialState?.columns?.columnVisibilityModel ?? {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState,\n    // In pro/premium, this part of the state is defined. We give it an empty but defined value\n    // for the community version.\n    pinnedColumns: state.pinnedColumns ?? EMPTY_PINNED_COLUMN_FIELDS\n  });\n};\n\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport function useGridColumns(apiRef, props) {\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  apiRef.current.registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n  }, [logger, apiRef]);\n\n  /**\n   * API METHODS\n   */\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnsToUpsert: [],\n          initialState: undefined,\n          columnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.updateRenderContext?.();\n    }\n  }, [apiRef]);\n  const updateColumns = React.useCallback(columns => {\n    if (gridPivotActiveSelector(apiRef)) {\n      apiRef.current.updateNonPivotColumns(columns);\n      return;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false,\n      updateInitialVisibilityModel: true\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n    const isCurrentlyVisible = columnVisibilityModel[field] ?? true;\n    if (isVisible !== isCurrentlyVisible) {\n      const newModel = _extends({}, columnVisibilityModel, {\n        [field]: isVisible\n      });\n      apiRef.current.setColumnVisibilityModel(newModel);\n    }\n  }, [apiRef]);\n  const getColumnIndexRelativeToVisibleColumns = React.useCallback(field => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    return allColumns.findIndex(col => col === field);\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef), {\n      orderedFields: updatedColumns\n    }));\n    const params = {\n      column: apiRef.current.getColumn(field),\n      targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnIndexChange', params);\n  }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const columnsState = gridColumnsStateSelector(apiRef);\n    const column = columnsState.lookup[field];\n    const newColumn = _extends({}, column, {\n      width,\n      hasBeenResized: true\n    });\n    setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {\n      lookup: _extends({}, columnsState.lookup, {\n        [field]: newColumn\n      })\n    }), apiRef.current.getRootDimensions()));\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger, setGridColumnsState]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnIndexRelativeToVisibleColumns,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnWidth\n  };\n  const columnReorderApi = {\n    setColumnIndex\n  };\n  useGridApiMethod(apiRef, columnApi, 'public');\n  useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? 'private' : 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const stateExportPreProcessing = React.useCallback((prevState, context) => {\n    const columnsStateToExport = {};\n    const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n    const shouldExportColumnVisibilityModel =\n    // Always export if the `exportOnlyDirtyModels` property is not activated\n    !context.exportOnlyDirtyModels ||\n    // Always export if the model is controlled\n    props.columnVisibilityModel != null ||\n    // Always export if the model has been initialized\n    // TODO v6 Do a nullish check instead to export even if the initial model equals \"{}\"\n    Object.keys(props.initialState?.columns?.columnVisibilityModel ?? {}).length > 0 ||\n    // Always export if the model is not empty\n    Object.keys(columnVisibilityModelToExport).length > 0;\n    if (shouldExportColumnVisibilityModel) {\n      columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n    }\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef, props.columnVisibilityModel, props.initialState?.columns]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    const initialState = context.stateToRestore.columns;\n    const columnVisibilityModelToImport = initialState?.columnVisibilityModel;\n    if (initialState == null) {\n      return params;\n    }\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState,\n      columnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    if (initialState != null) {\n      apiRef.current.setState(prevState => _extends({}, prevState, {\n        columns: _extends({}, prevState.columns, {\n          lookup: columnsState.lookup,\n          orderedFields: columnsState.orderedFields,\n          initialColumnVisibilityModel: columnsState.initialColumnVisibilityModel\n        })\n      }));\n    }\n\n    // separate column visibility model state update as it can be controlled\n    // https://github.com/mui/mui-x/issues/17681#issuecomment-3012528602\n    if (columnVisibilityModelToImport != null) {\n      apiRef.current.setState(prevState => _extends({}, prevState, {\n        columns: _extends({}, prevState.columns, {\n          columnVisibilityModel: columnVisibilityModelToImport\n        })\n      }));\n    }\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.orderedFields);\n    }\n    return params;\n  }, [apiRef]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      const ColumnsPanel = props.slots.columnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, props.slotProps?.columnsPanel));\n    }\n    return initialValue;\n  }, [props.slots.columnsPanel, props.slotProps?.columnsPanel]);\n  const addColumnMenuItems = React.useCallback(columnMenuItems => {\n    const isPivotActive = gridPivotActiveSelector(apiRef);\n    if (props.disableColumnSelector || isPivotActive) {\n      return columnMenuItems;\n    }\n    return [...columnMenuItems, 'columnMenuColumnsItem'];\n  }, [props.disableColumnSelector, apiRef]);\n  useGridRegisterPipeProcessor(apiRef, 'columnMenu', addColumnMenuItems);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n\n  /*\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n  const handleGridSizeChange = size => {\n    if (prevInnerWidth.current !== size.width) {\n      prevInnerWidth.current = size.width;\n      const hasFlexColumns = gridVisibleColumnDefinitionsSelector(apiRef).some(col => col.flex && col.flex > 0);\n      if (!hasFlexColumns) {\n        return;\n      }\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef), apiRef.current.getRootDimensions()));\n    }\n  };\n  useGridEvent(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n\n  /**\n   * APPLIERS\n   */\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnsToUpsert: [],\n      initialState: undefined,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n\n  /*\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n  React.useEffect(() => {\n    if (apiRef.current.caches.columns.lastColumnsProp === props.columns) {\n      return;\n    }\n    apiRef.current.caches.columns.lastColumnsProp = props.columns;\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n    const columnsState = createColumnsState({\n      apiRef,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true,\n      updateInitialVisibilityModel: true,\n      columnVisibilityModel: props.columnVisibilityModel\n    });\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, props.columnVisibilityModel]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}\nfunction mergeColumnsState(columnsState) {\n  return state => _extends({}, state, {\n    columns: columnsState\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}