rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /** ---------- Helpers ---------- **/
    function isSignedIn() {
      return request.auth != null;
    }

    // Reads caller's role from /users/{uid}; defaults to "viewer"
    function userRole() {
      return isSignedIn()
        ? (
            exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role != null
              ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
              : "viewer"
          )
        : "viewer";
    }

    // Use list helper for membership
    function hasAnyRole(roles) {
      return isSignedIn() && roles.hasAny([userRole()]);
    }

    function isAdmin() {
      return hasAnyRole(["admin", "super_admin"]);
    }

    function isSuperAdmin() {
      return hasAnyRole(["super_admin"]);
    }

    // Enable only in a dev project or emulator:
    // create /__meta/env with { mode: "dev" }
    function isDevMode() {
      return exists(/databases/$(database)/documents/__meta/env) &&
             get(/databases/$(database)/documents/__meta/env).data.mode == "dev";
    }

    /** ---------- USERS ---------- **/
    match /users/{uid} {
      // Read: self or admin
      allow read: if isSignedIn() && (uid == request.auth.uid || isAdmin());

      // Create: only for yourself; optional 'uid' field must match;
      // normal users may NOT set 'role' on create (prevents escalation).
      allow create: if isSignedIn()
        && uid == request.auth.uid
        && (!("uid" in request.resource.data) || request.resource.data.uid == request.auth.uid)
        && (isAdmin() || !("role" in request.resource.data));

      // Update: self (cannot change role) OR admin
      allow update: if isSignedIn() && (
        (uid == request.auth.uid &&
          (!("role" in request.resource.data) ||
           request.resource.data.role == resource.data.role)) ||
        isAdmin()
      );

      // Delete: self or admin
      allow delete: if isSignedIn() && (uid == request.auth.uid || isAdmin());
    }

    /** ---------- BUSINESS DATA ---------- **/
    // Clients → Sites → RBTs
    match /clients/{clientId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();

      match /sites/{siteId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();

        match /rbts/{rbtId} {
          allow read: if isSignedIn();
          allow create, update, delete: if isAdmin();

          // rbt history (YYYY-MM-DD docs)
          match /history/{dateKey} {
            allow read: if isSignedIn();
            allow create, update: if isAdmin();
            allow delete: if isSuperAdmin();
          }
        }
      }
    }

    // Support collectionGroup('rbts') anywhere + its history
    match /{path=**}/rbts/{rbtId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isAdmin();

      match /history/{dateKey} {
        allow read: if isSignedIn();
        allow create, update: if isAdmin();
        allow delete: if isSuperAdmin();
      }
    }

    // Logs collections your app uses
    match /rbt_logs/{logId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // Generic logs pattern (if you have others named ".../logs")
    match /{path=**}/logs/{logId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    /** ---------- DEV MODE OVERRIDE ---------- **/
    // While __meta/env.mode == "dev", let any signed-in user read & write anything.
    // Use this ONLY in emulators or a separate dev project.
    match /{document=**} {
      allow read, write: if isSignedIn() && isDevMode();
    }
  }
}
